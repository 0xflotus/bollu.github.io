
==================== Output Cmm ====================
2018-10-10 15:29:52.361039106 UTC

[]


==================== Output Cmm ====================
2018-10-10 15:29:52.361344483 UTC

[section ""cstring" . Main.$trModule4_bytes" {
     Main.$trModule4_bytes:
         I8[] [109,97,105,110]
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.361808981 UTC

[section ""data" . Main.$trModule3_closure" {
     Main.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Main.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.36249462 UTC

[section ""cstring" . Main.$trModule2_bytes" {
     Main.$trModule2_bytes:
         I8[] [77,97,105,110]
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.362901574 UTC

[section ""data" . Main.$trModule1_closure" {
     Main.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Main.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.363315988 UTC

[section ""data" . Main.$trModule_closure" {
     Main.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Main.$trModule3_closure+1;
         const Main.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.370653248 UTC

[section ""data" . Main.main_$s$w$ssievefn_closure" {
     Main.main_$s$w$ssievefn_closure:
         const Main.main_$s$w$ssievefn_info;
 },
 Main.main_$s$w$ssievefn_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8ro: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call Main.main_$s$w$ssievefn_info(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 go_dn_s8oh_entry() //  [R1, R2]
         { info_tbl: [(c8sH,
                       label: go_dn_s8oh_info
                       rep:HeapRep 1 ptrs 3 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8sH: // global
           _s8oi::I64 = R2;
           _s8oh::P64 = R1;
           goto c8sz;
       c8sz: // global
           _s8nN::P64 = P64[_s8oh::P64 + 6];
           _s8nL::I64 = I64[_s8oh::P64 + 14];
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Lt_W64(_s8oi::I64,
                                                                              I64[_s8oh::P64 + 30])) {
               case 1 : goto c8sG;
               default: goto c8sF;
           }
       c8sG: // global
           _s8oE::I64 = %MO_S_Shr_W64(_s8oi::I64, 3);
           _s8oI::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8oE::I64)]);
           _s8oJ::I64 = _s8oi::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8oJ::I64,
                                                                              64)) {
               case 1 : goto c8td;
               default: goto c8tc;
           }
       c8td: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8oE::I64)] = %MO_UU_Conv_W64_W8(_s8oI::I64);
           R1 = GHC.Tuple.()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c8tc: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8oE::I64)] = %MO_UU_Conv_W64_W8(_s8oI::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8oJ::I64)));
           R1 = GHC.Tuple.()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c8sF: // global
           _s8of::I64 = I64[_s8oh::P64 + 22];
           _s8ol::I64 = %MO_S_Shr_W64(_s8oi::I64, 3);
           _s8op::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ol::I64)]);
           _s8oq::I64 = _s8oi::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8oq::I64,
                                                                              64)) {
               case 1 : goto c8sY;
               default: goto c8sX;
           }
       c8sY: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ol::I64)] = %MO_UU_Conv_W64_W8(_s8op::I64);
           _s8oi::I64 = _s8oi::I64 + _s8of::I64;
           goto c8sz;
       c8sX: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ol::I64)] = %MO_UU_Conv_W64_W8(_s8op::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8oq::I64)));
           _s8oi::I64 = _s8oi::I64 + _s8of::I64;
           goto c8sz;
     }
 },
 go_up_s8pN_entry() //  [R1, R2]
         { info_tbl: [(c8uv,
                       label: go_up_s8pN_info
                       rep:HeapRep 1 ptrs 3 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8uv: // global
           _s8pO::I64 = R2;
           _s8pN::P64 = R1;
           goto c8un;
       c8un: // global
           _s8nN::P64 = P64[_s8pN::P64 + 6];
           _s8nL::I64 = I64[_s8pN::P64 + 14];
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Gt_W64(_s8pO::I64,
                                                                              I64[_s8pN::P64 + 30])) {
               case 1 : goto c8uu;
               default: goto c8ut;
           }
       c8uu: // global
           _s8qa::I64 = %MO_S_Shr_W64(_s8pO::I64, 3);
           _s8qe::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qa::I64)]);
           _s8qf::I64 = _s8pO::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8qf::I64,
                                                                              64)) {
               case 1 : goto c8v1;
               default: goto c8v0;
           }
       c8v1: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qa::I64)] = %MO_UU_Conv_W64_W8(_s8qe::I64);
           R1 = GHC.Tuple.()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c8v0: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qa::I64)] = %MO_UU_Conv_W64_W8(_s8qe::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8qf::I64)));
           R1 = GHC.Tuple.()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c8ut: // global
           _s8pL::I64 = I64[_s8pN::P64 + 22];
           _s8pR::I64 = %MO_S_Shr_W64(_s8pO::I64, 3);
           _s8pV::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pR::I64)]);
           _s8pW::I64 = _s8pO::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8pW::I64,
                                                                              64)) {
               case 1 : goto c8uM;
               default: goto c8uL;
           }
       c8uM: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pR::I64)] = %MO_UU_Conv_W64_W8(_s8pV::I64);
           _s8pO::I64 = _s8pO::I64 + _s8pL::I64;
           goto c8un;
       c8uL: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pR::I64)] = %MO_UU_Conv_W64_W8(_s8pV::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8pW::I64)));
           _s8pO::I64 = _s8pO::I64 + _s8pL::I64;
           goto c8un;
     }
 },
 Main.main_$s$w$ssievefn_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c8vT,
                       label: Main.main_$s$w$ssievefn_info
                       rep:HeapRep static {
                             Fun {arity: 7 fun_type: ArgGen [True, True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8vT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto u8zQ; else goto u8zP;
       u8zQ: // global
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c8vU() args: 0, res: 0, upd: 0;
       u8zP: // global
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c8rp() args: 0, res: 0, upd: 0;
     }
 },
 _c8rp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8rp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8vX; else goto c8vW;
       c8vX: // global
           HpAlloc = 16;
           call _c8vU() args: 0, res: 0, upd: 0;
       c8vW: // global
           _s8nJ::I64 = I64[Sp];
           _s8nK::I64 = I64[Sp + 8];
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Lt_W64(_s8nJ::I64,
                                                                              100000000)) {
               case 1 : goto c8vS;
               default: goto c8vR;
           }
       c8vS: // global
           _s8nL::I64 = I64[Sp + 16];
           _s8nM::I64 = I64[Sp + 24];
           _s8nN::P64 = P64[Sp + 32];
           _s8nU::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + %MO_S_Shr_W64(_s8nJ::I64,
                                                                                              3))]);
           _s8nV::I64 = _s8nJ::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8nV::I64,
                                                                              64)) {
               case 1 : goto c8yf;
               default: goto c8ye;
           }
       c8yf: // global
           Hp = Hp - 16;
           _s8nX::I64 = 0;
           goto s8nW;
       c8ye: // global
           Hp = Hp - 16;
           _s8nX::I64 = 1 << _s8nV::I64;
           goto s8nW;
       s8nW: // global
           _s8o2::I64 = _s8nU::I64 & %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(_s8nX::I64));
           switch [-9223372036854775808 .. 9223372036854775807] _s8o2::I64 {
               case 0 : goto u8zR;
               default: goto c8w2;
           }
       u8zR: // global
           I64[Sp - 8] = _s8o2::I64;
           Sp = Sp - 8;
           call _c8s1() args: 0, res: 0, upd: 0;
       c8w2: // global
           I64[Sp] = _s8nJ::I64 + 1;
           I64[Sp + 8] = _s8nK::I64;
           I64[Sp + 16] = _s8nL::I64;
           I64[Sp + 24] = _s8nM::I64;
           P64[Sp + 32] = _s8nN::P64;
           call _c8rp() args: 0, res: 0, upd: 0;
       c8vR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8nK::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8vU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8vU: // global
           R1 = Main.main_$s$w$ssievefn_closure;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
     }
 },
 _c8s1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8s1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8w9; else goto c8w8;
       c8w9: // global
           HpAlloc = 40;
           _s8o2::I64 = I64[Sp];
           I64[Sp] = block_c8s0_info;
           R1 = _s8o2::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8w8: // global
           _s8nJ::I64 = I64[Sp + 8];
           _s8nK::I64 = I64[Sp + 16];
           _s8nL::I64 = I64[Sp + 24];
           _s8nM::I64 = I64[Sp + 32];
           _s8nN::P64 = P64[Sp + 40];
           _s8o4::I64 = _s8nJ::I64 * _s8nJ::I64;
           _s8o5::I64 = _s8nJ::I64 * _s8nJ::I64 + _s8nJ::I64;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8o5::I64,
                                                                              _s8o4::I64)) {
               case 1 : goto c8ya;
               default: goto c8xa;
           }
       c8ya: // global
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Lt_W64(99999999,
                                                                              _s8o5::I64)) {
               case 1 : goto c8y9;
               default: goto c8xN;
           }
       c8y9: // global
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Lt_W64(99999999,
                                                                              _s8o4::I64)) {
               case 1 : goto c8y8;
               default: goto c8y7;
           }
       c8y8: // global
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       c8y7: // global
           _s8qN::I64 = %MO_S_Shr_W64(_s8o4::I64, 3);
           _s8qR::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qN::I64)]);
           _s8qS::I64 = _s8o4::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8qS::I64,
                                                                              64)) {
               case 1 : goto c8y5;
               default: goto c8y4;
           }
       c8y5: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qN::I64)] = %MO_UU_Conv_W64_W8(_s8qR::I64);
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       c8y4: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8qN::I64)] = %MO_UU_Conv_W64_W8(_s8qR::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8qS::I64)));
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       c8xN: // global
           _s8pF::I64 = %MO_S_Shr_W64(_s8o4::I64, 3);
           _s8pJ::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pF::I64)]);
           I64[Hp - 32] = go_up_s8pN_info;
           P64[Hp - 24] = _s8nN::P64;
           I64[Hp - 16] = _s8nL::I64;
           _s8pL::I64 = _s8o5::I64 - _s8o4::I64;
           I64[Hp - 8] = _s8pL::I64;
           I64[Hp] = 99999999 - _s8pL::I64;
           _s8pK::I64 = _s8o4::I64 & 7;
           _c8ul::P64 = Hp - 30;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8pK::I64,
                                                                              64)) {
               case 1 : goto c8xJ;
               default: goto c8xB;
           }
       c8xJ: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pF::I64)] = %MO_UU_Conv_W64_W8(_s8pJ::I64);
           I64[Sp] = block_c8xI_info;
           R2 = _s8o5::I64;
           R1 = _c8ul::P64;
           call go_up_s8pN_info(R2, R1) args: 8, res: 8, upd: 8;
       c8xB: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8pF::I64)] = %MO_UU_Conv_W64_W8(_s8pJ::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8pK::I64)));
           I64[Sp] = block_c8xz_info;
           R2 = _s8o5::I64;
           R1 = _c8ul::P64;
           call go_up_s8pN_info(R2, R1) args: 8, res: 8, upd: 8;
       c8xa: // global
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Gt_W64(99999999,
                                                                              _s8o5::I64)) {
               case 1 : goto c8x8;
               default: goto c8wM;
           }
       c8x8: // global
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Gt_W64(99999999,
                                                                              _s8o4::I64)) {
               case 1 : goto c8x7;
               default: goto c8x6;
           }
       c8x7: // global
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       c8x6: // global
           _s8ph::I64 = %MO_S_Shr_W64(_s8o4::I64, 3);
           _s8pl::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ph::I64)]);
           _s8pm::I64 = _s8o4::I64 & 7;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8pm::I64,
                                                                              64)) {
               case 1 : goto c8x4;
               default: goto c8x3;
           }
       c8x4: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ph::I64)] = %MO_UU_Conv_W64_W8(_s8pl::I64);
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       c8x3: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8ph::I64)] = %MO_UU_Conv_W64_W8(_s8pl::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8pm::I64)));
           Hp = Hp - 40;
           I64[Sp + 8] = _s8nJ::I64 + 1;
           I64[Sp + 16] = _s8nK::I64 + 1;
           I64[Sp + 24] = _s8nL::I64;
           I64[Sp + 32] = _s8nM::I64;
           P64[Sp + 40] = _s8nN::P64;
           Sp = Sp + 8;
           goto u8Ad;
       u8Ad: // global
           call _c8rp() args: 0, res: 0, upd: 0;
       c8wM: // global
           _s8o9::I64 = %MO_S_Shr_W64(_s8o4::I64, 3);
           _s8od::I64 = %MO_SS_Conv_W8_W64(I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8o9::I64)]);
           I64[Hp - 32] = go_dn_s8oh_info;
           P64[Hp - 24] = _s8nN::P64;
           I64[Hp - 16] = _s8nL::I64;
           _s8of::I64 = _s8o5::I64 - _s8o4::I64;
           I64[Hp - 8] = _s8of::I64;
           I64[Hp] = 99999999 - _s8of::I64;
           _s8oe::I64 = _s8o4::I64 & 7;
           _c8sx::P64 = Hp - 30;
           switch [-9223372036854775808 .. 9223372036854775807] (%MO_S_Ge_W64(_s8oe::I64,
                                                                              64)) {
               case 1 : goto c8wI;
               default: goto c8wA;
           }
       c8wI: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8o9::I64)] = %MO_UU_Conv_W64_W8(_s8od::I64);
           I64[Sp] = block_c8wH_info;
           R2 = _s8o5::I64;
           R1 = _c8sx::P64;
           call go_dn_s8oh_info(R2, R1) args: 8, res: 8, upd: 8;
       c8wA: // global
           I8[(_s8nN::P64 + 16) + (_s8nL::I64 + _s8o9::I64)] = %MO_UU_Conv_W64_W8(_s8od::I64 | %MO_SS_Conv_W8_W64(%MO_SS_Conv_W64_W8(1 << _s8oe::I64)));
           I64[Sp] = block_c8wy_info;
           R2 = _s8o5::I64;
           R1 = _c8sx::P64;
           call go_dn_s8oh_info(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8s0() //  [R1]
         { info_tbl: [(c8s0,
                       label: block_c8s0_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8s0: // global
           I64[Sp] = R1;
           call _c8s1() args: 0, res: 0, upd: 0;
     }
 },
 _c8xI() //  []
         { info_tbl: [(c8xI,
                       label: block_c8xI_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8xI: // global
           I64[Sp + 8] = I64[Sp + 8] + 1;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c8rp() args: 0, res: 0, upd: 0;
     }
 },
 _c8xz() //  []
         { info_tbl: [(c8xz,
                       label: block_c8xz_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8xz: // global
           I64[Sp + 8] = I64[Sp + 8] + 1;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c8rp() args: 0, res: 0, upd: 0;
     }
 },
 _c8wH() //  []
         { info_tbl: [(c8wH,
                       label: block_c8wH_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8wH: // global
           I64[Sp + 8] = I64[Sp + 8] + 1;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c8rp() args: 0, res: 0, upd: 0;
     }
 },
 _c8wy() //  []
         { info_tbl: [(c8wy,
                       label: block_c8wy_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8wy: // global
           I64[Sp + 8] = I64[Sp + 8] + 1;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _c8rp() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.469775586 UTC

[section ""data" . Main.main1_closure" {
     Main.main1_closure:
         const Main.main1_info;
         const 0;
 },
 sat_s8rm_entry() //  [R1]
         { info_tbl: [(c8RB,
                       label: sat_s8rm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8RB: // global
           R2 = P64[R1 + 16];
           call GHC.Show.$fShowInt_$cshow_info(R2) args: 8, res: 0, upd: 8;
     }
 },
 Main.main1_entry() //  []
         { info_tbl: [(c8RE,
                       label: Main.main1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8RE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8RF; else goto c8RG;
       c8RF: // global
           R1 = Main.main1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c8RG: // global
           I64[Sp - 8] = block_c8Ro_info;
           R1 = 12500000;
           Sp = Sp - 8;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Ro() //  [R1]
         { info_tbl: [(c8Ro,
                       label: block_c8Ro_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8Ro: // global
           call "ccall" arg hints:  [PtrHint, ‘signed’, ,
                                     ‘signed’]  result hints:  [] hsprimitive_memset_Word8(R1 + 16, 0, 12500000, 0);
           I64[Sp] = block_c8Rv_info;
           R6 = R1;
           R5 = 12500000;
           R4 = 0;
           R3 = 0;
           R2 = 2;
           call Main.main_$s$w$ssievefn_info(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 _c8Rv() //  [R1]
         { info_tbl: [(c8Rv,
                       label: block_c8Rv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8Rv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8RK; else goto c8RJ;
       c8RK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8RJ: // global
           I64[Hp - 16] = sat_s8rm_info;
           P64[Hp] = R1;
           R4 = GHC.Types.True_closure+2;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           Sp = Sp + 8;
           call GHC.IO.Handle.Text.hPutStr2_info(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.47597944 UTC

[section ""data" . Main.main_closure" {
     Main.main_closure:
         const Main.main_info;
         const 0;
 },
 Main.main_entry() //  []
         { info_tbl: [(c8T6,
                       label: Main.main_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8T6: // global
           call Main.main1_info() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.477275396 UTC

[section ""data" . Main.main2_closure" {
     Main.main2_closure:
         const Main.main2_info;
         const 0;
 },
 Main.main2_entry() //  []
         { info_tbl: [(c8Te,
                       label: Main.main2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8Te: // global
           R2 = Main.main1_closure+1;
           call GHC.TopHandler.runMainIO1_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.478760647 UTC

[section ""data" . :Main.main_closure" {
     :Main.main_closure:
         const :Main.main_info;
         const 0;
 },
 :Main.main_entry() //  []
         { info_tbl: [(c8Tp,
                       label: :Main.main_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8Tp: // global
           call Main.main2_info() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-10-10 15:29:52.480046585 UTC

[section ""relreadonly" . S8RL_srt" {
     S8RL_srt:
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutStr2_closure;
         const Main.main1_closure;
         const GHC.TopHandler.runMainIO1_closure;
         const Main.main2_closure;
 }]

