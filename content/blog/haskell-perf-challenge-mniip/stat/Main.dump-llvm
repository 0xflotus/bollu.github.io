
==================== LLVM Code ====================
2018-10-10 14:02:22.821509492 UTC

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"


==================== LLVM Code ====================
2018-10-10 14:02:22.821779156 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 14:02:22.821937974 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 14:02:22.822103572 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2018-10-10 14:02:22.82225297 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.822432952 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2018-10-10 14:02:22.822791837 UTC



==================== LLVM Code ====================
2018-10-10 14:02:22.82360272 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.824027473 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.82438519 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.824954317 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.825380658 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.825784197 UTC

%r8y4_closure_struct = type <{i64, i64}>
@r8y4_closure$def = internal global %r8y4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 0}>
@r8y4_closure = internal alias i8, bitcast (%r8y4_closure_struct* @r8y4_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.908818306 UTC

%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.909349152 UTC

@s8yl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yl_info$def to i8*)
define internal ghccc void @s8yl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8CP:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8O5 = add i64 %R1_Arg, 16
  %ln8O6 = inttoptr i64 %ln8O5 to i64*
  %ln8O7 = load i64, i64* %ln8O6, !tbaa !4
  store i64 %ln8O7, i64* %R2_Var
  %ln8O8 = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8O9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8O8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8O9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.90996129 UTC

@s8yr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yr_info$def to i8*)
define internal ghccc void @s8yr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8D1:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Oa = add i64 %R1_Arg, 16
  %ln8Ob = inttoptr i64 %ln8Oa to i64*
  %ln8Oc = load i64, i64* %ln8Ob, !tbaa !4
  store i64 %ln8Oc, i64* %R2_Var
  %ln8Od = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oe = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Od( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Oe, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.9105812 UTC

@s8yx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yx_info$def to i8*)
define internal ghccc void @s8yx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8Dd:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Of = add i64 %R1_Arg, 16
  %ln8Og = inttoptr i64 %ln8Of to i64*
  %ln8Oh = load i64, i64* %ln8Og, !tbaa !4
  store i64 %ln8Oh, i64* %R2_Var
  %ln8Oi = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Oi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Oj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.911238813 UTC

@s8yD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yD_info$def to i8*)
define internal ghccc void @s8yD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8Dp:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Ok = add i64 %R1_Arg, 16
  %ln8Ol = inttoptr i64 %ln8Ok to i64*
  %ln8Om = load i64, i64* %ln8Ol, !tbaa !4
  store i64 %ln8Om, i64* %R2_Var
  %ln8On = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oo = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8On( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Oo, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.911848541 UTC

@s8yJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yJ_info$def to i8*)
define internal ghccc void @s8yJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8DB:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Op = add i64 %R1_Arg, 16
  %ln8Oq = inttoptr i64 %ln8Op to i64*
  %ln8Or = load i64, i64* %ln8Oq, !tbaa !4
  store i64 %ln8Or, i64* %R2_Var
  %ln8Os = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ot = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Os( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Ot, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.912451961 UTC

@s8yP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yP_info$def to i8*)
define internal ghccc void @s8yP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8DN:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Ou = add i64 %R1_Arg, 16
  %ln8Ov = inttoptr i64 %ln8Ou to i64*
  %ln8Ow = load i64, i64* %ln8Ov, !tbaa !4
  store i64 %ln8Ow, i64* %R2_Var
  %ln8Ox = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oy = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ox( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Oy, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.913052884 UTC

@s8yV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yV_info$def to i8*)
define internal ghccc void @s8yV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8DZ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Oz = add i64 %R1_Arg, 16
  %ln8OA = inttoptr i64 %ln8Oz to i64*
  %ln8OB = load i64, i64* %ln8OA, !tbaa !4
  store i64 %ln8OB, i64* %R2_Var
  %ln8OC = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OD = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OD, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.913654065 UTC

@s8z1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8z1_info$def to i8*)
define internal ghccc void @s8z1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8Eb:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8OE = add i64 %R1_Arg, 16
  %ln8OF = inttoptr i64 %ln8OE to i64*
  %ln8OG = load i64, i64* %ln8OF, !tbaa !4
  store i64 %ln8OG, i64* %R2_Var
  %ln8OH = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.914273307 UTC

@s8z7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8z7_info$def to i8*)
define internal ghccc void @s8z7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8En:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8OJ = add i64 %R1_Arg, 16
  %ln8OK = inttoptr i64 %ln8OJ to i64*
  %ln8OL = load i64, i64* %ln8OK, !tbaa !4
  store i64 %ln8OL, i64* %R2_Var
  %ln8OM = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ON = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8ON, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.914872954 UTC

@s8zd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zd_info$def to i8*)
define internal ghccc void @s8zd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8Ez:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8OO = add i64 %R1_Arg, 16
  %ln8OP = inttoptr i64 %ln8OO to i64*
  %ln8OQ = load i64, i64* %ln8OP, !tbaa !4
  store i64 %ln8OQ, i64* %R2_Var
  %ln8OR = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.915474824 UTC

@s8zj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zj_info$def to i8*)
define internal ghccc void @s8zj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8EL:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8OT = add i64 %R1_Arg, 16
  %ln8OU = inttoptr i64 %ln8OT to i64*
  %ln8OV = load i64, i64* %ln8OU, !tbaa !4
  store i64 %ln8OV, i64* %R2_Var
  %ln8OW = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OX = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8OX, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.916526805 UTC

@s8zH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zH_info$def to i8*)
define internal ghccc void @s8zH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8Fu:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8OY = load i64*, i64** %Sp_Var
  %ln8OZ = getelementptr inbounds i64, i64* %ln8OY, i32 -3
  %ln8P0 = ptrtoint i64* %ln8OZ to i64
  %ln8P1 = icmp ult i64 %ln8P0, %SpLim_Arg
  %ln8P3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8P1, i1 0 )
  br i1 %ln8P3, label %c8FB, label %c8FC
c8FC:
  %ln8P5 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8P4 = load i64*, i64** %Sp_Var
  %ln8P6 = getelementptr inbounds i64, i64* %ln8P4, i32 -2
  store i64 %ln8P5, i64* %ln8P6, !tbaa !2
  %ln8P8 = load i64, i64* %R1_Var
  %ln8P7 = load i64*, i64** %Sp_Var
  %ln8P9 = getelementptr inbounds i64, i64* %ln8P7, i32 -1
  store i64 %ln8P8, i64* %ln8P9, !tbaa !2
  %ln8Pb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fr_info$def to i64
  %ln8Pa = load i64*, i64** %Sp_Var
  %ln8Pc = getelementptr inbounds i64, i64* %ln8Pa, i32 -3
  store i64 %ln8Pb, i64* %ln8Pc, !tbaa !2
  %ln8Pf = load i64, i64* %R1_Var
  %ln8Pg = add i64 %ln8Pf, 16
  %ln8Ph = inttoptr i64 %ln8Pg to i64*
  %ln8Pi = load i64, i64* %ln8Ph, !tbaa !4
  store i64 %ln8Pi, i64* %R1_Var
  %ln8Pj = load i64*, i64** %Sp_Var
  %ln8Pk = getelementptr inbounds i64, i64* %ln8Pj, i32 -3
  %ln8Pl = ptrtoint i64* %ln8Pk to i64
  %ln8Pm = inttoptr i64 %ln8Pl to i64*
  store i64* %ln8Pm, i64** %Sp_Var
  %ln8Pn = load i64, i64* %R1_Var
  %ln8Po = and i64 %ln8Pn, 7
  %ln8Pp = icmp ne i64 %ln8Po, 0
  br i1 %ln8Pp, label %u8FG, label %c8Fs
c8Fs:
  %ln8Pr = load i64, i64* %R1_Var
  %ln8Ps = inttoptr i64 %ln8Pr to i64*
  %ln8Pt = load i64, i64* %ln8Ps, !tbaa !4
  %ln8Pu = inttoptr i64 %ln8Pt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Pv = load i64*, i64** %Sp_Var
  %ln8Pw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Pu( i64* %Base_Arg, i64* %ln8Pv, i64* %Hp_Arg, i64 %ln8Pw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8FG:
  %ln8Px = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Py = load i64*, i64** %Sp_Var
  %ln8Pz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Px( i64* %Base_Arg, i64* %ln8Py, i64* %Hp_Arg, i64 %ln8Pz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FB:
  %ln8PA = load i64, i64* %R1_Var
  store i64 %ln8PA, i64* %R1_Var
  %ln8PB = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8PC = bitcast i64* %ln8PB to i64*
  %ln8PD = load i64, i64* %ln8PC, !tbaa !5
  %ln8PE = inttoptr i64 %ln8PD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8PF = load i64*, i64** %Sp_Var
  %ln8PG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8PE( i64* %Base_Arg, i64* %ln8PF, i64* %Hp_Arg, i64 %ln8PG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2018-10-10 14:02:22.920548282 UTC

@c8Fr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fr_info$def to i8*)
define internal ghccc void @c8Fr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c8Fr:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8zG = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8PH = load i64*, i64** %Hp_Var
  %ln8PI = getelementptr inbounds i64, i64* %ln8PH, i32 2
  %ln8PJ = ptrtoint i64* %ln8PI to i64
  %ln8PK = inttoptr i64 %ln8PJ to i64*
  store i64* %ln8PK, i64** %Hp_Var
  %ln8PL = load i64*, i64** %Hp_Var
  %ln8PM = ptrtoint i64* %ln8PL to i64
  %ln8PN = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8PO = bitcast i64* %ln8PN to i64*
  %ln8PP = load i64, i64* %ln8PO, !tbaa !5
  %ln8PQ = icmp ugt i64 %ln8PM, %ln8PP
  %ln8PR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8PQ, i1 0 )
  br i1 %ln8PR, label %c8FF, label %c8FE
c8FE:
  %ln8PU = load i64, i64* %R1_Var
  %ln8PV = add i64 %ln8PU, 7
  %ln8PW = inttoptr i64 %ln8PV to i64*
  %ln8PX = load i64, i64* %ln8PW, !tbaa !4
  %ln8PY = add i64 %ln8PX, 1
  store i64 %ln8PY, i64* %ls8zG
  %ln8Q0 = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %ln8PZ = load i64*, i64** %Hp_Var
  %ln8Q1 = getelementptr inbounds i64, i64* %ln8PZ, i32 -1
  store i64 %ln8Q0, i64* %ln8Q1, !tbaa !3
  %ln8Q3 = load i64, i64* %ls8zG
  %ln8Q2 = load i64*, i64** %Hp_Var
  %ln8Q4 = getelementptr inbounds i64, i64* %ln8Q2, i32 0
  store i64 %ln8Q3, i64* %ln8Q4, !tbaa !3
  %ln8Q6 = load i64*, i64** %Hp_Var
  %ln8Q7 = ptrtoint i64* %ln8Q6 to i64
  %ln8Q8 = add i64 %ln8Q7, -7
  store i64 %ln8Q8, i64* %R1_Var
  %ln8Q9 = load i64*, i64** %Sp_Var
  %ln8Qa = getelementptr inbounds i64, i64* %ln8Q9, i32 1
  %ln8Qb = ptrtoint i64* %ln8Qa to i64
  %ln8Qc = inttoptr i64 %ln8Qb to i64*
  store i64* %ln8Qc, i64** %Sp_Var
  %ln8Qd = load i64*, i64** %Sp_Var
  %ln8Qe = getelementptr inbounds i64, i64* %ln8Qd, i32 0
  %ln8Qf = bitcast i64* %ln8Qe to i64*
  %ln8Qg = load i64, i64* %ln8Qf, !tbaa !2
  %ln8Qh = inttoptr i64 %ln8Qg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qi = load i64*, i64** %Sp_Var
  %ln8Qj = load i64*, i64** %Hp_Var
  %ln8Qk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qh( i64* %Base_Arg, i64* %ln8Qi, i64* %ln8Qj, i64 %ln8Qk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FF:
  %ln8Ql = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8Ql, !tbaa !5
  %ln8Qm = load i64, i64* %R1_Var
  store i64 %ln8Qm, i64* %R1_Var
  %ln8Qn = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qo = load i64*, i64** %Sp_Var
  %ln8Qp = load i64*, i64** %Hp_Var
  %ln8Qq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qn( i64* %Base_Arg, i64* %ln8Qo, i64* %ln8Qp, i64 %ln8Qq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.922268614 UTC

@s8zV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zV_info$def to i8*)
define internal ghccc void @s8zV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 8589934593, i64 8}>
{
c8Gl:
  %ls8zW = alloca i64, i32 1
  %ls8zV = alloca i64, i32 1
  %ls8y9 = alloca i64, i32 1
  %ls8zT = alloca i64, i32 1
  %ls8zZ = alloca i64, i32 1
  %ls8A2 = alloca i64, i32 1
  %ls8A3 = alloca i64, i32 1
  %ls8Af = alloca i64, i32 1
  %ls8Ai = alloca i64, i32 1
  %ls8Aj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8zW
  %ln8Qr = load i64, i64* %R1_Var
  store i64 %ln8Qr, i64* %ls8zV
  br label %c8Gd
c8Gd:
  %ln8Qs = load i64, i64* %ls8zV
  %ln8Qt = add i64 %ln8Qs, 6
  %ln8Qu = inttoptr i64 %ln8Qt to i64*
  %ln8Qv = load i64, i64* %ln8Qu, !tbaa !1
  store i64 %ln8Qv, i64* %ls8y9
  %ln8Qw = load i64, i64* %ls8zW
  %ln8Qx = load i64, i64* %ls8zV
  %ln8Qy = add i64 %ln8Qx, 22
  %ln8Qz = inttoptr i64 %ln8Qy to i64*
  %ln8QA = load i64, i64* %ln8Qz, !tbaa !1
  %ln8QB = icmp slt i64 %ln8Qw, %ln8QA
  %ln8QC = zext i1 %ln8QB to i64
  switch i64 %ln8QC, label %c8Gj [i64 1, label %c8Gk]
c8Gj:
  %ln8QD = load i64, i64* %ls8zV
  %ln8QE = add i64 %ln8QD, 14
  %ln8QF = inttoptr i64 %ln8QE to i64*
  %ln8QG = load i64, i64* %ln8QF, !tbaa !1
  store i64 %ln8QG, i64* %ls8zT
  %ln8QH = load i64, i64* %ls8zW
  %ln8QI = ashr i64 %ln8QH, 3
  store i64 %ln8QI, i64* %ls8zZ
  %ln8QJ = load i64, i64* %ls8y9
  %ln8QK = add i64 %ln8QJ, 16
  %ln8QL = load i64, i64* %ls8zZ
  %ln8QM = add i64 %ln8QK, %ln8QL
  %ln8QN = inttoptr i64 %ln8QM to i8*
  %ln8QO = load i8, i8* %ln8QN, !tbaa !1
  %ln8QP = sext i8 %ln8QO to i64
  store i64 %ln8QP, i64* %ls8A2
  %ln8QQ = load i64, i64* %ls8zW
  %ln8QR = and i64 %ln8QQ, 7
  store i64 %ln8QR, i64* %ls8A3
  %ln8QS = load i64, i64* %ls8A3
  %ln8QT = icmp sge i64 %ln8QS, 64
  %ln8QU = zext i1 %ln8QT to i64
  switch i64 %ln8QU, label %c8Gy [i64 1, label %c8Gz]
c8Gy:
  %ln8QV = load i64, i64* %ls8y9
  %ln8QW = add i64 %ln8QV, 16
  %ln8QX = load i64, i64* %ls8zZ
  %ln8QY = add i64 %ln8QW, %ln8QX
  %ln8QZ = load i64, i64* %ls8A2
  %ln8R0 = load i64, i64* %ls8A3
  %ln8R1 = shl i64 1, %ln8R0
  %ln8R2 = trunc i64 %ln8R1 to i8
  %ln8R3 = sext i8 %ln8R2 to i64
  %ln8R4 = or i64 %ln8QZ, %ln8R3
  %ln8R5 = trunc i64 %ln8R4 to i8
  %ln8R6 = inttoptr i64 %ln8QY to i8*
  store i8 %ln8R5, i8* %ln8R6, !tbaa !1
  %ln8R7 = load i64, i64* %ls8zW
  %ln8R8 = load i64, i64* %ls8zT
  %ln8R9 = add i64 %ln8R7, %ln8R8
  store i64 %ln8R9, i64* %ls8zW
  br label %c8Gd
c8Gz:
  %ln8Ra = load i64, i64* %ls8y9
  %ln8Rb = add i64 %ln8Ra, 16
  %ln8Rc = load i64, i64* %ls8zZ
  %ln8Rd = add i64 %ln8Rb, %ln8Rc
  %ln8Re = load i64, i64* %ls8A2
  %ln8Rf = trunc i64 %ln8Re to i8
  %ln8Rg = inttoptr i64 %ln8Rd to i8*
  store i8 %ln8Rf, i8* %ln8Rg, !tbaa !1
  %ln8Rh = load i64, i64* %ls8zW
  %ln8Ri = load i64, i64* %ls8zT
  %ln8Rj = add i64 %ln8Rh, %ln8Ri
  store i64 %ln8Rj, i64* %ls8zW
  br label %c8Gd
c8Gk:
  %ln8Rk = load i64, i64* %ls8zW
  %ln8Rl = ashr i64 %ln8Rk, 3
  store i64 %ln8Rl, i64* %ls8Af
  %ln8Rm = load i64, i64* %ls8y9
  %ln8Rn = add i64 %ln8Rm, 16
  %ln8Ro = load i64, i64* %ls8Af
  %ln8Rp = add i64 %ln8Rn, %ln8Ro
  %ln8Rq = inttoptr i64 %ln8Rp to i8*
  %ln8Rr = load i8, i8* %ln8Rq, !tbaa !1
  %ln8Rs = sext i8 %ln8Rr to i64
  store i64 %ln8Rs, i64* %ls8Ai
  %ln8Rt = load i64, i64* %ls8zW
  %ln8Ru = and i64 %ln8Rt, 7
  store i64 %ln8Ru, i64* %ls8Aj
  %ln8Rv = load i64, i64* %ls8Aj
  %ln8Rw = icmp sge i64 %ln8Rv, 64
  %ln8Rx = zext i1 %ln8Rw to i64
  switch i64 %ln8Rx, label %c8GK [i64 1, label %c8GL]
c8GK:
  %ln8Ry = load i64, i64* %ls8y9
  %ln8Rz = add i64 %ln8Ry, 16
  %ln8RA = load i64, i64* %ls8Af
  %ln8RB = add i64 %ln8Rz, %ln8RA
  %ln8RC = load i64, i64* %ls8Ai
  %ln8RD = load i64, i64* %ls8Aj
  %ln8RE = shl i64 1, %ln8RD
  %ln8RF = trunc i64 %ln8RE to i8
  %ln8RG = sext i8 %ln8RF to i64
  %ln8RH = or i64 %ln8RC, %ln8RG
  %ln8RI = trunc i64 %ln8RH to i8
  %ln8RJ = inttoptr i64 %ln8RB to i8*
  store i8 %ln8RI, i8* %ln8RJ, !tbaa !1
  %ln8RK = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8RL = add i64 %ln8RK, 1
  store i64 %ln8RL, i64* %R1_Var
  %ln8RM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8RN = bitcast i64* %ln8RM to i64*
  %ln8RO = load i64, i64* %ln8RN, !tbaa !2
  %ln8RP = inttoptr i64 %ln8RO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8RQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8GL:
  %ln8RR = load i64, i64* %ls8y9
  %ln8RS = add i64 %ln8RR, 16
  %ln8RT = load i64, i64* %ls8Af
  %ln8RU = add i64 %ln8RS, %ln8RT
  %ln8RV = load i64, i64* %ls8Ai
  %ln8RW = trunc i64 %ln8RV to i8
  %ln8RX = inttoptr i64 %ln8RU to i8*
  store i8 %ln8RW, i8* %ln8RX, !tbaa !1
  %ln8RY = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8RZ = add i64 %ln8RY, 1
  store i64 %ln8RZ, i64* %R1_Var
  %ln8S0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8S1 = bitcast i64* %ln8S0 to i64*
  %ln8S2 = load i64, i64* %ln8S1, !tbaa !2
  %ln8S3 = inttoptr i64 %ln8S2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8S4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8S3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8S4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.924676458 UTC

@s8Bf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8Bf_info$def to i8*)
define internal ghccc void @s8Bf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 8589934593, i64 8}>
{
c8HP:
  %ls8Bg = alloca i64, i32 1
  %ls8Bf = alloca i64, i32 1
  %ls8y9 = alloca i64, i32 1
  %ls8Bd = alloca i64, i32 1
  %ls8Bj = alloca i64, i32 1
  %ls8Bm = alloca i64, i32 1
  %ls8Bn = alloca i64, i32 1
  %ls8Bz = alloca i64, i32 1
  %ls8BC = alloca i64, i32 1
  %ls8BD = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8Bg
  %ln8S5 = load i64, i64* %R1_Var
  store i64 %ln8S5, i64* %ls8Bf
  br label %c8HH
c8HH:
  %ln8S6 = load i64, i64* %ls8Bf
  %ln8S7 = add i64 %ln8S6, 6
  %ln8S8 = inttoptr i64 %ln8S7 to i64*
  %ln8S9 = load i64, i64* %ln8S8, !tbaa !1
  store i64 %ln8S9, i64* %ls8y9
  %ln8Sa = load i64, i64* %ls8Bg
  %ln8Sb = load i64, i64* %ls8Bf
  %ln8Sc = add i64 %ln8Sb, 22
  %ln8Sd = inttoptr i64 %ln8Sc to i64*
  %ln8Se = load i64, i64* %ln8Sd, !tbaa !1
  %ln8Sf = icmp sgt i64 %ln8Sa, %ln8Se
  %ln8Sg = zext i1 %ln8Sf to i64
  switch i64 %ln8Sg, label %c8HN [i64 1, label %c8HO]
c8HN:
  %ln8Sh = load i64, i64* %ls8Bf
  %ln8Si = add i64 %ln8Sh, 14
  %ln8Sj = inttoptr i64 %ln8Si to i64*
  %ln8Sk = load i64, i64* %ln8Sj, !tbaa !1
  store i64 %ln8Sk, i64* %ls8Bd
  %ln8Sl = load i64, i64* %ls8Bg
  %ln8Sm = ashr i64 %ln8Sl, 3
  store i64 %ln8Sm, i64* %ls8Bj
  %ln8Sn = load i64, i64* %ls8y9
  %ln8So = add i64 %ln8Sn, 16
  %ln8Sp = load i64, i64* %ls8Bj
  %ln8Sq = add i64 %ln8So, %ln8Sp
  %ln8Sr = inttoptr i64 %ln8Sq to i8*
  %ln8Ss = load i8, i8* %ln8Sr, !tbaa !1
  %ln8St = sext i8 %ln8Ss to i64
  store i64 %ln8St, i64* %ls8Bm
  %ln8Su = load i64, i64* %ls8Bg
  %ln8Sv = and i64 %ln8Su, 7
  store i64 %ln8Sv, i64* %ls8Bn
  %ln8Sw = load i64, i64* %ls8Bn
  %ln8Sx = icmp sge i64 %ln8Sw, 64
  %ln8Sy = zext i1 %ln8Sx to i64
  switch i64 %ln8Sy, label %c8I2 [i64 1, label %c8I3]
c8I2:
  %ln8Sz = load i64, i64* %ls8y9
  %ln8SA = add i64 %ln8Sz, 16
  %ln8SB = load i64, i64* %ls8Bj
  %ln8SC = add i64 %ln8SA, %ln8SB
  %ln8SD = load i64, i64* %ls8Bm
  %ln8SE = load i64, i64* %ls8Bn
  %ln8SF = shl i64 1, %ln8SE
  %ln8SG = trunc i64 %ln8SF to i8
  %ln8SH = sext i8 %ln8SG to i64
  %ln8SI = or i64 %ln8SD, %ln8SH
  %ln8SJ = trunc i64 %ln8SI to i8
  %ln8SK = inttoptr i64 %ln8SC to i8*
  store i8 %ln8SJ, i8* %ln8SK, !tbaa !1
  %ln8SL = load i64, i64* %ls8Bg
  %ln8SM = load i64, i64* %ls8Bd
  %ln8SN = add i64 %ln8SL, %ln8SM
  store i64 %ln8SN, i64* %ls8Bg
  br label %c8HH
c8I3:
  %ln8SO = load i64, i64* %ls8y9
  %ln8SP = add i64 %ln8SO, 16
  %ln8SQ = load i64, i64* %ls8Bj
  %ln8SR = add i64 %ln8SP, %ln8SQ
  %ln8SS = load i64, i64* %ls8Bm
  %ln8ST = trunc i64 %ln8SS to i8
  %ln8SU = inttoptr i64 %ln8SR to i8*
  store i8 %ln8ST, i8* %ln8SU, !tbaa !1
  %ln8SV = load i64, i64* %ls8Bg
  %ln8SW = load i64, i64* %ls8Bd
  %ln8SX = add i64 %ln8SV, %ln8SW
  store i64 %ln8SX, i64* %ls8Bg
  br label %c8HH
c8HO:
  %ln8SY = load i64, i64* %ls8Bg
  %ln8SZ = ashr i64 %ln8SY, 3
  store i64 %ln8SZ, i64* %ls8Bz
  %ln8T0 = load i64, i64* %ls8y9
  %ln8T1 = add i64 %ln8T0, 16
  %ln8T2 = load i64, i64* %ls8Bz
  %ln8T3 = add i64 %ln8T1, %ln8T2
  %ln8T4 = inttoptr i64 %ln8T3 to i8*
  %ln8T5 = load i8, i8* %ln8T4, !tbaa !1
  %ln8T6 = sext i8 %ln8T5 to i64
  store i64 %ln8T6, i64* %ls8BC
  %ln8T7 = load i64, i64* %ls8Bg
  %ln8T8 = and i64 %ln8T7, 7
  store i64 %ln8T8, i64* %ls8BD
  %ln8T9 = load i64, i64* %ls8BD
  %ln8Ta = icmp sge i64 %ln8T9, 64
  %ln8Tb = zext i1 %ln8Ta to i64
  switch i64 %ln8Tb, label %c8Ie [i64 1, label %c8If]
c8Ie:
  %ln8Tc = load i64, i64* %ls8y9
  %ln8Td = add i64 %ln8Tc, 16
  %ln8Te = load i64, i64* %ls8Bz
  %ln8Tf = add i64 %ln8Td, %ln8Te
  %ln8Tg = load i64, i64* %ls8BC
  %ln8Th = load i64, i64* %ls8BD
  %ln8Ti = shl i64 1, %ln8Th
  %ln8Tj = trunc i64 %ln8Ti to i8
  %ln8Tk = sext i8 %ln8Tj to i64
  %ln8Tl = or i64 %ln8Tg, %ln8Tk
  %ln8Tm = trunc i64 %ln8Tl to i8
  %ln8Tn = inttoptr i64 %ln8Tf to i8*
  store i8 %ln8Tm, i8* %ln8Tn, !tbaa !1
  %ln8To = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8Tp = add i64 %ln8To, 1
  store i64 %ln8Tp, i64* %R1_Var
  %ln8Tq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8Tr = bitcast i64* %ln8Tq to i64*
  %ln8Ts = load i64, i64* %ln8Tr, !tbaa !2
  %ln8Tt = inttoptr i64 %ln8Ts to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Tu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Tt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Tu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8If:
  %ln8Tv = load i64, i64* %ls8y9
  %ln8Tw = add i64 %ln8Tv, 16
  %ln8Tx = load i64, i64* %ls8Bz
  %ln8Ty = add i64 %ln8Tw, %ln8Tx
  %ln8Tz = load i64, i64* %ls8BC
  %ln8TA = trunc i64 %ln8Tz to i8
  %ln8TB = inttoptr i64 %ln8Ty to i8*
  store i8 %ln8TA, i8* %ln8TB, !tbaa !1
  %ln8TC = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8TD = add i64 %ln8TC, 1
  store i64 %ln8TD, i64* %R1_Var
  %ln8TE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8TF = bitcast i64* %ln8TE to i64*
  %ln8TG = load i64, i64* %ln8TF, !tbaa !2
  %ln8TH = inttoptr i64 %ln8TG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8TI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.926707679 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)),i64 0), i64 4294967299, i64 0, i64 30064771086}>
{
c8IT:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8TJ = load i64*, i64** %Sp_Var
  %ln8TK = getelementptr inbounds i64, i64* %ln8TJ, i32 -4
  %ln8TL = ptrtoint i64* %ln8TK to i64
  %ln8TM = icmp ult i64 %ln8TL, %SpLim_Arg
  %ln8TN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8TM, i1 0 )
  br i1 %ln8TN, label %c8IU, label %c8IV
c8IV:
  %ln8TP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Cx_info$def to i64
  %ln8TO = load i64*, i64** %Sp_Var
  %ln8TQ = getelementptr inbounds i64, i64* %ln8TO, i32 -1
  store i64 %ln8TP, i64* %ln8TQ, !tbaa !2
  store i64 12500000, i64* %R1_Var
  %ln8TR = load i64*, i64** %Sp_Var
  %ln8TS = getelementptr inbounds i64, i64* %ln8TR, i32 -1
  %ln8TT = ptrtoint i64* %ln8TS to i64
  %ln8TU = inttoptr i64 %ln8TT to i64*
  store i64* %ln8TU, i64** %Sp_Var
  %ln8TV = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TW = load i64*, i64** %Sp_Var
  %ln8TX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TV( i64* %Base_Arg, i64* %ln8TW, i64* %Hp_Arg, i64 %ln8TX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8IU:
  %ln8TY = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln8TY, i64* %R1_Var
  %ln8TZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8U0 = bitcast i64* %ln8TZ to i64*
  %ln8U1 = load i64, i64* %ln8U0, !tbaa !5
  %ln8U2 = inttoptr i64 %ln8U1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8U3 = load i64*, i64** %Sp_Var
  %ln8U4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8U2( i64* %Base_Arg, i64* %ln8U3, i64* %Hp_Arg, i64 %ln8U4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.928016367 UTC

@c8Cx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Cx_info$def to i8*)
define internal ghccc void @c8Cx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Cx_info$def to i64)),i64 0), i64 0, i64 12884901918}>
{
c8Cx:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8y9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8U6 = load i64, i64* %R1_Var
  %ln8U7 = add i64 %ln8U6, 16
  %ln8U8 = inttoptr i64 %ln8U7 to i8*
  %ln8U9 = bitcast i8* @hsprimitive_memset_Word8 to void (i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i64, i64, i64) %ln8U9( i8* %ln8U8, i64 0, i64 12500000, i64 0 ) nounwind
  %ln8Ub = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CE_info$def to i64
  %ln8Ua = load i64*, i64** %Sp_Var
  %ln8Uc = getelementptr inbounds i64, i64* %ln8Ua, i32 -1
  store i64 %ln8Ub, i64* %ln8Uc, !tbaa !2
  %ln8Ud = load i64, i64* %R1_Var
  store i64 %ln8Ud, i64* %ls8y9
  %ln8Ue = ptrtoint %r8y4_closure_struct* @r8y4_closure$def to i64
  %ln8Uf = add i64 %ln8Ue, 1
  store i64 %ln8Uf, i64* %R1_Var
  %ln8Uh = load i64, i64* %ls8y9
  %ln8Ug = load i64*, i64** %Sp_Var
  %ln8Ui = getelementptr inbounds i64, i64* %ln8Ug, i32 0
  store i64 %ln8Uh, i64* %ln8Ui, !tbaa !2
  %ln8Uj = load i64*, i64** %Sp_Var
  %ln8Uk = getelementptr inbounds i64, i64* %ln8Uj, i32 -1
  %ln8Ul = ptrtoint i64* %ln8Uk to i64
  %ln8Um = inttoptr i64 %ln8Ul to i64*
  store i64* %ln8Um, i64** %Sp_Var
  %ln8Un = bitcast i8* @stg_newMutVarzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Uo = load i64*, i64** %Sp_Var
  %ln8Up = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Un( i64* %Base_Arg, i64* %ln8Uo, i64* %Hp_Arg, i64 %ln8Up, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.929243274 UTC

@c8CE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CE_info$def to i8*)
define internal ghccc void @c8CE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CE_info$def to i64)),i64 0), i64 1, i64 12884901918}>
{
c8CE:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Uq = load i64*, i64** %Sp_Var
  %ln8Ur = getelementptr inbounds i64, i64* %ln8Uq, i32 -1
  store i64 2, i64* %ln8Ur, !tbaa !2
  %ln8Us = load i64*, i64** %Sp_Var
  %ln8Ut = getelementptr inbounds i64, i64* %ln8Us, i32 0
  store i64 %R1_Arg, i64* %ln8Ut, !tbaa !2
  %ln8Uu = load i64*, i64** %Sp_Var
  %ln8Uv = getelementptr inbounds i64, i64* %ln8Uu, i32 -1
  %ln8Uw = ptrtoint i64* %ln8Uv to i64
  %ln8Ux = inttoptr i64 %ln8Uw to i64*
  store i64* %ln8Ux, i64** %Sp_Var
  %ln8Uy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Uz = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Uy( i64* %Base_Arg, i64* %ln8Uz, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.930351713 UTC

@_c8ER = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to i8*)
define internal ghccc void @_c8ER$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8ER:
  %ls8zl = alloca i64, i32 1
  %ls8zq = alloca i64, i32 1
  %ls8zr = alloca i64, i32 1
  %ls8zt = alloca i64, i32 1
  %ls8zy = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8UA = load i64*, i64** %Sp_Var
  %ln8UB = getelementptr inbounds i64, i64* %ln8UA, i32 0
  %ln8UC = bitcast i64* %ln8UB to i64*
  %ln8UD = load i64, i64* %ln8UC, !tbaa !2
  store i64 %ln8UD, i64* %ls8zl
  %ln8UE = load i64*, i64** %Sp_Var
  %ln8UF = getelementptr inbounds i64, i64* %ln8UE, i32 2
  %ln8UG = bitcast i64* %ln8UF to i64*
  %ln8UH = load i64, i64* %ln8UG, !tbaa !2
  %ln8UI = load i64, i64* %ls8zl
  %ln8UJ = ashr i64 %ln8UI, 3
  %ln8UK = add i64 %ln8UJ, 16
  %ln8UL = add i64 %ln8UH, %ln8UK
  %ln8UM = inttoptr i64 %ln8UL to i8*
  %ln8UN = load i8, i8* %ln8UM, !tbaa !1
  %ln8UO = sext i8 %ln8UN to i64
  store i64 %ln8UO, i64* %ls8zq
  %ln8UP = load i64, i64* %ls8zl
  %ln8UQ = and i64 %ln8UP, 7
  store i64 %ln8UQ, i64* %ls8zr
  %ln8UR = load i64, i64* %ls8zr
  %ln8US = icmp sge i64 %ln8UR, 64
  %ln8UT = zext i1 %ln8US to i64
  switch i64 %ln8UT, label %c8MR [i64 1, label %c8MS]
c8MR:
  %ln8UU = load i64, i64* %ls8zr
  %ln8UV = shl i64 1, %ln8UU
  store i64 %ln8UV, i64* %ls8zt
  br label %s8zs
s8zs:
  %ln8UW = load i64, i64* %ls8zq
  %ln8UX = load i64, i64* %ls8zt
  %ln8UY = trunc i64 %ln8UX to i8
  %ln8UZ = sext i8 %ln8UY to i64
  %ln8V0 = and i64 %ln8UW, %ln8UZ
  store i64 %ln8V0, i64* %ls8zy
  %ln8V1 = load i64, i64* %ls8zy
  switch i64 %ln8V1, label %c8Jz [i64 0, label %u8Ni]
c8Jz:
  %ln8V2 = load i64, i64* %ls8zl
  switch i64 %ln8V2, label %c8JF [i64 99999999, label %u8NG]
c8JF:
  %ln8V4 = load i64, i64* %ls8zl
  %ln8V5 = add i64 %ln8V4, 1
  %ln8V3 = load i64*, i64** %Sp_Var
  %ln8V6 = getelementptr inbounds i64, i64* %ln8V3, i32 0
  store i64 %ln8V5, i64* %ln8V6, !tbaa !2
  %ln8V7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8V8 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8V7( i64* %Base_Arg, i64* %ln8V8, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8NG:
  %ln8V9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Va = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8V9( i64* %Base_Arg, i64* %ln8Va, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ni:
  %ln8Vc = load i64, i64* %ls8zy
  %ln8Vb = load i64*, i64** %Sp_Var
  %ln8Vd = getelementptr inbounds i64, i64* %ln8Vb, i32 -1
  store i64 %ln8Vc, i64* %ln8Vd, !tbaa !2
  %ln8Ve = load i64*, i64** %Sp_Var
  %ln8Vf = getelementptr inbounds i64, i64* %ln8Ve, i32 -1
  %ln8Vg = ptrtoint i64* %ln8Vf to i64
  %ln8Vh = inttoptr i64 %ln8Vg to i64*
  store i64* %ln8Vh, i64** %Sp_Var
  %ln8Vi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8Fl$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Vj = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Vi( i64* %Base_Arg, i64* %ln8Vj, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MS:
  store i64 0, i64* %ls8zt
  br label %s8zs
}


==================== LLVM Code ====================
2018-10-10 14:02:22.935111585 UTC

@_c8Fl = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8Fl$def to i8*)
define internal ghccc void @_c8Fl$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8Fl:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8yf = alloca i64, i32 1
  %ls8zD = alloca i64, i32 1
  %ls8y9 = alloca i64, i32 1
  %ls8zl = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8zJ = alloca i64, i32 1
  %ls8zK = alloca i64, i32 1
  %ls8zO = alloca i64, i32 1
  %ls8zR = alloca i64, i32 1
  %ls8zT = alloca i64, i32 1
  %ls8zS = alloca i64, i32 1
  %lc8Gb = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8AN = alloca i64, i32 1
  %ls8AQ = alloca i64, i32 1
  %ls8AR = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8B8 = alloca i64, i32 1
  %ls8Bb = alloca i64, i32 1
  %ls8Bd = alloca i64, i32 1
  %ls8Bc = alloca i64, i32 1
  %lc8HF = alloca i64, i32 1
  %ls8C7 = alloca i64, i32 1
  %ls8Ca = alloca i64, i32 1
  %ls8Cb = alloca i64, i32 1
  %ls8zy = alloca i64, i32 1
  %ln8Vk = load i64*, i64** %Hp_Var
  %ln8Vl = getelementptr inbounds i64, i64* %ln8Vk, i32 7
  %ln8Vm = ptrtoint i64* %ln8Vl to i64
  %ln8Vn = inttoptr i64 %ln8Vm to i64*
  store i64* %ln8Vn, i64** %Hp_Var
  %ln8Vo = load i64*, i64** %Hp_Var
  %ln8Vp = ptrtoint i64* %ln8Vo to i64
  %ln8Vq = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Vr = bitcast i64* %ln8Vq to i64*
  %ln8Vs = load i64, i64* %ln8Vr, !tbaa !5
  %ln8Vt = icmp ugt i64 %ln8Vp, %ln8Vs
  %ln8Vu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Vt, i1 0 )
  br i1 %ln8Vu, label %c8JK, label %c8JJ
c8JJ:
  %ln8Vv = load i64*, i64** %Sp_Var
  %ln8Vw = getelementptr inbounds i64, i64* %ln8Vv, i32 2
  %ln8Vx = bitcast i64* %ln8Vw to i64*
  %ln8Vy = load i64, i64* %ln8Vx, !tbaa !2
  store i64 %ln8Vy, i64* %ls8yf
  %ln8Vz = load i64, i64* %ls8yf
  %ln8VA = add i64 %ln8Vz, 8
  %ln8VB = inttoptr i64 %ln8VA to i64*
  %ln8VC = load i64, i64* %ln8VB, !tbaa !1
  store i64 %ln8VC, i64* %ls8zD
  %ln8VE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zH_info$def to i64
  %ln8VD = load i64*, i64** %Hp_Var
  %ln8VF = getelementptr inbounds i64, i64* %ln8VD, i32 -6
  store i64 %ln8VE, i64* %ln8VF, !tbaa !3
  %ln8VH = load i64, i64* %ls8zD
  %ln8VG = load i64*, i64** %Hp_Var
  %ln8VI = getelementptr inbounds i64, i64* %ln8VG, i32 -4
  store i64 %ln8VH, i64* %ln8VI, !tbaa !3
  %ln8VJ = load i64*, i64** %Sp_Var
  %ln8VK = getelementptr inbounds i64, i64* %ln8VJ, i32 3
  %ln8VL = bitcast i64* %ln8VK to i64*
  %ln8VM = load i64, i64* %ln8VL, !tbaa !2
  store i64 %ln8VM, i64* %ls8y9
  %ln8VN = load i64*, i64** %Sp_Var
  %ln8VO = getelementptr inbounds i64, i64* %ln8VN, i32 1
  %ln8VP = bitcast i64* %ln8VO to i64*
  %ln8VQ = load i64, i64* %ln8VP, !tbaa !2
  store i64 %ln8VQ, i64* %ls8zl
  %ln8VR = load i64, i64* %ls8yf
  %ln8VS = add i64 %ln8VR, 8
  %ln8VT = load i64*, i64** %Hp_Var
  %ln8VU = getelementptr inbounds i64, i64* %ln8VT, i32 -6
  %ln8VV = ptrtoint i64* %ln8VU to i64
  %ln8VW = inttoptr i64 %ln8VS to i64*
  store i64 %ln8VV, i64* %ln8VW, !tbaa !1
  %ln8VX = ptrtoint i64* %Base_Arg to i64
  %ln8VY = inttoptr i64 %ln8VX to i8*
  %ln8VZ = load i64, i64* %ls8yf
  %ln8W0 = inttoptr i64 %ln8VZ to i8*
  %ln8W1 = bitcast i8* @dirty_MUT_VAR to void (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i8*) %ln8W1( i8* %ln8VY, i8* %ln8W0 ) nounwind
  %ln8W2 = load i64, i64* %ls8zl
  %ln8W3 = load i64, i64* %ls8zl
  %ln8W4 = mul i64 %ln8W2, %ln8W3
  store i64 %ln8W4, i64* %ls8zJ
  %ln8W5 = load i64, i64* %ls8zl
  %ln8W6 = load i64, i64* %ls8zl
  %ln8W7 = mul i64 %ln8W5, %ln8W6
  %ln8W8 = load i64, i64* %ls8zl
  %ln8W9 = add i64 %ln8W7, %ln8W8
  store i64 %ln8W9, i64* %ls8zK
  %ln8Wa = load i64, i64* %ls8zK
  %ln8Wb = load i64, i64* %ls8zJ
  %ln8Wc = icmp sge i64 %ln8Wa, %ln8Wb
  %ln8Wd = zext i1 %ln8Wc to i64
  switch i64 %ln8Wd, label %c8Lh [i64 1, label %c8MN]
c8Lh:
  %ln8We = load i64, i64* %ls8zK
  %ln8Wf = icmp sgt i64 99999999, %ln8We
  %ln8Wg = zext i1 %ln8Wf to i64
  switch i64 %ln8Wg, label %c8Kp [i64 1, label %c8Lf]
c8Kp:
  %ln8Wh = load i64, i64* %ls8zJ
  %ln8Wi = ashr i64 %ln8Wh, 3
  store i64 %ln8Wi, i64* %ls8zO
  %ln8Wj = load i64, i64* %ls8y9
  %ln8Wk = add i64 %ln8Wj, 16
  %ln8Wl = load i64, i64* %ls8zO
  %ln8Wm = add i64 %ln8Wk, %ln8Wl
  %ln8Wn = inttoptr i64 %ln8Wm to i8*
  %ln8Wo = load i8, i8* %ln8Wn, !tbaa !1
  %ln8Wp = sext i8 %ln8Wo to i64
  store i64 %ln8Wp, i64* %ls8zR
  %ln8Wr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zV_info$def to i64
  %ln8Wq = load i64*, i64** %Hp_Var
  %ln8Ws = getelementptr inbounds i64, i64* %ln8Wq, i32 -3
  store i64 %ln8Wr, i64* %ln8Ws, !tbaa !3
  %ln8Wu = load i64, i64* %ls8y9
  %ln8Wt = load i64*, i64** %Hp_Var
  %ln8Wv = getelementptr inbounds i64, i64* %ln8Wt, i32 -2
  store i64 %ln8Wu, i64* %ln8Wv, !tbaa !3
  %ln8Ww = load i64, i64* %ls8zK
  %ln8Wx = load i64, i64* %ls8zJ
  %ln8Wy = sub i64 %ln8Ww, %ln8Wx
  store i64 %ln8Wy, i64* %ls8zT
  %ln8WA = load i64, i64* %ls8zT
  %ln8Wz = load i64*, i64** %Hp_Var
  %ln8WB = getelementptr inbounds i64, i64* %ln8Wz, i32 -1
  store i64 %ln8WA, i64* %ln8WB, !tbaa !3
  %ln8WD = load i64, i64* %ls8zT
  %ln8WE = sub i64 99999999, %ln8WD
  %ln8WC = load i64*, i64** %Hp_Var
  %ln8WF = getelementptr inbounds i64, i64* %ln8WC, i32 0
  store i64 %ln8WE, i64* %ln8WF, !tbaa !3
  %ln8WG = load i64, i64* %ls8zJ
  %ln8WH = and i64 %ln8WG, 7
  store i64 %ln8WH, i64* %ls8zS
  %ln8WJ = load i64*, i64** %Hp_Var
  %ln8WK = ptrtoint i64* %ln8WJ to i64
  %ln8WL = add i64 %ln8WK, -22
  store i64 %ln8WL, i64* %lc8Gb
  %ln8WM = load i64, i64* %ls8zS
  %ln8WN = icmp sge i64 %ln8WM, 64
  %ln8WO = zext i1 %ln8WN to i64
  switch i64 %ln8WO, label %c8K8 [i64 1, label %c8Kh]
c8K8:
  %ln8WP = load i64, i64* %ls8y9
  %ln8WQ = add i64 %ln8WP, 16
  %ln8WR = load i64, i64* %ls8zO
  %ln8WS = add i64 %ln8WQ, %ln8WR
  %ln8WT = load i64, i64* %ls8zR
  %ln8WU = load i64, i64* %ls8zS
  %ln8WV = shl i64 1, %ln8WU
  %ln8WW = trunc i64 %ln8WV to i8
  %ln8WX = sext i8 %ln8WW to i64
  %ln8WY = or i64 %ln8WT, %ln8WX
  %ln8WZ = trunc i64 %ln8WY to i8
  %ln8X0 = inttoptr i64 %ln8WS to i8*
  store i8 %ln8WZ, i8* %ln8X0, !tbaa !1
  %ln8X2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8K6_info$def to i64
  %ln8X1 = load i64*, i64** %Sp_Var
  %ln8X3 = getelementptr inbounds i64, i64* %ln8X1, i32 0
  store i64 %ln8X2, i64* %ln8X3, !tbaa !2
  %ln8X4 = load i64, i64* %ls8zK
  store i64 %ln8X4, i64* %R2_Var
  %ln8X5 = load i64, i64* %lc8Gb
  store i64 %ln8X5, i64* %R1_Var
  %ln8X6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8X7 = load i64*, i64** %Sp_Var
  %ln8X8 = load i64*, i64** %Hp_Var
  %ln8X9 = load i64, i64* %R1_Var
  %ln8Xa = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8X6( i64* %Base_Arg, i64* %ln8X7, i64* %ln8X8, i64 %ln8X9, i64 %ln8Xa, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Kh:
  %ln8Xb = load i64, i64* %ls8y9
  %ln8Xc = add i64 %ln8Xb, 16
  %ln8Xd = load i64, i64* %ls8zO
  %ln8Xe = add i64 %ln8Xc, %ln8Xd
  %ln8Xf = load i64, i64* %ls8zR
  %ln8Xg = trunc i64 %ln8Xf to i8
  %ln8Xh = inttoptr i64 %ln8Xe to i8*
  store i8 %ln8Xg, i8* %ln8Xh, !tbaa !1
  %ln8Xj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Kg_info$def to i64
  %ln8Xi = load i64*, i64** %Sp_Var
  %ln8Xk = getelementptr inbounds i64, i64* %ln8Xi, i32 0
  store i64 %ln8Xj, i64* %ln8Xk, !tbaa !2
  %ln8Xl = load i64, i64* %ls8zK
  store i64 %ln8Xl, i64* %R2_Var
  %ln8Xm = load i64, i64* %lc8Gb
  store i64 %ln8Xm, i64* %R1_Var
  %ln8Xn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Xo = load i64*, i64** %Sp_Var
  %ln8Xp = load i64*, i64** %Hp_Var
  %ln8Xq = load i64, i64* %R1_Var
  %ln8Xr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Xn( i64* %Base_Arg, i64* %ln8Xo, i64* %ln8Xp, i64 %ln8Xq, i64 %ln8Xr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Lf:
  %ln8Xs = load i64, i64* %ls8zJ
  %ln8Xt = icmp sgt i64 99999999, %ln8Xs
  %ln8Xu = zext i1 %ln8Xt to i64
  switch i64 %ln8Xu, label %c8L8 [i64 1, label %c8Le]
c8L8:
  %ln8Xv = load i64, i64* %ls8zJ
  %ln8Xw = ashr i64 %ln8Xv, 3
  store i64 %ln8Xw, i64* %ls8AN
  %ln8Xx = load i64, i64* %ls8y9
  %ln8Xy = add i64 %ln8Xx, 16
  %ln8Xz = load i64, i64* %ls8AN
  %ln8XA = add i64 %ln8Xy, %ln8Xz
  %ln8XB = inttoptr i64 %ln8XA to i8*
  %ln8XC = load i8, i8* %ln8XB, !tbaa !1
  %ln8XD = sext i8 %ln8XC to i64
  store i64 %ln8XD, i64* %ls8AQ
  %ln8XE = load i64, i64* %ls8zJ
  %ln8XF = and i64 %ln8XE, 7
  store i64 %ln8XF, i64* %ls8AR
  %ln8XG = load i64, i64* %ls8AR
  %ln8XH = icmp sge i64 %ln8XG, 64
  %ln8XI = zext i1 %ln8XH to i64
  switch i64 %ln8XI, label %c8L0 [i64 1, label %c8L6]
c8L0:
  %ln8XJ = load i64, i64* %ls8y9
  %ln8XK = add i64 %ln8XJ, 16
  %ln8XL = load i64, i64* %ls8AN
  %ln8XM = add i64 %ln8XK, %ln8XL
  %ln8XN = load i64, i64* %ls8AQ
  %ln8XO = load i64, i64* %ls8AR
  %ln8XP = shl i64 1, %ln8XO
  %ln8XQ = trunc i64 %ln8XP to i8
  %ln8XR = sext i8 %ln8XQ to i64
  %ln8XS = or i64 %ln8XN, %ln8XR
  %ln8XT = trunc i64 %ln8XS to i8
  %ln8XU = inttoptr i64 %ln8XM to i8*
  store i8 %ln8XT, i8* %ln8XU, !tbaa !1
  %ln8XV = load i64, i64* %ls8zl
  switch i64 %ln8XV, label %c8KX [i64 99999999, label %c8KY]
c8KX:
  %ln8XW = load i64*, i64** %Hp_Var
  %ln8XX = getelementptr inbounds i64, i64* %ln8XW, i32 -4
  %ln8XY = ptrtoint i64* %ln8XX to i64
  %ln8XZ = inttoptr i64 %ln8XY to i64*
  store i64* %ln8XZ, i64** %Hp_Var
  %ln8Y1 = load i64, i64* %ls8zl
  %ln8Y2 = add i64 %ln8Y1, 1
  %ln8Y0 = load i64*, i64** %Sp_Var
  %ln8Y3 = getelementptr inbounds i64, i64* %ln8Y0, i32 1
  store i64 %ln8Y2, i64* %ln8Y3, !tbaa !2
  %ln8Y4 = load i64*, i64** %Sp_Var
  %ln8Y5 = getelementptr inbounds i64, i64* %ln8Y4, i32 1
  %ln8Y6 = ptrtoint i64* %ln8Y5 to i64
  %ln8Y7 = inttoptr i64 %ln8Y6 to i64*
  store i64* %ln8Y7, i64** %Sp_Var
  br label %u8NV
u8NV:
  %ln8Y8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Y9 = load i64*, i64** %Sp_Var
  %ln8Ya = load i64*, i64** %Hp_Var
  %ln8Yb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Y8( i64* %Base_Arg, i64* %ln8Y9, i64* %ln8Ya, i64 %ln8Yb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8KY:
  %ln8Yc = load i64*, i64** %Hp_Var
  %ln8Yd = getelementptr inbounds i64, i64* %ln8Yc, i32 -4
  %ln8Ye = ptrtoint i64* %ln8Yd to i64
  %ln8Yf = inttoptr i64 %ln8Ye to i64*
  store i64* %ln8Yf, i64** %Hp_Var
  %ln8Yg = load i64*, i64** %Sp_Var
  %ln8Yh = getelementptr inbounds i64, i64* %ln8Yg, i32 1
  %ln8Yi = ptrtoint i64* %ln8Yh to i64
  %ln8Yj = inttoptr i64 %ln8Yi to i64*
  store i64* %ln8Yj, i64** %Sp_Var
  %ln8Yk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Yl = load i64*, i64** %Sp_Var
  %ln8Ym = load i64*, i64** %Hp_Var
  %ln8Yn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Yk( i64* %Base_Arg, i64* %ln8Yl, i64* %ln8Ym, i64 %ln8Yn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8L6:
  %ln8Yo = load i64, i64* %ls8y9
  %ln8Yp = add i64 %ln8Yo, 16
  %ln8Yq = load i64, i64* %ls8AN
  %ln8Yr = add i64 %ln8Yp, %ln8Yq
  %ln8Ys = load i64, i64* %ls8AQ
  %ln8Yt = trunc i64 %ln8Ys to i8
  %ln8Yu = inttoptr i64 %ln8Yr to i8*
  store i8 %ln8Yt, i8* %ln8Yu, !tbaa !1
  %ln8Yv = load i64, i64* %ls8zl
  switch i64 %ln8Yv, label %c8L4 [i64 99999999, label %c8L5]
c8L4:
  %ln8Yw = load i64*, i64** %Hp_Var
  %ln8Yx = getelementptr inbounds i64, i64* %ln8Yw, i32 -4
  %ln8Yy = ptrtoint i64* %ln8Yx to i64
  %ln8Yz = inttoptr i64 %ln8Yy to i64*
  store i64* %ln8Yz, i64** %Hp_Var
  %ln8YB = load i64, i64* %ls8zl
  %ln8YC = add i64 %ln8YB, 1
  %ln8YA = load i64*, i64** %Sp_Var
  %ln8YD = getelementptr inbounds i64, i64* %ln8YA, i32 1
  store i64 %ln8YC, i64* %ln8YD, !tbaa !2
  %ln8YE = load i64*, i64** %Sp_Var
  %ln8YF = getelementptr inbounds i64, i64* %ln8YE, i32 1
  %ln8YG = ptrtoint i64* %ln8YF to i64
  %ln8YH = inttoptr i64 %ln8YG to i64*
  store i64* %ln8YH, i64** %Sp_Var
  br label %u8NV
c8L5:
  %ln8YI = load i64*, i64** %Hp_Var
  %ln8YJ = getelementptr inbounds i64, i64* %ln8YI, i32 -4
  %ln8YK = ptrtoint i64* %ln8YJ to i64
  %ln8YL = inttoptr i64 %ln8YK to i64*
  store i64* %ln8YL, i64** %Hp_Var
  %ln8YM = load i64*, i64** %Sp_Var
  %ln8YN = getelementptr inbounds i64, i64* %ln8YM, i32 1
  %ln8YO = ptrtoint i64* %ln8YN to i64
  %ln8YP = inttoptr i64 %ln8YO to i64*
  store i64* %ln8YP, i64** %Sp_Var
  %ln8YQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8YR = load i64*, i64** %Sp_Var
  %ln8YS = load i64*, i64** %Hp_Var
  %ln8YT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8YQ( i64* %Base_Arg, i64* %ln8YR, i64* %ln8YS, i64 %ln8YT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Le:
  %ln8YU = load i64, i64* %ls8zl
  switch i64 %ln8YU, label %c8Lc [i64 99999999, label %c8Ld]
c8Lc:
  %ln8YV = load i64*, i64** %Hp_Var
  %ln8YW = getelementptr inbounds i64, i64* %ln8YV, i32 -4
  %ln8YX = ptrtoint i64* %ln8YW to i64
  %ln8YY = inttoptr i64 %ln8YX to i64*
  store i64* %ln8YY, i64** %Hp_Var
  %ln8Z0 = load i64, i64* %ls8zl
  %ln8Z1 = add i64 %ln8Z0, 1
  %ln8YZ = load i64*, i64** %Sp_Var
  %ln8Z2 = getelementptr inbounds i64, i64* %ln8YZ, i32 1
  store i64 %ln8Z1, i64* %ln8Z2, !tbaa !2
  %ln8Z3 = load i64*, i64** %Sp_Var
  %ln8Z4 = getelementptr inbounds i64, i64* %ln8Z3, i32 1
  %ln8Z5 = ptrtoint i64* %ln8Z4 to i64
  %ln8Z6 = inttoptr i64 %ln8Z5 to i64*
  store i64* %ln8Z6, i64** %Sp_Var
  br label %u8NV
c8Ld:
  %ln8Z7 = load i64*, i64** %Hp_Var
  %ln8Z8 = getelementptr inbounds i64, i64* %ln8Z7, i32 -4
  %ln8Z9 = ptrtoint i64* %ln8Z8 to i64
  %ln8Za = inttoptr i64 %ln8Z9 to i64*
  store i64* %ln8Za, i64** %Hp_Var
  %ln8Zb = load i64*, i64** %Sp_Var
  %ln8Zc = getelementptr inbounds i64, i64* %ln8Zb, i32 1
  %ln8Zd = ptrtoint i64* %ln8Zc to i64
  %ln8Ze = inttoptr i64 %ln8Zd to i64*
  store i64* %ln8Ze, i64** %Sp_Var
  %ln8Zf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zg = load i64*, i64** %Sp_Var
  %ln8Zh = load i64*, i64** %Hp_Var
  %ln8Zi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Zf( i64* %Base_Arg, i64* %ln8Zg, i64* %ln8Zh, i64 %ln8Zi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MN:
  %ln8Zj = load i64, i64* %ls8zK
  %ln8Zk = icmp slt i64 99999999, %ln8Zj
  %ln8Zl = zext i1 %ln8Zk to i64
  switch i64 %ln8Zl, label %c8LW [i64 1, label %c8MM]
c8LW:
  %ln8Zm = load i64, i64* %ls8zJ
  %ln8Zn = ashr i64 %ln8Zm, 3
  store i64 %ln8Zn, i64* %ls8B8
  %ln8Zo = load i64, i64* %ls8y9
  %ln8Zp = add i64 %ln8Zo, 16
  %ln8Zq = load i64, i64* %ls8B8
  %ln8Zr = add i64 %ln8Zp, %ln8Zq
  %ln8Zs = inttoptr i64 %ln8Zr to i8*
  %ln8Zt = load i8, i8* %ln8Zs, !tbaa !1
  %ln8Zu = sext i8 %ln8Zt to i64
  store i64 %ln8Zu, i64* %ls8Bb
  %ln8Zw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8Bf_info$def to i64
  %ln8Zv = load i64*, i64** %Hp_Var
  %ln8Zx = getelementptr inbounds i64, i64* %ln8Zv, i32 -3
  store i64 %ln8Zw, i64* %ln8Zx, !tbaa !3
  %ln8Zz = load i64, i64* %ls8y9
  %ln8Zy = load i64*, i64** %Hp_Var
  %ln8ZA = getelementptr inbounds i64, i64* %ln8Zy, i32 -2
  store i64 %ln8Zz, i64* %ln8ZA, !tbaa !3
  %ln8ZB = load i64, i64* %ls8zK
  %ln8ZC = load i64, i64* %ls8zJ
  %ln8ZD = sub i64 %ln8ZB, %ln8ZC
  store i64 %ln8ZD, i64* %ls8Bd
  %ln8ZF = load i64, i64* %ls8Bd
  %ln8ZE = load i64*, i64** %Hp_Var
  %ln8ZG = getelementptr inbounds i64, i64* %ln8ZE, i32 -1
  store i64 %ln8ZF, i64* %ln8ZG, !tbaa !3
  %ln8ZI = load i64, i64* %ls8Bd
  %ln8ZJ = sub i64 99999999, %ln8ZI
  %ln8ZH = load i64*, i64** %Hp_Var
  %ln8ZK = getelementptr inbounds i64, i64* %ln8ZH, i32 0
  store i64 %ln8ZJ, i64* %ln8ZK, !tbaa !3
  %ln8ZL = load i64, i64* %ls8zJ
  %ln8ZM = and i64 %ln8ZL, 7
  store i64 %ln8ZM, i64* %ls8Bc
  %ln8ZO = load i64*, i64** %Hp_Var
  %ln8ZP = ptrtoint i64* %ln8ZO to i64
  %ln8ZQ = add i64 %ln8ZP, -22
  store i64 %ln8ZQ, i64* %lc8HF
  %ln8ZR = load i64, i64* %ls8Bc
  %ln8ZS = icmp sge i64 %ln8ZR, 64
  %ln8ZT = zext i1 %ln8ZS to i64
  switch i64 %ln8ZT, label %c8LF [i64 1, label %c8LO]
c8LF:
  %ln8ZU = load i64, i64* %ls8y9
  %ln8ZV = add i64 %ln8ZU, 16
  %ln8ZW = load i64, i64* %ls8B8
  %ln8ZX = add i64 %ln8ZV, %ln8ZW
  %ln8ZY = load i64, i64* %ls8Bb
  %ln8ZZ = load i64, i64* %ls8Bc
  %ln900 = shl i64 1, %ln8ZZ
  %ln901 = trunc i64 %ln900 to i8
  %ln902 = sext i8 %ln901 to i64
  %ln903 = or i64 %ln8ZY, %ln902
  %ln904 = trunc i64 %ln903 to i8
  %ln905 = inttoptr i64 %ln8ZX to i8*
  store i8 %ln904, i8* %ln905, !tbaa !1
  %ln907 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LD_info$def to i64
  %ln906 = load i64*, i64** %Sp_Var
  %ln908 = getelementptr inbounds i64, i64* %ln906, i32 0
  store i64 %ln907, i64* %ln908, !tbaa !2
  %ln909 = load i64, i64* %ls8zK
  store i64 %ln909, i64* %R2_Var
  %ln90a = load i64, i64* %lc8HF
  store i64 %ln90a, i64* %R1_Var
  %ln90b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8Bf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90c = load i64*, i64** %Sp_Var
  %ln90d = load i64*, i64** %Hp_Var
  %ln90e = load i64, i64* %R1_Var
  %ln90f = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90b( i64* %Base_Arg, i64* %ln90c, i64* %ln90d, i64 %ln90e, i64 %ln90f, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8LO:
  %ln90g = load i64, i64* %ls8y9
  %ln90h = add i64 %ln90g, 16
  %ln90i = load i64, i64* %ls8B8
  %ln90j = add i64 %ln90h, %ln90i
  %ln90k = load i64, i64* %ls8Bb
  %ln90l = trunc i64 %ln90k to i8
  %ln90m = inttoptr i64 %ln90j to i8*
  store i8 %ln90l, i8* %ln90m, !tbaa !1
  %ln90o = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LN_info$def to i64
  %ln90n = load i64*, i64** %Sp_Var
  %ln90p = getelementptr inbounds i64, i64* %ln90n, i32 0
  store i64 %ln90o, i64* %ln90p, !tbaa !2
  %ln90q = load i64, i64* %ls8zK
  store i64 %ln90q, i64* %R2_Var
  %ln90r = load i64, i64* %lc8HF
  store i64 %ln90r, i64* %R1_Var
  %ln90s = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8Bf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90t = load i64*, i64** %Sp_Var
  %ln90u = load i64*, i64** %Hp_Var
  %ln90v = load i64, i64* %R1_Var
  %ln90w = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90s( i64* %Base_Arg, i64* %ln90t, i64* %ln90u, i64 %ln90v, i64 %ln90w, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MM:
  %ln90x = load i64, i64* %ls8zJ
  %ln90y = icmp slt i64 99999999, %ln90x
  %ln90z = zext i1 %ln90y to i64
  switch i64 %ln90z, label %c8MF [i64 1, label %c8ML]
c8MF:
  %ln90A = load i64, i64* %ls8zJ
  %ln90B = ashr i64 %ln90A, 3
  store i64 %ln90B, i64* %ls8C7
  %ln90C = load i64, i64* %ls8y9
  %ln90D = add i64 %ln90C, 16
  %ln90E = load i64, i64* %ls8C7
  %ln90F = add i64 %ln90D, %ln90E
  %ln90G = inttoptr i64 %ln90F to i8*
  %ln90H = load i8, i8* %ln90G, !tbaa !1
  %ln90I = sext i8 %ln90H to i64
  store i64 %ln90I, i64* %ls8Ca
  %ln90J = load i64, i64* %ls8zJ
  %ln90K = and i64 %ln90J, 7
  store i64 %ln90K, i64* %ls8Cb
  %ln90L = load i64, i64* %ls8Cb
  %ln90M = icmp sge i64 %ln90L, 64
  %ln90N = zext i1 %ln90M to i64
  switch i64 %ln90N, label %c8Mx [i64 1, label %c8MD]
c8Mx:
  %ln90O = load i64, i64* %ls8y9
  %ln90P = add i64 %ln90O, 16
  %ln90Q = load i64, i64* %ls8C7
  %ln90R = add i64 %ln90P, %ln90Q
  %ln90S = load i64, i64* %ls8Ca
  %ln90T = load i64, i64* %ls8Cb
  %ln90U = shl i64 1, %ln90T
  %ln90V = trunc i64 %ln90U to i8
  %ln90W = sext i8 %ln90V to i64
  %ln90X = or i64 %ln90S, %ln90W
  %ln90Y = trunc i64 %ln90X to i8
  %ln90Z = inttoptr i64 %ln90R to i8*
  store i8 %ln90Y, i8* %ln90Z, !tbaa !1
  %ln910 = load i64, i64* %ls8zl
  switch i64 %ln910, label %c8Mu [i64 99999999, label %c8Mv]
c8Mu:
  %ln911 = load i64*, i64** %Hp_Var
  %ln912 = getelementptr inbounds i64, i64* %ln911, i32 -4
  %ln913 = ptrtoint i64* %ln912 to i64
  %ln914 = inttoptr i64 %ln913 to i64*
  store i64* %ln914, i64** %Hp_Var
  %ln916 = load i64, i64* %ls8zl
  %ln917 = add i64 %ln916, 1
  %ln915 = load i64*, i64** %Sp_Var
  %ln918 = getelementptr inbounds i64, i64* %ln915, i32 1
  store i64 %ln917, i64* %ln918, !tbaa !2
  %ln919 = load i64*, i64** %Sp_Var
  %ln91a = getelementptr inbounds i64, i64* %ln919, i32 1
  %ln91b = ptrtoint i64* %ln91a to i64
  %ln91c = inttoptr i64 %ln91b to i64*
  store i64* %ln91c, i64** %Sp_Var
  br label %u8NV
c8Mv:
  %ln91d = load i64*, i64** %Hp_Var
  %ln91e = getelementptr inbounds i64, i64* %ln91d, i32 -4
  %ln91f = ptrtoint i64* %ln91e to i64
  %ln91g = inttoptr i64 %ln91f to i64*
  store i64* %ln91g, i64** %Hp_Var
  %ln91h = load i64*, i64** %Sp_Var
  %ln91i = getelementptr inbounds i64, i64* %ln91h, i32 1
  %ln91j = ptrtoint i64* %ln91i to i64
  %ln91k = inttoptr i64 %ln91j to i64*
  store i64* %ln91k, i64** %Sp_Var
  %ln91l = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91m = load i64*, i64** %Sp_Var
  %ln91n = load i64*, i64** %Hp_Var
  %ln91o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91l( i64* %Base_Arg, i64* %ln91m, i64* %ln91n, i64 %ln91o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MD:
  %ln91p = load i64, i64* %ls8y9
  %ln91q = add i64 %ln91p, 16
  %ln91r = load i64, i64* %ls8C7
  %ln91s = add i64 %ln91q, %ln91r
  %ln91t = load i64, i64* %ls8Ca
  %ln91u = trunc i64 %ln91t to i8
  %ln91v = inttoptr i64 %ln91s to i8*
  store i8 %ln91u, i8* %ln91v, !tbaa !1
  %ln91w = load i64, i64* %ls8zl
  switch i64 %ln91w, label %c8MB [i64 99999999, label %c8MC]
c8MB:
  %ln91x = load i64*, i64** %Hp_Var
  %ln91y = getelementptr inbounds i64, i64* %ln91x, i32 -4
  %ln91z = ptrtoint i64* %ln91y to i64
  %ln91A = inttoptr i64 %ln91z to i64*
  store i64* %ln91A, i64** %Hp_Var
  %ln91C = load i64, i64* %ls8zl
  %ln91D = add i64 %ln91C, 1
  %ln91B = load i64*, i64** %Sp_Var
  %ln91E = getelementptr inbounds i64, i64* %ln91B, i32 1
  store i64 %ln91D, i64* %ln91E, !tbaa !2
  %ln91F = load i64*, i64** %Sp_Var
  %ln91G = getelementptr inbounds i64, i64* %ln91F, i32 1
  %ln91H = ptrtoint i64* %ln91G to i64
  %ln91I = inttoptr i64 %ln91H to i64*
  store i64* %ln91I, i64** %Sp_Var
  br label %u8NV
c8MC:
  %ln91J = load i64*, i64** %Hp_Var
  %ln91K = getelementptr inbounds i64, i64* %ln91J, i32 -4
  %ln91L = ptrtoint i64* %ln91K to i64
  %ln91M = inttoptr i64 %ln91L to i64*
  store i64* %ln91M, i64** %Hp_Var
  %ln91N = load i64*, i64** %Sp_Var
  %ln91O = getelementptr inbounds i64, i64* %ln91N, i32 1
  %ln91P = ptrtoint i64* %ln91O to i64
  %ln91Q = inttoptr i64 %ln91P to i64*
  store i64* %ln91Q, i64** %Sp_Var
  %ln91R = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Et_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91S = load i64*, i64** %Sp_Var
  %ln91T = load i64*, i64** %Hp_Var
  %ln91U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91R( i64* %Base_Arg, i64* %ln91S, i64* %ln91T, i64 %ln91U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ML:
  %ln91V = load i64, i64* %ls8zl
  switch i64 %ln91V, label %c8MJ [i64 99999999, label %c8MK]
c8MJ:
  %ln91W = load i64*, i64** %Hp_Var
  %ln91X = getelementptr inbounds i64, i64* %ln91W, i32 -4
  %ln91Y = ptrtoint i64* %ln91X to i64
  %ln91Z = inttoptr i64 %ln91Y to i64*
  store i64* %ln91Z, i64** %Hp_Var
  %ln921 = load i64, i64* %ls8zl
  %ln922 = add i64 %ln921, 1
  %ln920 = load i64*, i64** %Sp_Var
  %ln923 = getelementptr inbounds i64, i64* %ln920, i32 1
  store i64 %ln922, i64* %ln923, !tbaa !2
  %ln924 = load i64*, i64** %Sp_Var
  %ln925 = getelementptr inbounds i64, i64* %ln924, i32 1
  %ln926 = ptrtoint i64* %ln925 to i64
  %ln927 = inttoptr i64 %ln926 to i64*
  store i64* %ln927, i64** %Sp_Var
  br label %u8NV
c8MK:
  %ln928 = load i64*, i64** %Hp_Var
  %ln929 = getelementptr inbounds i64, i64* %ln928, i32 -4
  %ln92a = ptrtoint i64* %ln929 to i64
  %ln92b = inttoptr i64 %ln92a to i64*
  store i64* %ln92b, i64** %Hp_Var
  %ln92c = load i64*, i64** %Sp_Var
  %ln92d = getelementptr inbounds i64, i64* %ln92c, i32 1
  %ln92e = ptrtoint i64* %ln92d to i64
  %ln92f = inttoptr i64 %ln92e to i64*
  store i64* %ln92f, i64** %Sp_Var
  %ln92g = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92h = load i64*, i64** %Sp_Var
  %ln92i = load i64*, i64** %Hp_Var
  %ln92j = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92g( i64* %Base_Arg, i64* %ln92h, i64* %ln92i, i64 %ln92j, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8JK:
  %ln92k = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln92k, !tbaa !5
  %ln92l = load i64*, i64** %Sp_Var
  %ln92m = getelementptr inbounds i64, i64* %ln92l, i32 0
  %ln92n = bitcast i64* %ln92m to i64*
  %ln92o = load i64, i64* %ln92n, !tbaa !2
  store i64 %ln92o, i64* %ls8zy
  %ln92q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fk_info$def to i64
  %ln92p = load i64*, i64** %Sp_Var
  %ln92r = getelementptr inbounds i64, i64* %ln92p, i32 0
  store i64 %ln92q, i64* %ln92r, !tbaa !2
  %ln92s = load i64, i64* %ls8zy
  store i64 %ln92s, i64* %R1_Var
  %ln92t = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92u = load i64*, i64** %Sp_Var
  %ln92v = load i64*, i64** %Hp_Var
  %ln92w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92t( i64* %Base_Arg, i64* %ln92u, i64* %ln92v, i64 %ln92w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.943572364 UTC

@c8Fk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fk_info$def to i8*)
define internal ghccc void @c8Fk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Fk_info$def to i64)),i64 0), i64 67, i64 12884901918}>
{
c8Fk:
  %ln92x = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln92x, !tbaa !2
  %ln92y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8Fl$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.944705158 UTC

@c8EF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EF_info$def to i8*)
define internal ghccc void @c8EF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EF_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8EF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln92z = load i64*, i64** %Hp_Var
  %ln92A = getelementptr inbounds i64, i64* %ln92z, i32 3
  %ln92B = ptrtoint i64* %ln92A to i64
  %ln92C = inttoptr i64 %ln92B to i64*
  store i64* %ln92C, i64** %Hp_Var
  %ln92D = load i64*, i64** %Hp_Var
  %ln92E = ptrtoint i64* %ln92D to i64
  %ln92F = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln92G = bitcast i64* %ln92F to i64*
  %ln92H = load i64, i64* %ln92G, !tbaa !5
  %ln92I = icmp ugt i64 %ln92E, %ln92H
  %ln92J = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln92I, i1 0 )
  br i1 %ln92J, label %c8Ju, label %c8Jt
c8Jt:
  %ln92L = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zj_info$def to i64
  %ln92K = load i64*, i64** %Hp_Var
  %ln92M = getelementptr inbounds i64, i64* %ln92K, i32 -2
  store i64 %ln92L, i64* %ln92M, !tbaa !3
  %ln92O = load i64*, i64** %Sp_Var
  %ln92P = getelementptr inbounds i64, i64* %ln92O, i32 1
  %ln92Q = bitcast i64* %ln92P to i64*
  %ln92R = load i64, i64* %ln92Q, !tbaa !2
  %ln92S = add i64 %ln92R, 8
  %ln92T = inttoptr i64 %ln92S to i64*
  %ln92U = load i64, i64* %ln92T, !tbaa !1
  %ln92N = load i64*, i64** %Hp_Var
  %ln92V = getelementptr inbounds i64, i64* %ln92N, i32 0
  store i64 %ln92U, i64* %ln92V, !tbaa !3
  %ln92W = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln92X = add i64 %ln92W, 2
  store i64 %ln92X, i64* %R4_Var
  %ln92Y = load i64*, i64** %Hp_Var
  %ln92Z = getelementptr inbounds i64, i64* %ln92Y, i32 -2
  %ln930 = ptrtoint i64* %ln92Z to i64
  store i64 %ln930, i64* %R3_Var
  %ln931 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln931, i64* %R2_Var
  %ln932 = load i64*, i64** %Sp_Var
  %ln933 = getelementptr inbounds i64, i64* %ln932, i32 3
  %ln934 = ptrtoint i64* %ln933 to i64
  %ln935 = inttoptr i64 %ln934 to i64*
  store i64* %ln935, i64** %Sp_Var
  %ln936 = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln937 = load i64*, i64** %Sp_Var
  %ln938 = load i64*, i64** %Hp_Var
  %ln939 = load i64, i64* %R2_Var
  %ln93a = load i64, i64* %R3_Var
  %ln93b = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln936( i64* %Base_Arg, i64* %ln937, i64* %ln938, i64 %R1_Arg, i64 %ln939, i64 %ln93a, i64 %ln93b, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ju:
  %ln93c = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln93c, !tbaa !5
  %ln93e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EF_info$def to i64
  %ln93d = load i64*, i64** %Sp_Var
  %ln93f = getelementptr inbounds i64, i64* %ln93d, i32 0
  store i64 %ln93e, i64* %ln93f, !tbaa !2
  %ln93g = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93h = load i64*, i64** %Sp_Var
  %ln93i = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93g( i64* %Base_Arg, i64* %ln93h, i64* %ln93i, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.946448344 UTC

@c8Et_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Et_info$def to i8*)
define internal ghccc void @c8Et_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Et_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8Et:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln93j = load i64*, i64** %Hp_Var
  %ln93k = getelementptr inbounds i64, i64* %ln93j, i32 3
  %ln93l = ptrtoint i64* %ln93k to i64
  %ln93m = inttoptr i64 %ln93l to i64*
  store i64* %ln93m, i64** %Hp_Var
  %ln93n = load i64*, i64** %Hp_Var
  %ln93o = ptrtoint i64* %ln93n to i64
  %ln93p = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln93q = bitcast i64* %ln93p to i64*
  %ln93r = load i64, i64* %ln93q, !tbaa !5
  %ln93s = icmp ugt i64 %ln93o, %ln93r
  %ln93t = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln93s, i1 0 )
  br i1 %ln93t, label %c8Jr, label %c8Jq
c8Jq:
  %ln93v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8zd_info$def to i64
  %ln93u = load i64*, i64** %Hp_Var
  %ln93w = getelementptr inbounds i64, i64* %ln93u, i32 -2
  store i64 %ln93v, i64* %ln93w, !tbaa !3
  %ln93y = load i64*, i64** %Sp_Var
  %ln93z = getelementptr inbounds i64, i64* %ln93y, i32 1
  %ln93A = bitcast i64* %ln93z to i64*
  %ln93B = load i64, i64* %ln93A, !tbaa !2
  %ln93C = add i64 %ln93B, 8
  %ln93D = inttoptr i64 %ln93C to i64*
  %ln93E = load i64, i64* %ln93D, !tbaa !1
  %ln93x = load i64*, i64** %Hp_Var
  %ln93F = getelementptr inbounds i64, i64* %ln93x, i32 0
  store i64 %ln93E, i64* %ln93F, !tbaa !3
  %ln93G = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln93H = add i64 %ln93G, 2
  store i64 %ln93H, i64* %R4_Var
  %ln93I = load i64*, i64** %Hp_Var
  %ln93J = getelementptr inbounds i64, i64* %ln93I, i32 -2
  %ln93K = ptrtoint i64* %ln93J to i64
  store i64 %ln93K, i64* %R3_Var
  %ln93L = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln93L, i64* %R2_Var
  %ln93M = load i64*, i64** %Sp_Var
  %ln93N = getelementptr inbounds i64, i64* %ln93M, i32 3
  %ln93O = ptrtoint i64* %ln93N to i64
  %ln93P = inttoptr i64 %ln93O to i64*
  store i64* %ln93P, i64** %Sp_Var
  %ln93Q = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93R = load i64*, i64** %Sp_Var
  %ln93S = load i64*, i64** %Hp_Var
  %ln93T = load i64, i64* %R2_Var
  %ln93U = load i64, i64* %R3_Var
  %ln93V = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93Q( i64* %Base_Arg, i64* %ln93R, i64* %ln93S, i64 %R1_Arg, i64 %ln93T, i64 %ln93U, i64 %ln93V, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jr:
  %ln93W = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln93W, !tbaa !5
  %ln93Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Et_info$def to i64
  %ln93X = load i64*, i64** %Sp_Var
  %ln93Z = getelementptr inbounds i64, i64* %ln93X, i32 0
  store i64 %ln93Y, i64* %ln93Z, !tbaa !2
  %ln940 = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln941 = load i64*, i64** %Sp_Var
  %ln942 = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln940( i64* %Base_Arg, i64* %ln941, i64* %ln942, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.94814465 UTC

@c8Eh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eh_info$def to i8*)
define internal ghccc void @c8Eh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eh_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8Eh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln943 = load i64*, i64** %Hp_Var
  %ln944 = getelementptr inbounds i64, i64* %ln943, i32 3
  %ln945 = ptrtoint i64* %ln944 to i64
  %ln946 = inttoptr i64 %ln945 to i64*
  store i64* %ln946, i64** %Hp_Var
  %ln947 = load i64*, i64** %Hp_Var
  %ln948 = ptrtoint i64* %ln947 to i64
  %ln949 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln94a = bitcast i64* %ln949 to i64*
  %ln94b = load i64, i64* %ln94a, !tbaa !5
  %ln94c = icmp ugt i64 %ln948, %ln94b
  %ln94d = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln94c, i1 0 )
  br i1 %ln94d, label %c8Jo, label %c8Jn
c8Jn:
  %ln94f = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8z7_info$def to i64
  %ln94e = load i64*, i64** %Hp_Var
  %ln94g = getelementptr inbounds i64, i64* %ln94e, i32 -2
  store i64 %ln94f, i64* %ln94g, !tbaa !3
  %ln94i = load i64*, i64** %Sp_Var
  %ln94j = getelementptr inbounds i64, i64* %ln94i, i32 1
  %ln94k = bitcast i64* %ln94j to i64*
  %ln94l = load i64, i64* %ln94k, !tbaa !2
  %ln94m = add i64 %ln94l, 8
  %ln94n = inttoptr i64 %ln94m to i64*
  %ln94o = load i64, i64* %ln94n, !tbaa !1
  %ln94h = load i64*, i64** %Hp_Var
  %ln94p = getelementptr inbounds i64, i64* %ln94h, i32 0
  store i64 %ln94o, i64* %ln94p, !tbaa !3
  %ln94q = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln94r = add i64 %ln94q, 2
  store i64 %ln94r, i64* %R4_Var
  %ln94s = load i64*, i64** %Hp_Var
  %ln94t = getelementptr inbounds i64, i64* %ln94s, i32 -2
  %ln94u = ptrtoint i64* %ln94t to i64
  store i64 %ln94u, i64* %R3_Var
  %ln94v = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln94v, i64* %R2_Var
  %ln94w = load i64*, i64** %Sp_Var
  %ln94x = getelementptr inbounds i64, i64* %ln94w, i32 3
  %ln94y = ptrtoint i64* %ln94x to i64
  %ln94z = inttoptr i64 %ln94y to i64*
  store i64* %ln94z, i64** %Sp_Var
  %ln94A = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94B = load i64*, i64** %Sp_Var
  %ln94C = load i64*, i64** %Hp_Var
  %ln94D = load i64, i64* %R2_Var
  %ln94E = load i64, i64* %R3_Var
  %ln94F = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94A( i64* %Base_Arg, i64* %ln94B, i64* %ln94C, i64 %R1_Arg, i64 %ln94D, i64 %ln94E, i64 %ln94F, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jo:
  %ln94G = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln94G, !tbaa !5
  %ln94I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eh_info$def to i64
  %ln94H = load i64*, i64** %Sp_Var
  %ln94J = getelementptr inbounds i64, i64* %ln94H, i32 0
  store i64 %ln94I, i64* %ln94J, !tbaa !2
  %ln94K = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94L = load i64*, i64** %Sp_Var
  %ln94M = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94K( i64* %Base_Arg, i64* %ln94L, i64* %ln94M, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.949681833 UTC

@c8LN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LN_info$def to i8*)
define internal ghccc void @c8LN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LN_info$def to i64)),i64 0), i64 67, i64 12884901918}>
{
c8LN:
  %ls8C4 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln94N = load i64*, i64** %Sp_Var
  %ln94O = getelementptr inbounds i64, i64* %ln94N, i32 1
  %ln94P = bitcast i64* %ln94O to i64*
  %ln94Q = load i64, i64* %ln94P, !tbaa !2
  store i64 %ln94Q, i64* %ls8C4
  %ln94R = load i64, i64* %ls8C4
  switch i64 %ln94R, label %c8LT [i64 99999999, label %u8Nq]
c8LT:
  %ln94T = load i64, i64* %ls8C4
  %ln94U = add i64 %ln94T, 1
  %ln94S = load i64*, i64** %Sp_Var
  %ln94V = getelementptr inbounds i64, i64* %ln94S, i32 1
  store i64 %ln94U, i64* %ln94V, !tbaa !2
  %ln94W = load i64*, i64** %Sp_Var
  %ln94X = getelementptr inbounds i64, i64* %ln94W, i32 1
  %ln94Y = ptrtoint i64* %ln94X to i64
  %ln94Z = inttoptr i64 %ln94Y to i64*
  store i64* %ln94Z, i64** %Sp_Var
  %ln950 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln951 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln950( i64* %Base_Arg, i64* %ln951, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Nq:
  %ln952 = load i64*, i64** %Sp_Var
  %ln953 = getelementptr inbounds i64, i64* %ln952, i32 1
  %ln954 = ptrtoint i64* %ln953 to i64
  %ln955 = inttoptr i64 %ln954 to i64*
  store i64* %ln955, i64** %Sp_Var
  %ln956 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8E5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln957 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln956( i64* %Base_Arg, i64* %ln957, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.951096754 UTC

@c8E5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8E5_info$def to i8*)
define internal ghccc void @c8E5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8E5_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8E5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln958 = load i64*, i64** %Hp_Var
  %ln959 = getelementptr inbounds i64, i64* %ln958, i32 3
  %ln95a = ptrtoint i64* %ln959 to i64
  %ln95b = inttoptr i64 %ln95a to i64*
  store i64* %ln95b, i64** %Hp_Var
  %ln95c = load i64*, i64** %Hp_Var
  %ln95d = ptrtoint i64* %ln95c to i64
  %ln95e = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln95f = bitcast i64* %ln95e to i64*
  %ln95g = load i64, i64* %ln95f, !tbaa !5
  %ln95h = icmp ugt i64 %ln95d, %ln95g
  %ln95i = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln95h, i1 0 )
  br i1 %ln95i, label %c8Jl, label %c8Jk
c8Jk:
  %ln95k = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8z1_info$def to i64
  %ln95j = load i64*, i64** %Hp_Var
  %ln95l = getelementptr inbounds i64, i64* %ln95j, i32 -2
  store i64 %ln95k, i64* %ln95l, !tbaa !3
  %ln95n = load i64*, i64** %Sp_Var
  %ln95o = getelementptr inbounds i64, i64* %ln95n, i32 1
  %ln95p = bitcast i64* %ln95o to i64*
  %ln95q = load i64, i64* %ln95p, !tbaa !2
  %ln95r = add i64 %ln95q, 8
  %ln95s = inttoptr i64 %ln95r to i64*
  %ln95t = load i64, i64* %ln95s, !tbaa !1
  %ln95m = load i64*, i64** %Hp_Var
  %ln95u = getelementptr inbounds i64, i64* %ln95m, i32 0
  store i64 %ln95t, i64* %ln95u, !tbaa !3
  %ln95v = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln95w = add i64 %ln95v, 2
  store i64 %ln95w, i64* %R4_Var
  %ln95x = load i64*, i64** %Hp_Var
  %ln95y = getelementptr inbounds i64, i64* %ln95x, i32 -2
  %ln95z = ptrtoint i64* %ln95y to i64
  store i64 %ln95z, i64* %R3_Var
  %ln95A = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln95A, i64* %R2_Var
  %ln95B = load i64*, i64** %Sp_Var
  %ln95C = getelementptr inbounds i64, i64* %ln95B, i32 3
  %ln95D = ptrtoint i64* %ln95C to i64
  %ln95E = inttoptr i64 %ln95D to i64*
  store i64* %ln95E, i64** %Sp_Var
  %ln95F = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95G = load i64*, i64** %Sp_Var
  %ln95H = load i64*, i64** %Hp_Var
  %ln95I = load i64, i64* %R2_Var
  %ln95J = load i64, i64* %R3_Var
  %ln95K = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95F( i64* %Base_Arg, i64* %ln95G, i64* %ln95H, i64 %R1_Arg, i64 %ln95I, i64 %ln95J, i64 %ln95K, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jl:
  %ln95L = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln95L, !tbaa !5
  %ln95N = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8E5_info$def to i64
  %ln95M = load i64*, i64** %Sp_Var
  %ln95O = getelementptr inbounds i64, i64* %ln95M, i32 0
  store i64 %ln95N, i64* %ln95O, !tbaa !2
  %ln95P = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95Q = load i64*, i64** %Sp_Var
  %ln95R = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95P( i64* %Base_Arg, i64* %ln95Q, i64* %ln95R, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.953100842 UTC

@c8LD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LD_info$def to i8*)
define internal ghccc void @c8LD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LD_info$def to i64)),i64 0), i64 67, i64 12884901918}>
{
c8LD:
  %ls8BY = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln95S = load i64*, i64** %Sp_Var
  %ln95T = getelementptr inbounds i64, i64* %ln95S, i32 1
  %ln95U = bitcast i64* %ln95T to i64*
  %ln95V = load i64, i64* %ln95U, !tbaa !2
  store i64 %ln95V, i64* %ls8BY
  %ln95W = load i64, i64* %ls8BY
  switch i64 %ln95W, label %c8LK [i64 99999999, label %u8Ns]
c8LK:
  %ln95Y = load i64, i64* %ls8BY
  %ln95Z = add i64 %ln95Y, 1
  %ln95X = load i64*, i64** %Sp_Var
  %ln960 = getelementptr inbounds i64, i64* %ln95X, i32 1
  store i64 %ln95Z, i64* %ln960, !tbaa !2
  %ln961 = load i64*, i64** %Sp_Var
  %ln962 = getelementptr inbounds i64, i64* %ln961, i32 1
  %ln963 = ptrtoint i64* %ln962 to i64
  %ln964 = inttoptr i64 %ln963 to i64*
  store i64* %ln964, i64** %Sp_Var
  %ln965 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln966 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln965( i64* %Base_Arg, i64* %ln966, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ns:
  %ln967 = load i64*, i64** %Sp_Var
  %ln968 = getelementptr inbounds i64, i64* %ln967, i32 1
  %ln969 = ptrtoint i64* %ln968 to i64
  %ln96a = inttoptr i64 %ln969 to i64*
  store i64* %ln96a, i64** %Sp_Var
  %ln96b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96c = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96b( i64* %Base_Arg, i64* %ln96c, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.954495576 UTC

@c8DT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DT_info$def to i8*)
define internal ghccc void @c8DT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DT_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8DT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln96d = load i64*, i64** %Hp_Var
  %ln96e = getelementptr inbounds i64, i64* %ln96d, i32 3
  %ln96f = ptrtoint i64* %ln96e to i64
  %ln96g = inttoptr i64 %ln96f to i64*
  store i64* %ln96g, i64** %Hp_Var
  %ln96h = load i64*, i64** %Hp_Var
  %ln96i = ptrtoint i64* %ln96h to i64
  %ln96j = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln96k = bitcast i64* %ln96j to i64*
  %ln96l = load i64, i64* %ln96k, !tbaa !5
  %ln96m = icmp ugt i64 %ln96i, %ln96l
  %ln96n = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln96m, i1 0 )
  br i1 %ln96n, label %c8Ji, label %c8Jh
c8Jh:
  %ln96p = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yV_info$def to i64
  %ln96o = load i64*, i64** %Hp_Var
  %ln96q = getelementptr inbounds i64, i64* %ln96o, i32 -2
  store i64 %ln96p, i64* %ln96q, !tbaa !3
  %ln96s = load i64*, i64** %Sp_Var
  %ln96t = getelementptr inbounds i64, i64* %ln96s, i32 1
  %ln96u = bitcast i64* %ln96t to i64*
  %ln96v = load i64, i64* %ln96u, !tbaa !2
  %ln96w = add i64 %ln96v, 8
  %ln96x = inttoptr i64 %ln96w to i64*
  %ln96y = load i64, i64* %ln96x, !tbaa !1
  %ln96r = load i64*, i64** %Hp_Var
  %ln96z = getelementptr inbounds i64, i64* %ln96r, i32 0
  store i64 %ln96y, i64* %ln96z, !tbaa !3
  %ln96A = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln96B = add i64 %ln96A, 2
  store i64 %ln96B, i64* %R4_Var
  %ln96C = load i64*, i64** %Hp_Var
  %ln96D = getelementptr inbounds i64, i64* %ln96C, i32 -2
  %ln96E = ptrtoint i64* %ln96D to i64
  store i64 %ln96E, i64* %R3_Var
  %ln96F = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln96F, i64* %R2_Var
  %ln96G = load i64*, i64** %Sp_Var
  %ln96H = getelementptr inbounds i64, i64* %ln96G, i32 3
  %ln96I = ptrtoint i64* %ln96H to i64
  %ln96J = inttoptr i64 %ln96I to i64*
  store i64* %ln96J, i64** %Sp_Var
  %ln96K = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96L = load i64*, i64** %Sp_Var
  %ln96M = load i64*, i64** %Hp_Var
  %ln96N = load i64, i64* %R2_Var
  %ln96O = load i64, i64* %R3_Var
  %ln96P = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96K( i64* %Base_Arg, i64* %ln96L, i64* %ln96M, i64 %R1_Arg, i64 %ln96N, i64 %ln96O, i64 %ln96P, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ji:
  %ln96Q = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln96Q, !tbaa !5
  %ln96S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DT_info$def to i64
  %ln96R = load i64*, i64** %Sp_Var
  %ln96T = getelementptr inbounds i64, i64* %ln96R, i32 0
  store i64 %ln96S, i64* %ln96T, !tbaa !2
  %ln96U = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96V = load i64*, i64** %Sp_Var
  %ln96W = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96U( i64* %Base_Arg, i64* %ln96V, i64* %ln96W, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.956202049 UTC

@c8DH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DH_info$def to i8*)
define internal ghccc void @c8DH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DH_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8DH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln96X = load i64*, i64** %Hp_Var
  %ln96Y = getelementptr inbounds i64, i64* %ln96X, i32 3
  %ln96Z = ptrtoint i64* %ln96Y to i64
  %ln970 = inttoptr i64 %ln96Z to i64*
  store i64* %ln970, i64** %Hp_Var
  %ln971 = load i64*, i64** %Hp_Var
  %ln972 = ptrtoint i64* %ln971 to i64
  %ln973 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln974 = bitcast i64* %ln973 to i64*
  %ln975 = load i64, i64* %ln974, !tbaa !5
  %ln976 = icmp ugt i64 %ln972, %ln975
  %ln977 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln976, i1 0 )
  br i1 %ln977, label %c8Jf, label %c8Je
c8Je:
  %ln979 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yP_info$def to i64
  %ln978 = load i64*, i64** %Hp_Var
  %ln97a = getelementptr inbounds i64, i64* %ln978, i32 -2
  store i64 %ln979, i64* %ln97a, !tbaa !3
  %ln97c = load i64*, i64** %Sp_Var
  %ln97d = getelementptr inbounds i64, i64* %ln97c, i32 1
  %ln97e = bitcast i64* %ln97d to i64*
  %ln97f = load i64, i64* %ln97e, !tbaa !2
  %ln97g = add i64 %ln97f, 8
  %ln97h = inttoptr i64 %ln97g to i64*
  %ln97i = load i64, i64* %ln97h, !tbaa !1
  %ln97b = load i64*, i64** %Hp_Var
  %ln97j = getelementptr inbounds i64, i64* %ln97b, i32 0
  store i64 %ln97i, i64* %ln97j, !tbaa !3
  %ln97k = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln97l = add i64 %ln97k, 2
  store i64 %ln97l, i64* %R4_Var
  %ln97m = load i64*, i64** %Hp_Var
  %ln97n = getelementptr inbounds i64, i64* %ln97m, i32 -2
  %ln97o = ptrtoint i64* %ln97n to i64
  store i64 %ln97o, i64* %R3_Var
  %ln97p = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln97p, i64* %R2_Var
  %ln97q = load i64*, i64** %Sp_Var
  %ln97r = getelementptr inbounds i64, i64* %ln97q, i32 3
  %ln97s = ptrtoint i64* %ln97r to i64
  %ln97t = inttoptr i64 %ln97s to i64*
  store i64* %ln97t, i64** %Sp_Var
  %ln97u = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97v = load i64*, i64** %Sp_Var
  %ln97w = load i64*, i64** %Hp_Var
  %ln97x = load i64, i64* %R2_Var
  %ln97y = load i64, i64* %R3_Var
  %ln97z = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97u( i64* %Base_Arg, i64* %ln97v, i64* %ln97w, i64 %R1_Arg, i64 %ln97x, i64 %ln97y, i64 %ln97z, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jf:
  %ln97A = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln97A, !tbaa !5
  %ln97C = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DH_info$def to i64
  %ln97B = load i64*, i64** %Sp_Var
  %ln97D = getelementptr inbounds i64, i64* %ln97B, i32 0
  store i64 %ln97C, i64* %ln97D, !tbaa !2
  %ln97E = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97F = load i64*, i64** %Sp_Var
  %ln97G = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97E( i64* %Base_Arg, i64* %ln97F, i64* %ln97G, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.957934823 UTC

@c8Dv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dv_info$def to i8*)
define internal ghccc void @c8Dv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dv_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8Dv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln97H = load i64*, i64** %Hp_Var
  %ln97I = getelementptr inbounds i64, i64* %ln97H, i32 3
  %ln97J = ptrtoint i64* %ln97I to i64
  %ln97K = inttoptr i64 %ln97J to i64*
  store i64* %ln97K, i64** %Hp_Var
  %ln97L = load i64*, i64** %Hp_Var
  %ln97M = ptrtoint i64* %ln97L to i64
  %ln97N = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln97O = bitcast i64* %ln97N to i64*
  %ln97P = load i64, i64* %ln97O, !tbaa !5
  %ln97Q = icmp ugt i64 %ln97M, %ln97P
  %ln97R = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97Q, i1 0 )
  br i1 %ln97R, label %c8Jc, label %c8Jb
c8Jb:
  %ln97T = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yJ_info$def to i64
  %ln97S = load i64*, i64** %Hp_Var
  %ln97U = getelementptr inbounds i64, i64* %ln97S, i32 -2
  store i64 %ln97T, i64* %ln97U, !tbaa !3
  %ln97W = load i64*, i64** %Sp_Var
  %ln97X = getelementptr inbounds i64, i64* %ln97W, i32 1
  %ln97Y = bitcast i64* %ln97X to i64*
  %ln97Z = load i64, i64* %ln97Y, !tbaa !2
  %ln980 = add i64 %ln97Z, 8
  %ln981 = inttoptr i64 %ln980 to i64*
  %ln982 = load i64, i64* %ln981, !tbaa !1
  %ln97V = load i64*, i64** %Hp_Var
  %ln983 = getelementptr inbounds i64, i64* %ln97V, i32 0
  store i64 %ln982, i64* %ln983, !tbaa !3
  %ln984 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln985 = add i64 %ln984, 2
  store i64 %ln985, i64* %R4_Var
  %ln986 = load i64*, i64** %Hp_Var
  %ln987 = getelementptr inbounds i64, i64* %ln986, i32 -2
  %ln988 = ptrtoint i64* %ln987 to i64
  store i64 %ln988, i64* %R3_Var
  %ln989 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln989, i64* %R2_Var
  %ln98a = load i64*, i64** %Sp_Var
  %ln98b = getelementptr inbounds i64, i64* %ln98a, i32 3
  %ln98c = ptrtoint i64* %ln98b to i64
  %ln98d = inttoptr i64 %ln98c to i64*
  store i64* %ln98d, i64** %Sp_Var
  %ln98e = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98f = load i64*, i64** %Sp_Var
  %ln98g = load i64*, i64** %Hp_Var
  %ln98h = load i64, i64* %R2_Var
  %ln98i = load i64, i64* %R3_Var
  %ln98j = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98e( i64* %Base_Arg, i64* %ln98f, i64* %ln98g, i64 %R1_Arg, i64 %ln98h, i64 %ln98i, i64 %ln98j, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Jc:
  %ln98k = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln98k, !tbaa !5
  %ln98m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dv_info$def to i64
  %ln98l = load i64*, i64** %Sp_Var
  %ln98n = getelementptr inbounds i64, i64* %ln98l, i32 0
  store i64 %ln98m, i64* %ln98n, !tbaa !2
  %ln98o = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98p = load i64*, i64** %Sp_Var
  %ln98q = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98o( i64* %Base_Arg, i64* %ln98p, i64* %ln98q, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.959649586 UTC

@c8Dj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dj_info$def to i8*)
define internal ghccc void @c8Dj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dj_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8Dj:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln98r = load i64*, i64** %Hp_Var
  %ln98s = getelementptr inbounds i64, i64* %ln98r, i32 3
  %ln98t = ptrtoint i64* %ln98s to i64
  %ln98u = inttoptr i64 %ln98t to i64*
  store i64* %ln98u, i64** %Hp_Var
  %ln98v = load i64*, i64** %Hp_Var
  %ln98w = ptrtoint i64* %ln98v to i64
  %ln98x = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln98y = bitcast i64* %ln98x to i64*
  %ln98z = load i64, i64* %ln98y, !tbaa !5
  %ln98A = icmp ugt i64 %ln98w, %ln98z
  %ln98B = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln98A, i1 0 )
  br i1 %ln98B, label %c8J9, label %c8J8
c8J8:
  %ln98D = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yD_info$def to i64
  %ln98C = load i64*, i64** %Hp_Var
  %ln98E = getelementptr inbounds i64, i64* %ln98C, i32 -2
  store i64 %ln98D, i64* %ln98E, !tbaa !3
  %ln98G = load i64*, i64** %Sp_Var
  %ln98H = getelementptr inbounds i64, i64* %ln98G, i32 1
  %ln98I = bitcast i64* %ln98H to i64*
  %ln98J = load i64, i64* %ln98I, !tbaa !2
  %ln98K = add i64 %ln98J, 8
  %ln98L = inttoptr i64 %ln98K to i64*
  %ln98M = load i64, i64* %ln98L, !tbaa !1
  %ln98F = load i64*, i64** %Hp_Var
  %ln98N = getelementptr inbounds i64, i64* %ln98F, i32 0
  store i64 %ln98M, i64* %ln98N, !tbaa !3
  %ln98O = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln98P = add i64 %ln98O, 2
  store i64 %ln98P, i64* %R4_Var
  %ln98Q = load i64*, i64** %Hp_Var
  %ln98R = getelementptr inbounds i64, i64* %ln98Q, i32 -2
  %ln98S = ptrtoint i64* %ln98R to i64
  store i64 %ln98S, i64* %R3_Var
  %ln98T = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln98T, i64* %R2_Var
  %ln98U = load i64*, i64** %Sp_Var
  %ln98V = getelementptr inbounds i64, i64* %ln98U, i32 3
  %ln98W = ptrtoint i64* %ln98V to i64
  %ln98X = inttoptr i64 %ln98W to i64*
  store i64* %ln98X, i64** %Sp_Var
  %ln98Y = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98Z = load i64*, i64** %Sp_Var
  %ln990 = load i64*, i64** %Hp_Var
  %ln991 = load i64, i64* %R2_Var
  %ln992 = load i64, i64* %R3_Var
  %ln993 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98Y( i64* %Base_Arg, i64* %ln98Z, i64* %ln990, i64 %R1_Arg, i64 %ln991, i64 %ln992, i64 %ln993, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8J9:
  %ln994 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln994, !tbaa !5
  %ln996 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Dj_info$def to i64
  %ln995 = load i64*, i64** %Sp_Var
  %ln997 = getelementptr inbounds i64, i64* %ln995, i32 0
  store i64 %ln996, i64* %ln997, !tbaa !2
  %ln998 = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln999 = load i64*, i64** %Sp_Var
  %ln99a = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln998( i64* %Base_Arg, i64* %ln999, i64* %ln99a, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.961146376 UTC

@c8Kg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Kg_info$def to i8*)
define internal ghccc void @c8Kg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Kg_info$def to i64)),i64 0), i64 67, i64 12884901918}>
{
c8Kg:
  %ls8AK = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln99b = load i64*, i64** %Sp_Var
  %ln99c = getelementptr inbounds i64, i64* %ln99b, i32 1
  %ln99d = bitcast i64* %ln99c to i64*
  %ln99e = load i64, i64* %ln99d, !tbaa !2
  store i64 %ln99e, i64* %ls8AK
  %ln99f = load i64, i64* %ls8AK
  switch i64 %ln99f, label %c8Km [i64 99999999, label %u8NA]
c8Km:
  %ln99h = load i64, i64* %ls8AK
  %ln99i = add i64 %ln99h, 1
  %ln99g = load i64*, i64** %Sp_Var
  %ln99j = getelementptr inbounds i64, i64* %ln99g, i32 1
  store i64 %ln99i, i64* %ln99j, !tbaa !2
  %ln99k = load i64*, i64** %Sp_Var
  %ln99l = getelementptr inbounds i64, i64* %ln99k, i32 1
  %ln99m = ptrtoint i64* %ln99l to i64
  %ln99n = inttoptr i64 %ln99m to i64*
  store i64* %ln99n, i64** %Sp_Var
  %ln99o = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99p = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99o( i64* %Base_Arg, i64* %ln99p, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8NA:
  %ln99q = load i64*, i64** %Sp_Var
  %ln99r = getelementptr inbounds i64, i64* %ln99q, i32 1
  %ln99s = ptrtoint i64* %ln99r to i64
  %ln99t = inttoptr i64 %ln99s to i64*
  store i64* %ln99t, i64** %Sp_Var
  %ln99u = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8D7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99v = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99u( i64* %Base_Arg, i64* %ln99v, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.962493745 UTC

@c8D7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8D7_info$def to i8*)
define internal ghccc void @c8D7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8D7_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8D7:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln99w = load i64*, i64** %Hp_Var
  %ln99x = getelementptr inbounds i64, i64* %ln99w, i32 3
  %ln99y = ptrtoint i64* %ln99x to i64
  %ln99z = inttoptr i64 %ln99y to i64*
  store i64* %ln99z, i64** %Hp_Var
  %ln99A = load i64*, i64** %Hp_Var
  %ln99B = ptrtoint i64* %ln99A to i64
  %ln99C = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln99D = bitcast i64* %ln99C to i64*
  %ln99E = load i64, i64* %ln99D, !tbaa !5
  %ln99F = icmp ugt i64 %ln99B, %ln99E
  %ln99G = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln99F, i1 0 )
  br i1 %ln99G, label %c8J6, label %c8J5
c8J5:
  %ln99I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yx_info$def to i64
  %ln99H = load i64*, i64** %Hp_Var
  %ln99J = getelementptr inbounds i64, i64* %ln99H, i32 -2
  store i64 %ln99I, i64* %ln99J, !tbaa !3
  %ln99L = load i64*, i64** %Sp_Var
  %ln99M = getelementptr inbounds i64, i64* %ln99L, i32 1
  %ln99N = bitcast i64* %ln99M to i64*
  %ln99O = load i64, i64* %ln99N, !tbaa !2
  %ln99P = add i64 %ln99O, 8
  %ln99Q = inttoptr i64 %ln99P to i64*
  %ln99R = load i64, i64* %ln99Q, !tbaa !1
  %ln99K = load i64*, i64** %Hp_Var
  %ln99S = getelementptr inbounds i64, i64* %ln99K, i32 0
  store i64 %ln99R, i64* %ln99S, !tbaa !3
  %ln99T = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln99U = add i64 %ln99T, 2
  store i64 %ln99U, i64* %R4_Var
  %ln99V = load i64*, i64** %Hp_Var
  %ln99W = getelementptr inbounds i64, i64* %ln99V, i32 -2
  %ln99X = ptrtoint i64* %ln99W to i64
  store i64 %ln99X, i64* %R3_Var
  %ln99Y = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln99Y, i64* %R2_Var
  %ln99Z = load i64*, i64** %Sp_Var
  %ln9a0 = getelementptr inbounds i64, i64* %ln99Z, i32 3
  %ln9a1 = ptrtoint i64* %ln9a0 to i64
  %ln9a2 = inttoptr i64 %ln9a1 to i64*
  store i64* %ln9a2, i64** %Sp_Var
  %ln9a3 = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9a4 = load i64*, i64** %Sp_Var
  %ln9a5 = load i64*, i64** %Hp_Var
  %ln9a6 = load i64, i64* %R2_Var
  %ln9a7 = load i64, i64* %R3_Var
  %ln9a8 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9a3( i64* %Base_Arg, i64* %ln9a4, i64* %ln9a5, i64 %R1_Arg, i64 %ln9a6, i64 %ln9a7, i64 %ln9a8, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8J6:
  %ln9a9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9a9, !tbaa !5
  %ln9ab = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8D7_info$def to i64
  %ln9aa = load i64*, i64** %Sp_Var
  %ln9ac = getelementptr inbounds i64, i64* %ln9aa, i32 0
  store i64 %ln9ab, i64* %ln9ac, !tbaa !2
  %ln9ad = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ae = load i64*, i64** %Sp_Var
  %ln9af = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ad( i64* %Base_Arg, i64* %ln9ae, i64* %ln9af, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.964185365 UTC

@c8K6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8K6_info$def to i8*)
define internal ghccc void @c8K6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8K6_info$def to i64)),i64 0), i64 67, i64 12884901918}>
{
c8K6:
  %ls8AE = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ag = load i64*, i64** %Sp_Var
  %ln9ah = getelementptr inbounds i64, i64* %ln9ag, i32 1
  %ln9ai = bitcast i64* %ln9ah to i64*
  %ln9aj = load i64, i64* %ln9ai, !tbaa !2
  store i64 %ln9aj, i64* %ls8AE
  %ln9ak = load i64, i64* %ls8AE
  switch i64 %ln9ak, label %c8Kd [i64 99999999, label %u8NC]
c8Kd:
  %ln9am = load i64, i64* %ls8AE
  %ln9an = add i64 %ln9am, 1
  %ln9al = load i64*, i64** %Sp_Var
  %ln9ao = getelementptr inbounds i64, i64* %ln9al, i32 1
  store i64 %ln9an, i64* %ln9ao, !tbaa !2
  %ln9ap = load i64*, i64** %Sp_Var
  %ln9aq = getelementptr inbounds i64, i64* %ln9ap, i32 1
  %ln9ar = ptrtoint i64* %ln9aq to i64
  %ln9as = inttoptr i64 %ln9ar to i64*
  store i64* %ln9as, i64** %Sp_Var
  %ln9at = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8ER$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9au = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9at( i64* %Base_Arg, i64* %ln9au, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8NC:
  %ln9av = load i64*, i64** %Sp_Var
  %ln9aw = getelementptr inbounds i64, i64* %ln9av, i32 1
  %ln9ax = ptrtoint i64* %ln9aw to i64
  %ln9ay = inttoptr i64 %ln9ax to i64*
  store i64* %ln9ay, i64** %Sp_Var
  %ln9az = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9aA = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9az( i64* %Base_Arg, i64* %ln9aA, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.96558194 UTC

@c8CV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CV_info$def to i8*)
define internal ghccc void @c8CV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CV_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8CV:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9aB = load i64*, i64** %Hp_Var
  %ln9aC = getelementptr inbounds i64, i64* %ln9aB, i32 3
  %ln9aD = ptrtoint i64* %ln9aC to i64
  %ln9aE = inttoptr i64 %ln9aD to i64*
  store i64* %ln9aE, i64** %Hp_Var
  %ln9aF = load i64*, i64** %Hp_Var
  %ln9aG = ptrtoint i64* %ln9aF to i64
  %ln9aH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9aI = bitcast i64* %ln9aH to i64*
  %ln9aJ = load i64, i64* %ln9aI, !tbaa !5
  %ln9aK = icmp ugt i64 %ln9aG, %ln9aJ
  %ln9aL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9aK, i1 0 )
  br i1 %ln9aL, label %c8J3, label %c8J2
c8J2:
  %ln9aN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yr_info$def to i64
  %ln9aM = load i64*, i64** %Hp_Var
  %ln9aO = getelementptr inbounds i64, i64* %ln9aM, i32 -2
  store i64 %ln9aN, i64* %ln9aO, !tbaa !3
  %ln9aQ = load i64*, i64** %Sp_Var
  %ln9aR = getelementptr inbounds i64, i64* %ln9aQ, i32 1
  %ln9aS = bitcast i64* %ln9aR to i64*
  %ln9aT = load i64, i64* %ln9aS, !tbaa !2
  %ln9aU = add i64 %ln9aT, 8
  %ln9aV = inttoptr i64 %ln9aU to i64*
  %ln9aW = load i64, i64* %ln9aV, !tbaa !1
  %ln9aP = load i64*, i64** %Hp_Var
  %ln9aX = getelementptr inbounds i64, i64* %ln9aP, i32 0
  store i64 %ln9aW, i64* %ln9aX, !tbaa !3
  %ln9aY = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9aZ = add i64 %ln9aY, 2
  store i64 %ln9aZ, i64* %R4_Var
  %ln9b0 = load i64*, i64** %Hp_Var
  %ln9b1 = getelementptr inbounds i64, i64* %ln9b0, i32 -2
  %ln9b2 = ptrtoint i64* %ln9b1 to i64
  store i64 %ln9b2, i64* %R3_Var
  %ln9b3 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9b3, i64* %R2_Var
  %ln9b4 = load i64*, i64** %Sp_Var
  %ln9b5 = getelementptr inbounds i64, i64* %ln9b4, i32 3
  %ln9b6 = ptrtoint i64* %ln9b5 to i64
  %ln9b7 = inttoptr i64 %ln9b6 to i64*
  store i64* %ln9b7, i64** %Sp_Var
  %ln9b8 = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9b9 = load i64*, i64** %Sp_Var
  %ln9ba = load i64*, i64** %Hp_Var
  %ln9bb = load i64, i64* %R2_Var
  %ln9bc = load i64, i64* %R3_Var
  %ln9bd = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9b8( i64* %Base_Arg, i64* %ln9b9, i64* %ln9ba, i64 %R1_Arg, i64 %ln9bb, i64 %ln9bc, i64 %ln9bd, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8J3:
  %ln9be = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9be, !tbaa !5
  %ln9bg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CV_info$def to i64
  %ln9bf = load i64*, i64** %Sp_Var
  %ln9bh = getelementptr inbounds i64, i64* %ln9bf, i32 0
  store i64 %ln9bg, i64* %ln9bh, !tbaa !2
  %ln9bi = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bj = load i64*, i64** %Sp_Var
  %ln9bk = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bi( i64* %Base_Arg, i64* %ln9bj, i64* %ln9bk, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.967317467 UTC

@c8CJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CJ_info$def to i8*)
define internal ghccc void @c8CJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CJ_info$def to i64)),i64 0), i64 130, i64 12884901918}>
{
c8CJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9bl = load i64*, i64** %Hp_Var
  %ln9bm = getelementptr inbounds i64, i64* %ln9bl, i32 3
  %ln9bn = ptrtoint i64* %ln9bm to i64
  %ln9bo = inttoptr i64 %ln9bn to i64*
  store i64* %ln9bo, i64** %Hp_Var
  %ln9bp = load i64*, i64** %Hp_Var
  %ln9bq = ptrtoint i64* %ln9bp to i64
  %ln9br = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9bs = bitcast i64* %ln9br to i64*
  %ln9bt = load i64, i64* %ln9bs, !tbaa !5
  %ln9bu = icmp ugt i64 %ln9bq, %ln9bt
  %ln9bv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9bu, i1 0 )
  br i1 %ln9bv, label %c8J0, label %c8IZ
c8IZ:
  %ln9bx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8yl_info$def to i64
  %ln9bw = load i64*, i64** %Hp_Var
  %ln9by = getelementptr inbounds i64, i64* %ln9bw, i32 -2
  store i64 %ln9bx, i64* %ln9by, !tbaa !3
  %ln9bA = load i64*, i64** %Sp_Var
  %ln9bB = getelementptr inbounds i64, i64* %ln9bA, i32 1
  %ln9bC = bitcast i64* %ln9bB to i64*
  %ln9bD = load i64, i64* %ln9bC, !tbaa !2
  %ln9bE = add i64 %ln9bD, 8
  %ln9bF = inttoptr i64 %ln9bE to i64*
  %ln9bG = load i64, i64* %ln9bF, !tbaa !1
  %ln9bz = load i64*, i64** %Hp_Var
  %ln9bH = getelementptr inbounds i64, i64* %ln9bz, i32 0
  store i64 %ln9bG, i64* %ln9bH, !tbaa !3
  %ln9bI = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9bJ = add i64 %ln9bI, 2
  store i64 %ln9bJ, i64* %R4_Var
  %ln9bK = load i64*, i64** %Hp_Var
  %ln9bL = getelementptr inbounds i64, i64* %ln9bK, i32 -2
  %ln9bM = ptrtoint i64* %ln9bL to i64
  store i64 %ln9bM, i64* %R3_Var
  %ln9bN = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln9bN, i64* %R2_Var
  %ln9bO = load i64*, i64** %Sp_Var
  %ln9bP = getelementptr inbounds i64, i64* %ln9bO, i32 3
  %ln9bQ = ptrtoint i64* %ln9bP to i64
  %ln9bR = inttoptr i64 %ln9bQ to i64*
  store i64* %ln9bR, i64** %Sp_Var
  %ln9bS = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bT = load i64*, i64** %Sp_Var
  %ln9bU = load i64*, i64** %Hp_Var
  %ln9bV = load i64, i64* %R2_Var
  %ln9bW = load i64, i64* %R3_Var
  %ln9bX = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bS( i64* %Base_Arg, i64* %ln9bT, i64* %ln9bU, i64 %R1_Arg, i64 %ln9bV, i64 %ln9bW, i64 %ln9bX, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8J0:
  %ln9bY = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9bY, !tbaa !5
  %ln9c0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8CJ_info$def to i64
  %ln9bZ = load i64*, i64** %Sp_Var
  %ln9c1 = getelementptr inbounds i64, i64* %ln9bZ, i32 0
  store i64 %ln9c0, i64* %ln9c1, !tbaa !2
  %ln9c2 = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9c3 = load i64*, i64** %Sp_Var
  %ln9c4 = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9c2( i64* %Base_Arg, i64* %ln9c3, i64* %ln9c4, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.969528228 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.969945938 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 4294967310}>
{
c9c9:
  %ln9cc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.970919277 UTC

%Main_main2_closure_struct = type <{i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.971372936 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 12884901902}>
{
c9ch:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9ck = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %ln9cl = add i64 %ln9ck, 1
  store i64 %ln9cl, i64* %R2_Var
  %ln9cm = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cn = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9cn, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.972308826 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.972720385 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8O4_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)),i64 32), i64 4294967299, i64 0, i64 4294967310}>
{
c9cs:
  %ln9cv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 14:02:22.973392305 UTC

%S8O4_srt_struct = type <{i64, i64, i64, i64, i64}>
@S8O4_srt$def = internal constant %S8O4_srt_struct<{i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStr2_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64)}>
@S8O4_srt = internal alias i8, bitcast (%S8O4_srt_struct* @S8O4_srt$def to i8*)


==================== LLVM Code ====================
2018-10-10 14:02:22.973646336 UTC

@hsprimitive_memset_Word8 = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@stg_gc_unpt_r1 = external global i8
@dirty_MUT_VAR = external global i8
@stg_gc_unbx_r1 = external global i8
@stg_gc_noregs = external global i8
@base_GHCziShow_zdfShowIntzuzdcshow_info = external global i8
@stg_upd_frame_info = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@stg_newByteArrayzh = external global i8
@stg_newMutVarzh = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_info = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@base_GHCziIOziHandleziText_hPutStr2_closure = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8


==================== LLVM Code ====================
2018-10-10 14:02:22.973937649 UTC

@llvm.used = appending constant [11 x i8*] [i8* bitcast (%S8O4_srt_struct* @S8O4_srt$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%r8y4_closure_struct* @r8y4_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)], section "llvm.metadata"

