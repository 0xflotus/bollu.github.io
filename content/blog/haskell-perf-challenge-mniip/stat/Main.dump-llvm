
==================== LLVM Code ====================
2018-10-10 15:36:00.227412501 UTC

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"


==================== LLVM Code ====================
2018-10-10 15:36:00.227698533 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 15:36:00.227871242 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 15:36:00.22803061 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2018-10-10 15:36:00.228182006 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.228365631 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2018-10-10 15:36:00.228748353 UTC



==================== LLVM Code ====================
2018-10-10 15:36:00.229130101 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.230001149 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.230392567 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.230810499 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.231266817 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.247601654 UTC

%Main_mainzuzdszdwsievefn_closure_struct = type <{i64}>
@Main_mainzuzdszdwsievefn_closure$def = internal global %Main_mainzuzdszdwsievefn_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_info$def to i64)}>
@Main_mainzuzdszdwsievefn_closure = alias i8, bitcast (%Main_mainzuzdszdwsievefn_closure_struct* @Main_mainzuzdszdwsievefn_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.248583582 UTC

@Main_mainzuzdszdwsievefn_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_slow$def to i8*)
define ghccc void @Main_mainzuzdszdwsievefn_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8lK:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8uG = load i64*, i64** %Sp_Var
  %ln8uH = getelementptr inbounds i64, i64* %ln8uG, i32 4
  %ln8uI = bitcast i64* %ln8uH to i64*
  %ln8uJ = load i64, i64* %ln8uI, !tbaa !2
  store i64 %ln8uJ, i64* %R6_Var
  %ln8uK = load i64*, i64** %Sp_Var
  %ln8uL = getelementptr inbounds i64, i64* %ln8uK, i32 3
  %ln8uM = bitcast i64* %ln8uL to i64*
  %ln8uN = load i64, i64* %ln8uM, !tbaa !2
  store i64 %ln8uN, i64* %R5_Var
  %ln8uO = load i64*, i64** %Sp_Var
  %ln8uP = getelementptr inbounds i64, i64* %ln8uO, i32 2
  %ln8uQ = bitcast i64* %ln8uP to i64*
  %ln8uR = load i64, i64* %ln8uQ, !tbaa !2
  store i64 %ln8uR, i64* %R4_Var
  %ln8uS = load i64*, i64** %Sp_Var
  %ln8uT = getelementptr inbounds i64, i64* %ln8uS, i32 1
  %ln8uU = bitcast i64* %ln8uT to i64*
  %ln8uV = load i64, i64* %ln8uU, !tbaa !2
  store i64 %ln8uV, i64* %R3_Var
  %ln8uW = load i64*, i64** %Sp_Var
  %ln8uX = getelementptr inbounds i64, i64* %ln8uW, i32 0
  %ln8uY = bitcast i64* %ln8uX to i64*
  %ln8uZ = load i64, i64* %ln8uY, !tbaa !2
  store i64 %ln8uZ, i64* %R2_Var
  %ln8v0 = load i64, i64* %R1_Var
  store i64 %ln8v0, i64* %R1_Var
  %ln8v1 = load i64*, i64** %Sp_Var
  %ln8v2 = getelementptr inbounds i64, i64* %ln8v1, i32 5
  %ln8v3 = ptrtoint i64* %ln8v2 to i64
  %ln8v4 = inttoptr i64 %ln8v3 to i64*
  store i64* %ln8v4, i64** %Sp_Var
  %ln8v5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8v6 = load i64*, i64** %Sp_Var
  %ln8v7 = load i64, i64* %R1_Var
  %ln8v8 = load i64, i64* %R2_Var
  %ln8v9 = load i64, i64* %R3_Var
  %ln8va = load i64, i64* %R4_Var
  %ln8vb = load i64, i64* %R5_Var
  %ln8vc = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8v5( i64* %Base_Arg, i64* %ln8v6, i64* %Hp_Arg, i64 %ln8v7, i64 %ln8v8, i64 %ln8v9, i64 %ln8va, i64 %ln8vb, i64 %ln8vc, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.250932175 UTC

@s8iD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8iD_info$def to i8*)
define internal ghccc void @s8iD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 12884901889, i64 8}>
{
c8n3:
  %ls8iE = alloca i64, i32 1
  %ls8iD = alloca i64, i32 1
  %ls8i9 = alloca i64, i32 1
  %ls8i7 = alloca i64, i32 1
  %ls8iB = alloca i64, i32 1
  %ls8iH = alloca i64, i32 1
  %ls8iL = alloca i64, i32 1
  %ls8iM = alloca i64, i32 1
  %ls8j0 = alloca i64, i32 1
  %ls8j4 = alloca i64, i32 1
  %ls8j5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8iE
  %ln8vd = load i64, i64* %R1_Var
  store i64 %ln8vd, i64* %ls8iD
  br label %c8mV
c8mV:
  %ln8ve = load i64, i64* %ls8iD
  %ln8vf = add i64 %ln8ve, 6
  %ln8vg = inttoptr i64 %ln8vf to i64*
  %ln8vh = load i64, i64* %ln8vg, !tbaa !1
  store i64 %ln8vh, i64* %ls8i9
  %ln8vi = load i64, i64* %ls8iD
  %ln8vj = add i64 %ln8vi, 14
  %ln8vk = inttoptr i64 %ln8vj to i64*
  %ln8vl = load i64, i64* %ln8vk, !tbaa !1
  store i64 %ln8vl, i64* %ls8i7
  %ln8vm = load i64, i64* %ls8iE
  %ln8vn = load i64, i64* %ls8iD
  %ln8vo = add i64 %ln8vn, 30
  %ln8vp = inttoptr i64 %ln8vo to i64*
  %ln8vq = load i64, i64* %ln8vp, !tbaa !1
  %ln8vr = icmp slt i64 %ln8vm, %ln8vq
  %ln8vs = zext i1 %ln8vr to i64
  switch i64 %ln8vs, label %c8n1 [i64 1, label %c8n2]
c8n1:
  %ln8vt = load i64, i64* %ls8iD
  %ln8vu = add i64 %ln8vt, 22
  %ln8vv = inttoptr i64 %ln8vu to i64*
  %ln8vw = load i64, i64* %ln8vv, !tbaa !1
  store i64 %ln8vw, i64* %ls8iB
  %ln8vx = load i64, i64* %ls8iE
  %ln8vy = ashr i64 %ln8vx, 3
  store i64 %ln8vy, i64* %ls8iH
  %ln8vz = load i64, i64* %ls8i9
  %ln8vA = add i64 %ln8vz, 16
  %ln8vB = load i64, i64* %ls8i7
  %ln8vC = load i64, i64* %ls8iH
  %ln8vD = add i64 %ln8vB, %ln8vC
  %ln8vE = add i64 %ln8vA, %ln8vD
  %ln8vF = inttoptr i64 %ln8vE to i8*
  %ln8vG = load i8, i8* %ln8vF, !tbaa !1
  %ln8vH = sext i8 %ln8vG to i64
  store i64 %ln8vH, i64* %ls8iL
  %ln8vI = load i64, i64* %ls8iE
  %ln8vJ = and i64 %ln8vI, 7
  store i64 %ln8vJ, i64* %ls8iM
  %ln8vK = load i64, i64* %ls8iM
  %ln8vL = icmp sge i64 %ln8vK, 64
  %ln8vM = zext i1 %ln8vL to i64
  switch i64 %ln8vM, label %c8nj [i64 1, label %c8nk]
c8nj:
  %ln8vN = load i64, i64* %ls8i9
  %ln8vO = add i64 %ln8vN, 16
  %ln8vP = load i64, i64* %ls8i7
  %ln8vQ = load i64, i64* %ls8iH
  %ln8vR = add i64 %ln8vP, %ln8vQ
  %ln8vS = add i64 %ln8vO, %ln8vR
  %ln8vT = load i64, i64* %ls8iL
  %ln8vU = load i64, i64* %ls8iM
  %ln8vV = shl i64 1, %ln8vU
  %ln8vW = trunc i64 %ln8vV to i8
  %ln8vX = sext i8 %ln8vW to i64
  %ln8vY = or i64 %ln8vT, %ln8vX
  %ln8vZ = trunc i64 %ln8vY to i8
  %ln8w0 = inttoptr i64 %ln8vS to i8*
  store i8 %ln8vZ, i8* %ln8w0, !tbaa !1
  %ln8w1 = load i64, i64* %ls8iE
  %ln8w2 = load i64, i64* %ls8iB
  %ln8w3 = add i64 %ln8w1, %ln8w2
  store i64 %ln8w3, i64* %ls8iE
  br label %c8mV
c8nk:
  %ln8w4 = load i64, i64* %ls8i9
  %ln8w5 = add i64 %ln8w4, 16
  %ln8w6 = load i64, i64* %ls8i7
  %ln8w7 = load i64, i64* %ls8iH
  %ln8w8 = add i64 %ln8w6, %ln8w7
  %ln8w9 = add i64 %ln8w5, %ln8w8
  %ln8wa = load i64, i64* %ls8iL
  %ln8wb = trunc i64 %ln8wa to i8
  %ln8wc = inttoptr i64 %ln8w9 to i8*
  store i8 %ln8wb, i8* %ln8wc, !tbaa !1
  %ln8wd = load i64, i64* %ls8iE
  %ln8we = load i64, i64* %ls8iB
  %ln8wf = add i64 %ln8wd, %ln8we
  store i64 %ln8wf, i64* %ls8iE
  br label %c8mV
c8n2:
  %ln8wg = load i64, i64* %ls8iE
  %ln8wh = ashr i64 %ln8wg, 3
  store i64 %ln8wh, i64* %ls8j0
  %ln8wi = load i64, i64* %ls8i9
  %ln8wj = add i64 %ln8wi, 16
  %ln8wk = load i64, i64* %ls8i7
  %ln8wl = load i64, i64* %ls8j0
  %ln8wm = add i64 %ln8wk, %ln8wl
  %ln8wn = add i64 %ln8wj, %ln8wm
  %ln8wo = inttoptr i64 %ln8wn to i8*
  %ln8wp = load i8, i8* %ln8wo, !tbaa !1
  %ln8wq = sext i8 %ln8wp to i64
  store i64 %ln8wq, i64* %ls8j4
  %ln8wr = load i64, i64* %ls8iE
  %ln8ws = and i64 %ln8wr, 7
  store i64 %ln8ws, i64* %ls8j5
  %ln8wt = load i64, i64* %ls8j5
  %ln8wu = icmp sge i64 %ln8wt, 64
  %ln8wv = zext i1 %ln8wu to i64
  switch i64 %ln8wv, label %c8ny [i64 1, label %c8nz]
c8ny:
  %ln8ww = load i64, i64* %ls8i9
  %ln8wx = add i64 %ln8ww, 16
  %ln8wy = load i64, i64* %ls8i7
  %ln8wz = load i64, i64* %ls8j0
  %ln8wA = add i64 %ln8wy, %ln8wz
  %ln8wB = add i64 %ln8wx, %ln8wA
  %ln8wC = load i64, i64* %ls8j4
  %ln8wD = load i64, i64* %ls8j5
  %ln8wE = shl i64 1, %ln8wD
  %ln8wF = trunc i64 %ln8wE to i8
  %ln8wG = sext i8 %ln8wF to i64
  %ln8wH = or i64 %ln8wC, %ln8wG
  %ln8wI = trunc i64 %ln8wH to i8
  %ln8wJ = inttoptr i64 %ln8wB to i8*
  store i8 %ln8wI, i8* %ln8wJ, !tbaa !1
  %ln8wK = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8wL = add i64 %ln8wK, 1
  store i64 %ln8wL, i64* %R1_Var
  %ln8wM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8wN = bitcast i64* %ln8wM to i64*
  %ln8wO = load i64, i64* %ln8wN, !tbaa !2
  %ln8wP = inttoptr i64 %ln8wO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8wQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8nz:
  %ln8wR = load i64, i64* %ls8i9
  %ln8wS = add i64 %ln8wR, 16
  %ln8wT = load i64, i64* %ls8i7
  %ln8wU = load i64, i64* %ls8j0
  %ln8wV = add i64 %ln8wT, %ln8wU
  %ln8wW = add i64 %ln8wS, %ln8wV
  %ln8wX = load i64, i64* %ls8j4
  %ln8wY = trunc i64 %ln8wX to i8
  %ln8wZ = inttoptr i64 %ln8wW to i8*
  store i8 %ln8wY, i8* %ln8wZ, !tbaa !1
  %ln8x0 = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8x1 = add i64 %ln8x0, 1
  store i64 %ln8x1, i64* %R1_Var
  %ln8x2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8x3 = bitcast i64* %ln8x2 to i64*
  %ln8x4 = load i64, i64* %ln8x3, !tbaa !2
  %ln8x5 = inttoptr i64 %ln8x4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8x6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8x5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8x6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.254170943 UTC

@s8k9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8k9_info$def to i8*)
define internal ghccc void @s8k9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 12884901889, i64 8}>
{
c8oR:
  %ls8ka = alloca i64, i32 1
  %ls8k9 = alloca i64, i32 1
  %ls8i9 = alloca i64, i32 1
  %ls8i7 = alloca i64, i32 1
  %ls8k7 = alloca i64, i32 1
  %ls8kd = alloca i64, i32 1
  %ls8kh = alloca i64, i32 1
  %ls8ki = alloca i64, i32 1
  %ls8kw = alloca i64, i32 1
  %ls8kA = alloca i64, i32 1
  %ls8kB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8ka
  %ln8x7 = load i64, i64* %R1_Var
  store i64 %ln8x7, i64* %ls8k9
  br label %c8oJ
c8oJ:
  %ln8x8 = load i64, i64* %ls8k9
  %ln8x9 = add i64 %ln8x8, 6
  %ln8xa = inttoptr i64 %ln8x9 to i64*
  %ln8xb = load i64, i64* %ln8xa, !tbaa !1
  store i64 %ln8xb, i64* %ls8i9
  %ln8xc = load i64, i64* %ls8k9
  %ln8xd = add i64 %ln8xc, 14
  %ln8xe = inttoptr i64 %ln8xd to i64*
  %ln8xf = load i64, i64* %ln8xe, !tbaa !1
  store i64 %ln8xf, i64* %ls8i7
  %ln8xg = load i64, i64* %ls8ka
  %ln8xh = load i64, i64* %ls8k9
  %ln8xi = add i64 %ln8xh, 30
  %ln8xj = inttoptr i64 %ln8xi to i64*
  %ln8xk = load i64, i64* %ln8xj, !tbaa !1
  %ln8xl = icmp sgt i64 %ln8xg, %ln8xk
  %ln8xm = zext i1 %ln8xl to i64
  switch i64 %ln8xm, label %c8oP [i64 1, label %c8oQ]
c8oP:
  %ln8xn = load i64, i64* %ls8k9
  %ln8xo = add i64 %ln8xn, 22
  %ln8xp = inttoptr i64 %ln8xo to i64*
  %ln8xq = load i64, i64* %ln8xp, !tbaa !1
  store i64 %ln8xq, i64* %ls8k7
  %ln8xr = load i64, i64* %ls8ka
  %ln8xs = ashr i64 %ln8xr, 3
  store i64 %ln8xs, i64* %ls8kd
  %ln8xt = load i64, i64* %ls8i9
  %ln8xu = add i64 %ln8xt, 16
  %ln8xv = load i64, i64* %ls8i7
  %ln8xw = load i64, i64* %ls8kd
  %ln8xx = add i64 %ln8xv, %ln8xw
  %ln8xy = add i64 %ln8xu, %ln8xx
  %ln8xz = inttoptr i64 %ln8xy to i8*
  %ln8xA = load i8, i8* %ln8xz, !tbaa !1
  %ln8xB = sext i8 %ln8xA to i64
  store i64 %ln8xB, i64* %ls8kh
  %ln8xC = load i64, i64* %ls8ka
  %ln8xD = and i64 %ln8xC, 7
  store i64 %ln8xD, i64* %ls8ki
  %ln8xE = load i64, i64* %ls8ki
  %ln8xF = icmp sge i64 %ln8xE, 64
  %ln8xG = zext i1 %ln8xF to i64
  switch i64 %ln8xG, label %c8p7 [i64 1, label %c8p8]
c8p7:
  %ln8xH = load i64, i64* %ls8i9
  %ln8xI = add i64 %ln8xH, 16
  %ln8xJ = load i64, i64* %ls8i7
  %ln8xK = load i64, i64* %ls8kd
  %ln8xL = add i64 %ln8xJ, %ln8xK
  %ln8xM = add i64 %ln8xI, %ln8xL
  %ln8xN = load i64, i64* %ls8kh
  %ln8xO = load i64, i64* %ls8ki
  %ln8xP = shl i64 1, %ln8xO
  %ln8xQ = trunc i64 %ln8xP to i8
  %ln8xR = sext i8 %ln8xQ to i64
  %ln8xS = or i64 %ln8xN, %ln8xR
  %ln8xT = trunc i64 %ln8xS to i8
  %ln8xU = inttoptr i64 %ln8xM to i8*
  store i8 %ln8xT, i8* %ln8xU, !tbaa !1
  %ln8xV = load i64, i64* %ls8ka
  %ln8xW = load i64, i64* %ls8k7
  %ln8xX = add i64 %ln8xV, %ln8xW
  store i64 %ln8xX, i64* %ls8ka
  br label %c8oJ
c8p8:
  %ln8xY = load i64, i64* %ls8i9
  %ln8xZ = add i64 %ln8xY, 16
  %ln8y0 = load i64, i64* %ls8i7
  %ln8y1 = load i64, i64* %ls8kd
  %ln8y2 = add i64 %ln8y0, %ln8y1
  %ln8y3 = add i64 %ln8xZ, %ln8y2
  %ln8y4 = load i64, i64* %ls8kh
  %ln8y5 = trunc i64 %ln8y4 to i8
  %ln8y6 = inttoptr i64 %ln8y3 to i8*
  store i8 %ln8y5, i8* %ln8y6, !tbaa !1
  %ln8y7 = load i64, i64* %ls8ka
  %ln8y8 = load i64, i64* %ls8k7
  %ln8y9 = add i64 %ln8y7, %ln8y8
  store i64 %ln8y9, i64* %ls8ka
  br label %c8oJ
c8oQ:
  %ln8ya = load i64, i64* %ls8ka
  %ln8yb = ashr i64 %ln8ya, 3
  store i64 %ln8yb, i64* %ls8kw
  %ln8yc = load i64, i64* %ls8i9
  %ln8yd = add i64 %ln8yc, 16
  %ln8ye = load i64, i64* %ls8i7
  %ln8yf = load i64, i64* %ls8kw
  %ln8yg = add i64 %ln8ye, %ln8yf
  %ln8yh = add i64 %ln8yd, %ln8yg
  %ln8yi = inttoptr i64 %ln8yh to i8*
  %ln8yj = load i8, i8* %ln8yi, !tbaa !1
  %ln8yk = sext i8 %ln8yj to i64
  store i64 %ln8yk, i64* %ls8kA
  %ln8yl = load i64, i64* %ls8ka
  %ln8ym = and i64 %ln8yl, 7
  store i64 %ln8ym, i64* %ls8kB
  %ln8yn = load i64, i64* %ls8kB
  %ln8yo = icmp sge i64 %ln8yn, 64
  %ln8yp = zext i1 %ln8yo to i64
  switch i64 %ln8yp, label %c8pm [i64 1, label %c8pn]
c8pm:
  %ln8yq = load i64, i64* %ls8i9
  %ln8yr = add i64 %ln8yq, 16
  %ln8ys = load i64, i64* %ls8i7
  %ln8yt = load i64, i64* %ls8kw
  %ln8yu = add i64 %ln8ys, %ln8yt
  %ln8yv = add i64 %ln8yr, %ln8yu
  %ln8yw = load i64, i64* %ls8kA
  %ln8yx = load i64, i64* %ls8kB
  %ln8yy = shl i64 1, %ln8yx
  %ln8yz = trunc i64 %ln8yy to i8
  %ln8yA = sext i8 %ln8yz to i64
  %ln8yB = or i64 %ln8yw, %ln8yA
  %ln8yC = trunc i64 %ln8yB to i8
  %ln8yD = inttoptr i64 %ln8yv to i8*
  store i8 %ln8yC, i8* %ln8yD, !tbaa !1
  %ln8yE = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8yF = add i64 %ln8yE, 1
  store i64 %ln8yF, i64* %R1_Var
  %ln8yG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8yH = bitcast i64* %ln8yG to i64*
  %ln8yI = load i64, i64* %ln8yH, !tbaa !2
  %ln8yJ = inttoptr i64 %ln8yI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8yK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8pn:
  %ln8yL = load i64, i64* %ls8i9
  %ln8yM = add i64 %ln8yL, 16
  %ln8yN = load i64, i64* %ls8i7
  %ln8yO = load i64, i64* %ls8kw
  %ln8yP = add i64 %ln8yN, %ln8yO
  %ln8yQ = add i64 %ln8yM, %ln8yP
  %ln8yR = load i64, i64* %ls8kA
  %ln8yS = trunc i64 %ln8yR to i8
  %ln8yT = inttoptr i64 %ln8yQ to i8*
  store i8 %ln8yS, i8* %ln8yT, !tbaa !1
  %ln8yU = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8yV = add i64 %ln8yU, 1
  store i64 %ln8yV, i64* %R1_Var
  %ln8yW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8yX = bitcast i64* %ln8yW to i64*
  %ln8yY = load i64, i64* %ln8yX, !tbaa !2
  %ln8yZ = inttoptr i64 %ln8yY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8z0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8z0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.257172532 UTC

@Main_mainzuzdszdwsievefn_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_info$def to i8*)
define ghccc void @Main_mainzuzdszdwsievefn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_info$def to i64)),i64 0), i64 965, i64 0, i64 30064771072, i64 0, i64 14}>
{
c8qf:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8z1 = load i64*, i64** %Sp_Var
  %ln8z2 = getelementptr inbounds i64, i64* %ln8z1, i32 -6
  %ln8z3 = ptrtoint i64* %ln8z2 to i64
  %ln8z4 = icmp ult i64 %ln8z3, %SpLim_Arg
  %ln8z6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8z4, i1 0 )
  br i1 %ln8z6, label %u8uc, label %u8ub
u8ub:
  %ln8z7 = load i64*, i64** %Sp_Var
  %ln8z8 = getelementptr inbounds i64, i64* %ln8z7, i32 -5
  store i64 %R2_Arg, i64* %ln8z8, !tbaa !2
  %ln8z9 = load i64*, i64** %Sp_Var
  %ln8za = getelementptr inbounds i64, i64* %ln8z9, i32 -4
  store i64 %R3_Arg, i64* %ln8za, !tbaa !2
  %ln8zb = load i64*, i64** %Sp_Var
  %ln8zc = getelementptr inbounds i64, i64* %ln8zb, i32 -3
  store i64 %R4_Arg, i64* %ln8zc, !tbaa !2
  %ln8zd = load i64*, i64** %Sp_Var
  %ln8ze = getelementptr inbounds i64, i64* %ln8zd, i32 -2
  store i64 %R5_Arg, i64* %ln8ze, !tbaa !2
  %ln8zf = load i64*, i64** %Sp_Var
  %ln8zg = getelementptr inbounds i64, i64* %ln8zf, i32 -1
  store i64 %R6_Arg, i64* %ln8zg, !tbaa !2
  %ln8zh = load i64*, i64** %Sp_Var
  %ln8zi = getelementptr inbounds i64, i64* %ln8zh, i32 -5
  %ln8zj = ptrtoint i64* %ln8zi to i64
  %ln8zk = inttoptr i64 %ln8zj to i64*
  store i64* %ln8zk, i64** %Sp_Var
  %ln8zl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zm = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zl( i64* %Base_Arg, i64* %ln8zm, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8uc:
  %ln8zn = load i64*, i64** %Sp_Var
  %ln8zo = getelementptr inbounds i64, i64* %ln8zn, i32 -5
  store i64 %R2_Arg, i64* %ln8zo, !tbaa !2
  %ln8zp = load i64*, i64** %Sp_Var
  %ln8zq = getelementptr inbounds i64, i64* %ln8zp, i32 -4
  store i64 %R3_Arg, i64* %ln8zq, !tbaa !2
  %ln8zr = load i64*, i64** %Sp_Var
  %ln8zs = getelementptr inbounds i64, i64* %ln8zr, i32 -3
  store i64 %R4_Arg, i64* %ln8zs, !tbaa !2
  %ln8zt = load i64*, i64** %Sp_Var
  %ln8zu = getelementptr inbounds i64, i64* %ln8zt, i32 -2
  store i64 %R5_Arg, i64* %ln8zu, !tbaa !2
  %ln8zv = load i64*, i64** %Sp_Var
  %ln8zw = getelementptr inbounds i64, i64* %ln8zv, i32 -1
  store i64 %R6_Arg, i64* %ln8zw, !tbaa !2
  %ln8zx = load i64*, i64** %Sp_Var
  %ln8zy = getelementptr inbounds i64, i64* %ln8zx, i32 -5
  %ln8zz = ptrtoint i64* %ln8zy to i64
  %ln8zA = inttoptr i64 %ln8zz to i64*
  store i64* %ln8zA, i64** %Sp_Var
  %ln8zB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8qg$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zC = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zB( i64* %Base_Arg, i64* %ln8zC, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2018-10-10 15:36:00.260251554 UTC

@_c8lL = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to i8*)
define internal ghccc void @_c8lL$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8lL:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8i5 = alloca i64, i32 1
  %ls8i6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8i7 = alloca i64, i32 1
  %ls8i8 = alloca i64, i32 1
  %ls8i9 = alloca i64, i32 1
  %ls8ig = alloca i64, i32 1
  %ls8ih = alloca i64, i32 1
  %ls8ij = alloca i64, i32 1
  %ls8io = alloca i64, i32 1
  %ln8zD = load i64*, i64** %Hp_Var
  %ln8zE = getelementptr inbounds i64, i64* %ln8zD, i32 2
  %ln8zF = ptrtoint i64* %ln8zE to i64
  %ln8zG = inttoptr i64 %ln8zF to i64*
  store i64* %ln8zG, i64** %Hp_Var
  %ln8zH = load i64*, i64** %Hp_Var
  %ln8zI = ptrtoint i64* %ln8zH to i64
  %ln8zJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8zK = bitcast i64* %ln8zJ to i64*
  %ln8zL = load i64, i64* %ln8zK, !tbaa !5
  %ln8zM = icmp ugt i64 %ln8zI, %ln8zL
  %ln8zN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8zM, i1 0 )
  br i1 %ln8zN, label %c8qj, label %c8qi
c8qi:
  %ln8zO = load i64*, i64** %Sp_Var
  %ln8zP = getelementptr inbounds i64, i64* %ln8zO, i32 0
  %ln8zQ = bitcast i64* %ln8zP to i64*
  %ln8zR = load i64, i64* %ln8zQ, !tbaa !2
  store i64 %ln8zR, i64* %ls8i5
  %ln8zS = load i64*, i64** %Sp_Var
  %ln8zT = getelementptr inbounds i64, i64* %ln8zS, i32 1
  %ln8zU = bitcast i64* %ln8zT to i64*
  %ln8zV = load i64, i64* %ln8zU, !tbaa !2
  store i64 %ln8zV, i64* %ls8i6
  %ln8zW = load i64, i64* %ls8i5
  %ln8zX = icmp slt i64 %ln8zW, 100000000
  %ln8zY = zext i1 %ln8zX to i64
  switch i64 %ln8zY, label %c8qd [i64 1, label %c8qe]
c8qd:
  %ln8A0 = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %ln8zZ = load i64*, i64** %Hp_Var
  %ln8A1 = getelementptr inbounds i64, i64* %ln8zZ, i32 -1
  store i64 %ln8A0, i64* %ln8A1, !tbaa !3
  %ln8A3 = load i64, i64* %ls8i6
  %ln8A2 = load i64*, i64** %Hp_Var
  %ln8A4 = getelementptr inbounds i64, i64* %ln8A2, i32 0
  store i64 %ln8A3, i64* %ln8A4, !tbaa !3
  %ln8A6 = load i64*, i64** %Hp_Var
  %ln8A7 = ptrtoint i64* %ln8A6 to i64
  %ln8A8 = add i64 %ln8A7, -7
  store i64 %ln8A8, i64* %R1_Var
  %ln8A9 = load i64*, i64** %Sp_Var
  %ln8Aa = getelementptr inbounds i64, i64* %ln8A9, i32 5
  %ln8Ab = ptrtoint i64* %ln8Aa to i64
  %ln8Ac = inttoptr i64 %ln8Ab to i64*
  store i64* %ln8Ac, i64** %Sp_Var
  %ln8Ad = load i64*, i64** %Sp_Var
  %ln8Ae = getelementptr inbounds i64, i64* %ln8Ad, i32 0
  %ln8Af = bitcast i64* %ln8Ae to i64*
  %ln8Ag = load i64, i64* %ln8Af, !tbaa !2
  %ln8Ah = inttoptr i64 %ln8Ag to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ai = load i64*, i64** %Sp_Var
  %ln8Aj = load i64*, i64** %Hp_Var
  %ln8Ak = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ah( i64* %Base_Arg, i64* %ln8Ai, i64* %ln8Aj, i64 %ln8Ak, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8qe:
  %ln8Al = load i64*, i64** %Sp_Var
  %ln8Am = getelementptr inbounds i64, i64* %ln8Al, i32 2
  %ln8An = bitcast i64* %ln8Am to i64*
  %ln8Ao = load i64, i64* %ln8An, !tbaa !2
  store i64 %ln8Ao, i64* %ls8i7
  %ln8Ap = load i64*, i64** %Sp_Var
  %ln8Aq = getelementptr inbounds i64, i64* %ln8Ap, i32 3
  %ln8Ar = bitcast i64* %ln8Aq to i64*
  %ln8As = load i64, i64* %ln8Ar, !tbaa !2
  store i64 %ln8As, i64* %ls8i8
  %ln8At = load i64*, i64** %Sp_Var
  %ln8Au = getelementptr inbounds i64, i64* %ln8At, i32 4
  %ln8Av = bitcast i64* %ln8Au to i64*
  %ln8Aw = load i64, i64* %ln8Av, !tbaa !2
  store i64 %ln8Aw, i64* %ls8i9
  %ln8Ax = load i64, i64* %ls8i9
  %ln8Ay = add i64 %ln8Ax, 16
  %ln8Az = load i64, i64* %ls8i7
  %ln8AA = load i64, i64* %ls8i5
  %ln8AB = ashr i64 %ln8AA, 3
  %ln8AC = add i64 %ln8Az, %ln8AB
  %ln8AD = add i64 %ln8Ay, %ln8AC
  %ln8AE = inttoptr i64 %ln8AD to i8*
  %ln8AF = load i8, i8* %ln8AE, !tbaa !1
  %ln8AG = sext i8 %ln8AF to i64
  store i64 %ln8AG, i64* %ls8ig
  %ln8AH = load i64, i64* %ls8i5
  %ln8AI = and i64 %ln8AH, 7
  store i64 %ln8AI, i64* %ls8ih
  %ln8AJ = load i64, i64* %ls8ih
  %ln8AK = icmp sge i64 %ln8AJ, 64
  %ln8AL = zext i1 %ln8AK to i64
  switch i64 %ln8AL, label %c8sA [i64 1, label %c8sB]
c8sA:
  %ln8AM = load i64*, i64** %Hp_Var
  %ln8AN = getelementptr inbounds i64, i64* %ln8AM, i32 -2
  %ln8AO = ptrtoint i64* %ln8AN to i64
  %ln8AP = inttoptr i64 %ln8AO to i64*
  store i64* %ln8AP, i64** %Hp_Var
  %ln8AQ = load i64, i64* %ls8ih
  %ln8AR = shl i64 1, %ln8AQ
  store i64 %ln8AR, i64* %ls8ij
  br label %s8ii
s8ii:
  %ln8AS = load i64, i64* %ls8ig
  %ln8AT = load i64, i64* %ls8ij
  %ln8AU = trunc i64 %ln8AT to i8
  %ln8AV = sext i8 %ln8AU to i64
  %ln8AW = and i64 %ln8AS, %ln8AV
  store i64 %ln8AW, i64* %ls8io
  %ln8AX = load i64, i64* %ls8io
  switch i64 %ln8AX, label %c8qo [i64 0, label %u8ud]
c8qo:
  %ln8AZ = load i64, i64* %ls8i5
  %ln8B0 = add i64 %ln8AZ, 1
  %ln8AY = load i64*, i64** %Sp_Var
  %ln8B1 = getelementptr inbounds i64, i64* %ln8AY, i32 0
  store i64 %ln8B0, i64* %ln8B1, !tbaa !2
  %ln8B3 = load i64, i64* %ls8i6
  %ln8B2 = load i64*, i64** %Sp_Var
  %ln8B4 = getelementptr inbounds i64, i64* %ln8B2, i32 1
  store i64 %ln8B3, i64* %ln8B4, !tbaa !2
  %ln8B6 = load i64, i64* %ls8i7
  %ln8B5 = load i64*, i64** %Sp_Var
  %ln8B7 = getelementptr inbounds i64, i64* %ln8B5, i32 2
  store i64 %ln8B6, i64* %ln8B7, !tbaa !2
  %ln8B9 = load i64, i64* %ls8i8
  %ln8B8 = load i64*, i64** %Sp_Var
  %ln8Ba = getelementptr inbounds i64, i64* %ln8B8, i32 3
  store i64 %ln8B9, i64* %ln8Ba, !tbaa !2
  %ln8Bc = load i64, i64* %ls8i9
  %ln8Bb = load i64*, i64** %Sp_Var
  %ln8Bd = getelementptr inbounds i64, i64* %ln8Bb, i32 4
  store i64 %ln8Bc, i64* %ln8Bd, !tbaa !2
  %ln8Be = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bf = load i64*, i64** %Sp_Var
  %ln8Bg = load i64*, i64** %Hp_Var
  %ln8Bh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Be( i64* %Base_Arg, i64* %ln8Bf, i64* %ln8Bg, i64 %ln8Bh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8ud:
  %ln8Bj = load i64, i64* %ls8io
  %ln8Bi = load i64*, i64** %Sp_Var
  %ln8Bk = getelementptr inbounds i64, i64* %ln8Bi, i32 -1
  store i64 %ln8Bj, i64* %ln8Bk, !tbaa !2
  %ln8Bl = load i64*, i64** %Sp_Var
  %ln8Bm = getelementptr inbounds i64, i64* %ln8Bl, i32 -1
  %ln8Bn = ptrtoint i64* %ln8Bm to i64
  %ln8Bo = inttoptr i64 %ln8Bn to i64*
  store i64* %ln8Bo, i64** %Sp_Var
  %ln8Bp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8mn$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bq = load i64*, i64** %Sp_Var
  %ln8Br = load i64*, i64** %Hp_Var
  %ln8Bs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bp( i64* %Base_Arg, i64* %ln8Bq, i64* %ln8Br, i64 %ln8Bs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sB:
  %ln8Bt = load i64*, i64** %Hp_Var
  %ln8Bu = getelementptr inbounds i64, i64* %ln8Bt, i32 -2
  %ln8Bv = ptrtoint i64* %ln8Bu to i64
  %ln8Bw = inttoptr i64 %ln8Bv to i64*
  store i64* %ln8Bw, i64** %Hp_Var
  store i64 0, i64* %ls8ij
  br label %s8ii
c8qj:
  %ln8Bx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8Bx, !tbaa !5
  %ln8By = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8qg$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bz = load i64*, i64** %Sp_Var
  %ln8BA = load i64*, i64** %Hp_Var
  %ln8BB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8By( i64* %Base_Arg, i64* %ln8Bz, i64* %ln8BA, i64 %ln8BB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.263244804 UTC

@_c8qg = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8qg$def to i8*)
define internal ghccc void @_c8qg$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8qg:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8BC = ptrtoint %Main_mainzuzdszdwsievefn_closure_struct* @Main_mainzuzdszdwsievefn_closure$def to i64
  store i64 %ln8BC, i64* %R1_Var
  %ln8BD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8BE = bitcast i64* %ln8BD to i64*
  %ln8BF = load i64, i64* %ln8BE, !tbaa !5
  %ln8BG = inttoptr i64 %ln8BF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8BH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8BG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8BH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.324274465 UTC

@_c8mn = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8mn$def to i8*)
define internal ghccc void @_c8mn$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8mn:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8i5 = alloca i64, i32 1
  %ls8i6 = alloca i64, i32 1
  %ls8i7 = alloca i64, i32 1
  %ls8i8 = alloca i64, i32 1
  %ls8i9 = alloca i64, i32 1
  %ls8iq = alloca i64, i32 1
  %ls8ir = alloca i64, i32 1
  %ls8iv = alloca i64, i32 1
  %ls8iz = alloca i64, i32 1
  %ls8iB = alloca i64, i32 1
  %ls8iA = alloca i64, i32 1
  %lc8mT = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8jD = alloca i64, i32 1
  %ls8jH = alloca i64, i32 1
  %ls8jI = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8k1 = alloca i64, i32 1
  %ls8k5 = alloca i64, i32 1
  %ls8k7 = alloca i64, i32 1
  %ls8k6 = alloca i64, i32 1
  %lc8oH = alloca i64, i32 1
  %ls8l9 = alloca i64, i32 1
  %ls8ld = alloca i64, i32 1
  %ls8le = alloca i64, i32 1
  %ls8io = alloca i64, i32 1
  %ln8BI = load i64*, i64** %Hp_Var
  %ln8BJ = getelementptr inbounds i64, i64* %ln8BI, i32 5
  %ln8BK = ptrtoint i64* %ln8BJ to i64
  %ln8BL = inttoptr i64 %ln8BK to i64*
  store i64* %ln8BL, i64** %Hp_Var
  %ln8BM = load i64*, i64** %Hp_Var
  %ln8BN = ptrtoint i64* %ln8BM to i64
  %ln8BO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8BP = bitcast i64* %ln8BO to i64*
  %ln8BQ = load i64, i64* %ln8BP, !tbaa !5
  %ln8BR = icmp ugt i64 %ln8BN, %ln8BQ
  %ln8BS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8BR, i1 0 )
  br i1 %ln8BS, label %c8qv, label %c8qu
c8qu:
  %ln8BT = load i64*, i64** %Sp_Var
  %ln8BU = getelementptr inbounds i64, i64* %ln8BT, i32 1
  %ln8BV = bitcast i64* %ln8BU to i64*
  %ln8BW = load i64, i64* %ln8BV, !tbaa !2
  store i64 %ln8BW, i64* %ls8i5
  %ln8BX = load i64*, i64** %Sp_Var
  %ln8BY = getelementptr inbounds i64, i64* %ln8BX, i32 2
  %ln8BZ = bitcast i64* %ln8BY to i64*
  %ln8C0 = load i64, i64* %ln8BZ, !tbaa !2
  store i64 %ln8C0, i64* %ls8i6
  %ln8C1 = load i64*, i64** %Sp_Var
  %ln8C2 = getelementptr inbounds i64, i64* %ln8C1, i32 3
  %ln8C3 = bitcast i64* %ln8C2 to i64*
  %ln8C4 = load i64, i64* %ln8C3, !tbaa !2
  store i64 %ln8C4, i64* %ls8i7
  %ln8C5 = load i64*, i64** %Sp_Var
  %ln8C6 = getelementptr inbounds i64, i64* %ln8C5, i32 4
  %ln8C7 = bitcast i64* %ln8C6 to i64*
  %ln8C8 = load i64, i64* %ln8C7, !tbaa !2
  store i64 %ln8C8, i64* %ls8i8
  %ln8C9 = load i64*, i64** %Sp_Var
  %ln8Ca = getelementptr inbounds i64, i64* %ln8C9, i32 5
  %ln8Cb = bitcast i64* %ln8Ca to i64*
  %ln8Cc = load i64, i64* %ln8Cb, !tbaa !2
  store i64 %ln8Cc, i64* %ls8i9
  %ln8Cd = load i64, i64* %ls8i5
  %ln8Ce = load i64, i64* %ls8i5
  %ln8Cf = mul i64 %ln8Cd, %ln8Ce
  store i64 %ln8Cf, i64* %ls8iq
  %ln8Cg = load i64, i64* %ls8i5
  %ln8Ch = load i64, i64* %ls8i5
  %ln8Ci = mul i64 %ln8Cg, %ln8Ch
  %ln8Cj = load i64, i64* %ls8i5
  %ln8Ck = add i64 %ln8Ci, %ln8Cj
  store i64 %ln8Ck, i64* %ls8ir
  %ln8Cl = load i64, i64* %ls8ir
  %ln8Cm = load i64, i64* %ls8iq
  %ln8Cn = icmp sge i64 %ln8Cl, %ln8Cm
  %ln8Co = zext i1 %ln8Cn to i64
  switch i64 %ln8Co, label %c8rw [i64 1, label %c8sw]
c8rw:
  %ln8Cp = load i64, i64* %ls8ir
  %ln8Cq = icmp sgt i64 99999999, %ln8Cp
  %ln8Cr = zext i1 %ln8Cq to i64
  switch i64 %ln8Cr, label %c8r8 [i64 1, label %c8ru]
c8r8:
  %ln8Cs = load i64, i64* %ls8iq
  %ln8Ct = ashr i64 %ln8Cs, 3
  store i64 %ln8Ct, i64* %ls8iv
  %ln8Cu = load i64, i64* %ls8i9
  %ln8Cv = add i64 %ln8Cu, 16
  %ln8Cw = load i64, i64* %ls8i7
  %ln8Cx = load i64, i64* %ls8iv
  %ln8Cy = add i64 %ln8Cw, %ln8Cx
  %ln8Cz = add i64 %ln8Cv, %ln8Cy
  %ln8CA = inttoptr i64 %ln8Cz to i8*
  %ln8CB = load i8, i8* %ln8CA, !tbaa !1
  %ln8CC = sext i8 %ln8CB to i64
  store i64 %ln8CC, i64* %ls8iz
  %ln8CE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8iD_info$def to i64
  %ln8CD = load i64*, i64** %Hp_Var
  %ln8CF = getelementptr inbounds i64, i64* %ln8CD, i32 -4
  store i64 %ln8CE, i64* %ln8CF, !tbaa !3
  %ln8CH = load i64, i64* %ls8i9
  %ln8CG = load i64*, i64** %Hp_Var
  %ln8CI = getelementptr inbounds i64, i64* %ln8CG, i32 -3
  store i64 %ln8CH, i64* %ln8CI, !tbaa !3
  %ln8CK = load i64, i64* %ls8i7
  %ln8CJ = load i64*, i64** %Hp_Var
  %ln8CL = getelementptr inbounds i64, i64* %ln8CJ, i32 -2
  store i64 %ln8CK, i64* %ln8CL, !tbaa !3
  %ln8CM = load i64, i64* %ls8ir
  %ln8CN = load i64, i64* %ls8iq
  %ln8CO = sub i64 %ln8CM, %ln8CN
  store i64 %ln8CO, i64* %ls8iB
  %ln8CQ = load i64, i64* %ls8iB
  %ln8CP = load i64*, i64** %Hp_Var
  %ln8CR = getelementptr inbounds i64, i64* %ln8CP, i32 -1
  store i64 %ln8CQ, i64* %ln8CR, !tbaa !3
  %ln8CT = load i64, i64* %ls8iB
  %ln8CU = sub i64 99999999, %ln8CT
  %ln8CS = load i64*, i64** %Hp_Var
  %ln8CV = getelementptr inbounds i64, i64* %ln8CS, i32 0
  store i64 %ln8CU, i64* %ln8CV, !tbaa !3
  %ln8CW = load i64, i64* %ls8iq
  %ln8CX = and i64 %ln8CW, 7
  store i64 %ln8CX, i64* %ls8iA
  %ln8CZ = load i64*, i64** %Hp_Var
  %ln8D0 = ptrtoint i64* %ln8CZ to i64
  %ln8D1 = add i64 %ln8D0, -30
  store i64 %ln8D1, i64* %lc8mT
  %ln8D2 = load i64, i64* %ls8iA
  %ln8D3 = icmp sge i64 %ln8D2, 64
  %ln8D4 = zext i1 %ln8D3 to i64
  switch i64 %ln8D4, label %c8qW [i64 1, label %c8r4]
c8qW:
  %ln8D5 = load i64, i64* %ls8i9
  %ln8D6 = add i64 %ln8D5, 16
  %ln8D7 = load i64, i64* %ls8i7
  %ln8D8 = load i64, i64* %ls8iv
  %ln8D9 = add i64 %ln8D7, %ln8D8
  %ln8Da = add i64 %ln8D6, %ln8D9
  %ln8Db = load i64, i64* %ls8iz
  %ln8Dc = load i64, i64* %ls8iA
  %ln8Dd = shl i64 1, %ln8Dc
  %ln8De = trunc i64 %ln8Dd to i8
  %ln8Df = sext i8 %ln8De to i64
  %ln8Dg = or i64 %ln8Db, %ln8Df
  %ln8Dh = trunc i64 %ln8Dg to i8
  %ln8Di = inttoptr i64 %ln8Da to i8*
  store i8 %ln8Dh, i8* %ln8Di, !tbaa !1
  %ln8Dk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qU_info$def to i64
  %ln8Dj = load i64*, i64** %Sp_Var
  %ln8Dl = getelementptr inbounds i64, i64* %ln8Dj, i32 0
  store i64 %ln8Dk, i64* %ln8Dl, !tbaa !2
  %ln8Dm = load i64, i64* %ls8ir
  store i64 %ln8Dm, i64* %R2_Var
  %ln8Dn = load i64, i64* %lc8mT
  store i64 %ln8Dn, i64* %R1_Var
  %ln8Do = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8iD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dp = load i64*, i64** %Sp_Var
  %ln8Dq = load i64*, i64** %Hp_Var
  %ln8Dr = load i64, i64* %R1_Var
  %ln8Ds = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Do( i64* %Base_Arg, i64* %ln8Dp, i64* %ln8Dq, i64 %ln8Dr, i64 %ln8Ds, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8r4:
  %ln8Dt = load i64, i64* %ls8i9
  %ln8Du = add i64 %ln8Dt, 16
  %ln8Dv = load i64, i64* %ls8i7
  %ln8Dw = load i64, i64* %ls8iv
  %ln8Dx = add i64 %ln8Dv, %ln8Dw
  %ln8Dy = add i64 %ln8Du, %ln8Dx
  %ln8Dz = load i64, i64* %ls8iz
  %ln8DA = trunc i64 %ln8Dz to i8
  %ln8DB = inttoptr i64 %ln8Dy to i8*
  store i8 %ln8DA, i8* %ln8DB, !tbaa !1
  %ln8DD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r3_info$def to i64
  %ln8DC = load i64*, i64** %Sp_Var
  %ln8DE = getelementptr inbounds i64, i64* %ln8DC, i32 0
  store i64 %ln8DD, i64* %ln8DE, !tbaa !2
  %ln8DF = load i64, i64* %ls8ir
  store i64 %ln8DF, i64* %R2_Var
  %ln8DG = load i64, i64* %lc8mT
  store i64 %ln8DG, i64* %R1_Var
  %ln8DH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8iD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DI = load i64*, i64** %Sp_Var
  %ln8DJ = load i64*, i64** %Hp_Var
  %ln8DK = load i64, i64* %R1_Var
  %ln8DL = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DH( i64* %Base_Arg, i64* %ln8DI, i64* %ln8DJ, i64 %ln8DK, i64 %ln8DL, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ru:
  %ln8DM = load i64, i64* %ls8iq
  %ln8DN = icmp sgt i64 99999999, %ln8DM
  %ln8DO = zext i1 %ln8DN to i64
  switch i64 %ln8DO, label %c8rs [i64 1, label %c8rt]
c8rs:
  %ln8DP = load i64, i64* %ls8iq
  %ln8DQ = ashr i64 %ln8DP, 3
  store i64 %ln8DQ, i64* %ls8jD
  %ln8DR = load i64, i64* %ls8i9
  %ln8DS = add i64 %ln8DR, 16
  %ln8DT = load i64, i64* %ls8i7
  %ln8DU = load i64, i64* %ls8jD
  %ln8DV = add i64 %ln8DT, %ln8DU
  %ln8DW = add i64 %ln8DS, %ln8DV
  %ln8DX = inttoptr i64 %ln8DW to i8*
  %ln8DY = load i8, i8* %ln8DX, !tbaa !1
  %ln8DZ = sext i8 %ln8DY to i64
  store i64 %ln8DZ, i64* %ls8jH
  %ln8E0 = load i64, i64* %ls8iq
  %ln8E1 = and i64 %ln8E0, 7
  store i64 %ln8E1, i64* %ls8jI
  %ln8E2 = load i64, i64* %ls8jI
  %ln8E3 = icmp sge i64 %ln8E2, 64
  %ln8E4 = zext i1 %ln8E3 to i64
  switch i64 %ln8E4, label %c8rp [i64 1, label %c8rq]
c8rp:
  %ln8E5 = load i64, i64* %ls8i9
  %ln8E6 = add i64 %ln8E5, 16
  %ln8E7 = load i64, i64* %ls8i7
  %ln8E8 = load i64, i64* %ls8jD
  %ln8E9 = add i64 %ln8E7, %ln8E8
  %ln8Ea = add i64 %ln8E6, %ln8E9
  %ln8Eb = load i64, i64* %ls8jH
  %ln8Ec = load i64, i64* %ls8jI
  %ln8Ed = shl i64 1, %ln8Ec
  %ln8Ee = trunc i64 %ln8Ed to i8
  %ln8Ef = sext i8 %ln8Ee to i64
  %ln8Eg = or i64 %ln8Eb, %ln8Ef
  %ln8Eh = trunc i64 %ln8Eg to i8
  %ln8Ei = inttoptr i64 %ln8Ea to i8*
  store i8 %ln8Eh, i8* %ln8Ei, !tbaa !1
  %ln8Ej = load i64*, i64** %Hp_Var
  %ln8Ek = getelementptr inbounds i64, i64* %ln8Ej, i32 -5
  %ln8El = ptrtoint i64* %ln8Ek to i64
  %ln8Em = inttoptr i64 %ln8El to i64*
  store i64* %ln8Em, i64** %Hp_Var
  %ln8Eo = load i64, i64* %ls8i5
  %ln8Ep = add i64 %ln8Eo, 1
  %ln8En = load i64*, i64** %Sp_Var
  %ln8Eq = getelementptr inbounds i64, i64* %ln8En, i32 1
  store i64 %ln8Ep, i64* %ln8Eq, !tbaa !2
  %ln8Es = load i64, i64* %ls8i6
  %ln8Et = add i64 %ln8Es, 1
  %ln8Er = load i64*, i64** %Sp_Var
  %ln8Eu = getelementptr inbounds i64, i64* %ln8Er, i32 2
  store i64 %ln8Et, i64* %ln8Eu, !tbaa !2
  %ln8Ew = load i64, i64* %ls8i7
  %ln8Ev = load i64*, i64** %Sp_Var
  %ln8Ex = getelementptr inbounds i64, i64* %ln8Ev, i32 3
  store i64 %ln8Ew, i64* %ln8Ex, !tbaa !2
  %ln8Ez = load i64, i64* %ls8i8
  %ln8Ey = load i64*, i64** %Sp_Var
  %ln8EA = getelementptr inbounds i64, i64* %ln8Ey, i32 4
  store i64 %ln8Ez, i64* %ln8EA, !tbaa !2
  %ln8EC = load i64, i64* %ls8i9
  %ln8EB = load i64*, i64** %Sp_Var
  %ln8ED = getelementptr inbounds i64, i64* %ln8EB, i32 5
  store i64 %ln8EC, i64* %ln8ED, !tbaa !2
  %ln8EE = load i64*, i64** %Sp_Var
  %ln8EF = getelementptr inbounds i64, i64* %ln8EE, i32 1
  %ln8EG = ptrtoint i64* %ln8EF to i64
  %ln8EH = inttoptr i64 %ln8EG to i64*
  store i64* %ln8EH, i64** %Sp_Var
  br label %u8uz
u8uz:
  %ln8EI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8EJ = load i64*, i64** %Sp_Var
  %ln8EK = load i64*, i64** %Hp_Var
  %ln8EL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EI( i64* %Base_Arg, i64* %ln8EJ, i64* %ln8EK, i64 %ln8EL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rq:
  %ln8EM = load i64, i64* %ls8i9
  %ln8EN = add i64 %ln8EM, 16
  %ln8EO = load i64, i64* %ls8i7
  %ln8EP = load i64, i64* %ls8jD
  %ln8EQ = add i64 %ln8EO, %ln8EP
  %ln8ER = add i64 %ln8EN, %ln8EQ
  %ln8ES = load i64, i64* %ls8jH
  %ln8ET = trunc i64 %ln8ES to i8
  %ln8EU = inttoptr i64 %ln8ER to i8*
  store i8 %ln8ET, i8* %ln8EU, !tbaa !1
  %ln8EV = load i64*, i64** %Hp_Var
  %ln8EW = getelementptr inbounds i64, i64* %ln8EV, i32 -5
  %ln8EX = ptrtoint i64* %ln8EW to i64
  %ln8EY = inttoptr i64 %ln8EX to i64*
  store i64* %ln8EY, i64** %Hp_Var
  %ln8F0 = load i64, i64* %ls8i5
  %ln8F1 = add i64 %ln8F0, 1
  %ln8EZ = load i64*, i64** %Sp_Var
  %ln8F2 = getelementptr inbounds i64, i64* %ln8EZ, i32 1
  store i64 %ln8F1, i64* %ln8F2, !tbaa !2
  %ln8F4 = load i64, i64* %ls8i6
  %ln8F5 = add i64 %ln8F4, 1
  %ln8F3 = load i64*, i64** %Sp_Var
  %ln8F6 = getelementptr inbounds i64, i64* %ln8F3, i32 2
  store i64 %ln8F5, i64* %ln8F6, !tbaa !2
  %ln8F8 = load i64, i64* %ls8i7
  %ln8F7 = load i64*, i64** %Sp_Var
  %ln8F9 = getelementptr inbounds i64, i64* %ln8F7, i32 3
  store i64 %ln8F8, i64* %ln8F9, !tbaa !2
  %ln8Fb = load i64, i64* %ls8i8
  %ln8Fa = load i64*, i64** %Sp_Var
  %ln8Fc = getelementptr inbounds i64, i64* %ln8Fa, i32 4
  store i64 %ln8Fb, i64* %ln8Fc, !tbaa !2
  %ln8Fe = load i64, i64* %ls8i9
  %ln8Fd = load i64*, i64** %Sp_Var
  %ln8Ff = getelementptr inbounds i64, i64* %ln8Fd, i32 5
  store i64 %ln8Fe, i64* %ln8Ff, !tbaa !2
  %ln8Fg = load i64*, i64** %Sp_Var
  %ln8Fh = getelementptr inbounds i64, i64* %ln8Fg, i32 1
  %ln8Fi = ptrtoint i64* %ln8Fh to i64
  %ln8Fj = inttoptr i64 %ln8Fi to i64*
  store i64* %ln8Fj, i64** %Sp_Var
  br label %u8uz
c8rt:
  %ln8Fk = load i64*, i64** %Hp_Var
  %ln8Fl = getelementptr inbounds i64, i64* %ln8Fk, i32 -5
  %ln8Fm = ptrtoint i64* %ln8Fl to i64
  %ln8Fn = inttoptr i64 %ln8Fm to i64*
  store i64* %ln8Fn, i64** %Hp_Var
  %ln8Fp = load i64, i64* %ls8i5
  %ln8Fq = add i64 %ln8Fp, 1
  %ln8Fo = load i64*, i64** %Sp_Var
  %ln8Fr = getelementptr inbounds i64, i64* %ln8Fo, i32 1
  store i64 %ln8Fq, i64* %ln8Fr, !tbaa !2
  %ln8Ft = load i64, i64* %ls8i6
  %ln8Fu = add i64 %ln8Ft, 1
  %ln8Fs = load i64*, i64** %Sp_Var
  %ln8Fv = getelementptr inbounds i64, i64* %ln8Fs, i32 2
  store i64 %ln8Fu, i64* %ln8Fv, !tbaa !2
  %ln8Fx = load i64, i64* %ls8i7
  %ln8Fw = load i64*, i64** %Sp_Var
  %ln8Fy = getelementptr inbounds i64, i64* %ln8Fw, i32 3
  store i64 %ln8Fx, i64* %ln8Fy, !tbaa !2
  %ln8FA = load i64, i64* %ls8i8
  %ln8Fz = load i64*, i64** %Sp_Var
  %ln8FB = getelementptr inbounds i64, i64* %ln8Fz, i32 4
  store i64 %ln8FA, i64* %ln8FB, !tbaa !2
  %ln8FD = load i64, i64* %ls8i9
  %ln8FC = load i64*, i64** %Sp_Var
  %ln8FE = getelementptr inbounds i64, i64* %ln8FC, i32 5
  store i64 %ln8FD, i64* %ln8FE, !tbaa !2
  %ln8FF = load i64*, i64** %Sp_Var
  %ln8FG = getelementptr inbounds i64, i64* %ln8FF, i32 1
  %ln8FH = ptrtoint i64* %ln8FG to i64
  %ln8FI = inttoptr i64 %ln8FH to i64*
  store i64* %ln8FI, i64** %Sp_Var
  br label %u8uz
c8sw:
  %ln8FJ = load i64, i64* %ls8ir
  %ln8FK = icmp slt i64 99999999, %ln8FJ
  %ln8FL = zext i1 %ln8FK to i64
  switch i64 %ln8FL, label %c8s9 [i64 1, label %c8sv]
c8s9:
  %ln8FM = load i64, i64* %ls8iq
  %ln8FN = ashr i64 %ln8FM, 3
  store i64 %ln8FN, i64* %ls8k1
  %ln8FO = load i64, i64* %ls8i9
  %ln8FP = add i64 %ln8FO, 16
  %ln8FQ = load i64, i64* %ls8i7
  %ln8FR = load i64, i64* %ls8k1
  %ln8FS = add i64 %ln8FQ, %ln8FR
  %ln8FT = add i64 %ln8FP, %ln8FS
  %ln8FU = inttoptr i64 %ln8FT to i8*
  %ln8FV = load i8, i8* %ln8FU, !tbaa !1
  %ln8FW = sext i8 %ln8FV to i64
  store i64 %ln8FW, i64* %ls8k5
  %ln8FY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8k9_info$def to i64
  %ln8FX = load i64*, i64** %Hp_Var
  %ln8FZ = getelementptr inbounds i64, i64* %ln8FX, i32 -4
  store i64 %ln8FY, i64* %ln8FZ, !tbaa !3
  %ln8G1 = load i64, i64* %ls8i9
  %ln8G0 = load i64*, i64** %Hp_Var
  %ln8G2 = getelementptr inbounds i64, i64* %ln8G0, i32 -3
  store i64 %ln8G1, i64* %ln8G2, !tbaa !3
  %ln8G4 = load i64, i64* %ls8i7
  %ln8G3 = load i64*, i64** %Hp_Var
  %ln8G5 = getelementptr inbounds i64, i64* %ln8G3, i32 -2
  store i64 %ln8G4, i64* %ln8G5, !tbaa !3
  %ln8G6 = load i64, i64* %ls8ir
  %ln8G7 = load i64, i64* %ls8iq
  %ln8G8 = sub i64 %ln8G6, %ln8G7
  store i64 %ln8G8, i64* %ls8k7
  %ln8Ga = load i64, i64* %ls8k7
  %ln8G9 = load i64*, i64** %Hp_Var
  %ln8Gb = getelementptr inbounds i64, i64* %ln8G9, i32 -1
  store i64 %ln8Ga, i64* %ln8Gb, !tbaa !3
  %ln8Gd = load i64, i64* %ls8k7
  %ln8Ge = sub i64 99999999, %ln8Gd
  %ln8Gc = load i64*, i64** %Hp_Var
  %ln8Gf = getelementptr inbounds i64, i64* %ln8Gc, i32 0
  store i64 %ln8Ge, i64* %ln8Gf, !tbaa !3
  %ln8Gg = load i64, i64* %ls8iq
  %ln8Gh = and i64 %ln8Gg, 7
  store i64 %ln8Gh, i64* %ls8k6
  %ln8Gj = load i64*, i64** %Hp_Var
  %ln8Gk = ptrtoint i64* %ln8Gj to i64
  %ln8Gl = add i64 %ln8Gk, -30
  store i64 %ln8Gl, i64* %lc8oH
  %ln8Gm = load i64, i64* %ls8k6
  %ln8Gn = icmp sge i64 %ln8Gm, 64
  %ln8Go = zext i1 %ln8Gn to i64
  switch i64 %ln8Go, label %c8rX [i64 1, label %c8s5]
c8rX:
  %ln8Gp = load i64, i64* %ls8i9
  %ln8Gq = add i64 %ln8Gp, 16
  %ln8Gr = load i64, i64* %ls8i7
  %ln8Gs = load i64, i64* %ls8k1
  %ln8Gt = add i64 %ln8Gr, %ln8Gs
  %ln8Gu = add i64 %ln8Gq, %ln8Gt
  %ln8Gv = load i64, i64* %ls8k5
  %ln8Gw = load i64, i64* %ls8k6
  %ln8Gx = shl i64 1, %ln8Gw
  %ln8Gy = trunc i64 %ln8Gx to i8
  %ln8Gz = sext i8 %ln8Gy to i64
  %ln8GA = or i64 %ln8Gv, %ln8Gz
  %ln8GB = trunc i64 %ln8GA to i8
  %ln8GC = inttoptr i64 %ln8Gu to i8*
  store i8 %ln8GB, i8* %ln8GC, !tbaa !1
  %ln8GE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rV_info$def to i64
  %ln8GD = load i64*, i64** %Sp_Var
  %ln8GF = getelementptr inbounds i64, i64* %ln8GD, i32 0
  store i64 %ln8GE, i64* %ln8GF, !tbaa !2
  %ln8GG = load i64, i64* %ls8ir
  store i64 %ln8GG, i64* %R2_Var
  %ln8GH = load i64, i64* %lc8oH
  store i64 %ln8GH, i64* %R1_Var
  %ln8GI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8k9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GJ = load i64*, i64** %Sp_Var
  %ln8GK = load i64*, i64** %Hp_Var
  %ln8GL = load i64, i64* %R1_Var
  %ln8GM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GI( i64* %Base_Arg, i64* %ln8GJ, i64* %ln8GK, i64 %ln8GL, i64 %ln8GM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8s5:
  %ln8GN = load i64, i64* %ls8i9
  %ln8GO = add i64 %ln8GN, 16
  %ln8GP = load i64, i64* %ls8i7
  %ln8GQ = load i64, i64* %ls8k1
  %ln8GR = add i64 %ln8GP, %ln8GQ
  %ln8GS = add i64 %ln8GO, %ln8GR
  %ln8GT = load i64, i64* %ls8k5
  %ln8GU = trunc i64 %ln8GT to i8
  %ln8GV = inttoptr i64 %ln8GS to i8*
  store i8 %ln8GU, i8* %ln8GV, !tbaa !1
  %ln8GX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s4_info$def to i64
  %ln8GW = load i64*, i64** %Sp_Var
  %ln8GY = getelementptr inbounds i64, i64* %ln8GW, i32 0
  store i64 %ln8GX, i64* %ln8GY, !tbaa !2
  %ln8GZ = load i64, i64* %ls8ir
  store i64 %ln8GZ, i64* %R2_Var
  %ln8H0 = load i64, i64* %lc8oH
  store i64 %ln8H0, i64* %R1_Var
  %ln8H1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8k9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8H2 = load i64*, i64** %Sp_Var
  %ln8H3 = load i64*, i64** %Hp_Var
  %ln8H4 = load i64, i64* %R1_Var
  %ln8H5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8H1( i64* %Base_Arg, i64* %ln8H2, i64* %ln8H3, i64 %ln8H4, i64 %ln8H5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sv:
  %ln8H6 = load i64, i64* %ls8iq
  %ln8H7 = icmp slt i64 99999999, %ln8H6
  %ln8H8 = zext i1 %ln8H7 to i64
  switch i64 %ln8H8, label %c8st [i64 1, label %c8su]
c8st:
  %ln8H9 = load i64, i64* %ls8iq
  %ln8Ha = ashr i64 %ln8H9, 3
  store i64 %ln8Ha, i64* %ls8l9
  %ln8Hb = load i64, i64* %ls8i9
  %ln8Hc = add i64 %ln8Hb, 16
  %ln8Hd = load i64, i64* %ls8i7
  %ln8He = load i64, i64* %ls8l9
  %ln8Hf = add i64 %ln8Hd, %ln8He
  %ln8Hg = add i64 %ln8Hc, %ln8Hf
  %ln8Hh = inttoptr i64 %ln8Hg to i8*
  %ln8Hi = load i8, i8* %ln8Hh, !tbaa !1
  %ln8Hj = sext i8 %ln8Hi to i64
  store i64 %ln8Hj, i64* %ls8ld
  %ln8Hk = load i64, i64* %ls8iq
  %ln8Hl = and i64 %ln8Hk, 7
  store i64 %ln8Hl, i64* %ls8le
  %ln8Hm = load i64, i64* %ls8le
  %ln8Hn = icmp sge i64 %ln8Hm, 64
  %ln8Ho = zext i1 %ln8Hn to i64
  switch i64 %ln8Ho, label %c8sq [i64 1, label %c8sr]
c8sq:
  %ln8Hp = load i64, i64* %ls8i9
  %ln8Hq = add i64 %ln8Hp, 16
  %ln8Hr = load i64, i64* %ls8i7
  %ln8Hs = load i64, i64* %ls8l9
  %ln8Ht = add i64 %ln8Hr, %ln8Hs
  %ln8Hu = add i64 %ln8Hq, %ln8Ht
  %ln8Hv = load i64, i64* %ls8ld
  %ln8Hw = load i64, i64* %ls8le
  %ln8Hx = shl i64 1, %ln8Hw
  %ln8Hy = trunc i64 %ln8Hx to i8
  %ln8Hz = sext i8 %ln8Hy to i64
  %ln8HA = or i64 %ln8Hv, %ln8Hz
  %ln8HB = trunc i64 %ln8HA to i8
  %ln8HC = inttoptr i64 %ln8Hu to i8*
  store i8 %ln8HB, i8* %ln8HC, !tbaa !1
  %ln8HD = load i64*, i64** %Hp_Var
  %ln8HE = getelementptr inbounds i64, i64* %ln8HD, i32 -5
  %ln8HF = ptrtoint i64* %ln8HE to i64
  %ln8HG = inttoptr i64 %ln8HF to i64*
  store i64* %ln8HG, i64** %Hp_Var
  %ln8HI = load i64, i64* %ls8i5
  %ln8HJ = add i64 %ln8HI, 1
  %ln8HH = load i64*, i64** %Sp_Var
  %ln8HK = getelementptr inbounds i64, i64* %ln8HH, i32 1
  store i64 %ln8HJ, i64* %ln8HK, !tbaa !2
  %ln8HM = load i64, i64* %ls8i6
  %ln8HN = add i64 %ln8HM, 1
  %ln8HL = load i64*, i64** %Sp_Var
  %ln8HO = getelementptr inbounds i64, i64* %ln8HL, i32 2
  store i64 %ln8HN, i64* %ln8HO, !tbaa !2
  %ln8HQ = load i64, i64* %ls8i7
  %ln8HP = load i64*, i64** %Sp_Var
  %ln8HR = getelementptr inbounds i64, i64* %ln8HP, i32 3
  store i64 %ln8HQ, i64* %ln8HR, !tbaa !2
  %ln8HT = load i64, i64* %ls8i8
  %ln8HS = load i64*, i64** %Sp_Var
  %ln8HU = getelementptr inbounds i64, i64* %ln8HS, i32 4
  store i64 %ln8HT, i64* %ln8HU, !tbaa !2
  %ln8HW = load i64, i64* %ls8i9
  %ln8HV = load i64*, i64** %Sp_Var
  %ln8HX = getelementptr inbounds i64, i64* %ln8HV, i32 5
  store i64 %ln8HW, i64* %ln8HX, !tbaa !2
  %ln8HY = load i64*, i64** %Sp_Var
  %ln8HZ = getelementptr inbounds i64, i64* %ln8HY, i32 1
  %ln8I0 = ptrtoint i64* %ln8HZ to i64
  %ln8I1 = inttoptr i64 %ln8I0 to i64*
  store i64* %ln8I1, i64** %Sp_Var
  br label %u8uz
c8sr:
  %ln8I2 = load i64, i64* %ls8i9
  %ln8I3 = add i64 %ln8I2, 16
  %ln8I4 = load i64, i64* %ls8i7
  %ln8I5 = load i64, i64* %ls8l9
  %ln8I6 = add i64 %ln8I4, %ln8I5
  %ln8I7 = add i64 %ln8I3, %ln8I6
  %ln8I8 = load i64, i64* %ls8ld
  %ln8I9 = trunc i64 %ln8I8 to i8
  %ln8Ia = inttoptr i64 %ln8I7 to i8*
  store i8 %ln8I9, i8* %ln8Ia, !tbaa !1
  %ln8Ib = load i64*, i64** %Hp_Var
  %ln8Ic = getelementptr inbounds i64, i64* %ln8Ib, i32 -5
  %ln8Id = ptrtoint i64* %ln8Ic to i64
  %ln8Ie = inttoptr i64 %ln8Id to i64*
  store i64* %ln8Ie, i64** %Hp_Var
  %ln8Ig = load i64, i64* %ls8i5
  %ln8Ih = add i64 %ln8Ig, 1
  %ln8If = load i64*, i64** %Sp_Var
  %ln8Ii = getelementptr inbounds i64, i64* %ln8If, i32 1
  store i64 %ln8Ih, i64* %ln8Ii, !tbaa !2
  %ln8Ik = load i64, i64* %ls8i6
  %ln8Il = add i64 %ln8Ik, 1
  %ln8Ij = load i64*, i64** %Sp_Var
  %ln8Im = getelementptr inbounds i64, i64* %ln8Ij, i32 2
  store i64 %ln8Il, i64* %ln8Im, !tbaa !2
  %ln8Io = load i64, i64* %ls8i7
  %ln8In = load i64*, i64** %Sp_Var
  %ln8Ip = getelementptr inbounds i64, i64* %ln8In, i32 3
  store i64 %ln8Io, i64* %ln8Ip, !tbaa !2
  %ln8Ir = load i64, i64* %ls8i8
  %ln8Iq = load i64*, i64** %Sp_Var
  %ln8Is = getelementptr inbounds i64, i64* %ln8Iq, i32 4
  store i64 %ln8Ir, i64* %ln8Is, !tbaa !2
  %ln8Iu = load i64, i64* %ls8i9
  %ln8It = load i64*, i64** %Sp_Var
  %ln8Iv = getelementptr inbounds i64, i64* %ln8It, i32 5
  store i64 %ln8Iu, i64* %ln8Iv, !tbaa !2
  %ln8Iw = load i64*, i64** %Sp_Var
  %ln8Ix = getelementptr inbounds i64, i64* %ln8Iw, i32 1
  %ln8Iy = ptrtoint i64* %ln8Ix to i64
  %ln8Iz = inttoptr i64 %ln8Iy to i64*
  store i64* %ln8Iz, i64** %Sp_Var
  br label %u8uz
c8su:
  %ln8IA = load i64*, i64** %Hp_Var
  %ln8IB = getelementptr inbounds i64, i64* %ln8IA, i32 -5
  %ln8IC = ptrtoint i64* %ln8IB to i64
  %ln8ID = inttoptr i64 %ln8IC to i64*
  store i64* %ln8ID, i64** %Hp_Var
  %ln8IF = load i64, i64* %ls8i5
  %ln8IG = add i64 %ln8IF, 1
  %ln8IE = load i64*, i64** %Sp_Var
  %ln8IH = getelementptr inbounds i64, i64* %ln8IE, i32 1
  store i64 %ln8IG, i64* %ln8IH, !tbaa !2
  %ln8IJ = load i64, i64* %ls8i6
  %ln8IK = add i64 %ln8IJ, 1
  %ln8II = load i64*, i64** %Sp_Var
  %ln8IL = getelementptr inbounds i64, i64* %ln8II, i32 2
  store i64 %ln8IK, i64* %ln8IL, !tbaa !2
  %ln8IN = load i64, i64* %ls8i7
  %ln8IM = load i64*, i64** %Sp_Var
  %ln8IO = getelementptr inbounds i64, i64* %ln8IM, i32 3
  store i64 %ln8IN, i64* %ln8IO, !tbaa !2
  %ln8IQ = load i64, i64* %ls8i8
  %ln8IP = load i64*, i64** %Sp_Var
  %ln8IR = getelementptr inbounds i64, i64* %ln8IP, i32 4
  store i64 %ln8IQ, i64* %ln8IR, !tbaa !2
  %ln8IT = load i64, i64* %ls8i9
  %ln8IS = load i64*, i64** %Sp_Var
  %ln8IU = getelementptr inbounds i64, i64* %ln8IS, i32 5
  store i64 %ln8IT, i64* %ln8IU, !tbaa !2
  %ln8IV = load i64*, i64** %Sp_Var
  %ln8IW = getelementptr inbounds i64, i64* %ln8IV, i32 1
  %ln8IX = ptrtoint i64* %ln8IW to i64
  %ln8IY = inttoptr i64 %ln8IX to i64*
  store i64* %ln8IY, i64** %Sp_Var
  br label %u8uz
c8qv:
  %ln8IZ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln8IZ, !tbaa !5
  %ln8J0 = load i64*, i64** %Sp_Var
  %ln8J1 = getelementptr inbounds i64, i64* %ln8J0, i32 0
  %ln8J2 = bitcast i64* %ln8J1 to i64*
  %ln8J3 = load i64, i64* %ln8J2, !tbaa !2
  store i64 %ln8J3, i64* %ls8io
  %ln8J5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8mm_info$def to i64
  %ln8J4 = load i64*, i64** %Sp_Var
  %ln8J6 = getelementptr inbounds i64, i64* %ln8J4, i32 0
  store i64 %ln8J5, i64* %ln8J6, !tbaa !2
  %ln8J7 = load i64, i64* %ls8io
  store i64 %ln8J7, i64* %R1_Var
  %ln8J8 = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8J9 = load i64*, i64** %Sp_Var
  %ln8Ja = load i64*, i64** %Hp_Var
  %ln8Jb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8J8( i64* %Base_Arg, i64* %ln8J9, i64* %ln8Ja, i64 %ln8Jb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.330853634 UTC

@c8mm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8mm_info$def to i8*)
define internal ghccc void @c8mm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8mm:
  %ln8Jc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8Jc, !tbaa !2
  %ln8Jd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8mn$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.331591824 UTC

@c8s4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s4_info$def to i8*)
define internal ghccc void @c8s4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8s4:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Jf = load i64*, i64** %Sp_Var
  %ln8Jg = getelementptr inbounds i64, i64* %ln8Jf, i32 1
  %ln8Jh = bitcast i64* %ln8Jg to i64*
  %ln8Ji = load i64, i64* %ln8Jh, !tbaa !2
  %ln8Jj = add i64 %ln8Ji, 1
  %ln8Je = load i64*, i64** %Sp_Var
  %ln8Jk = getelementptr inbounds i64, i64* %ln8Je, i32 1
  store i64 %ln8Jj, i64* %ln8Jk, !tbaa !2
  %ln8Jm = load i64*, i64** %Sp_Var
  %ln8Jn = getelementptr inbounds i64, i64* %ln8Jm, i32 2
  %ln8Jo = bitcast i64* %ln8Jn to i64*
  %ln8Jp = load i64, i64* %ln8Jo, !tbaa !2
  %ln8Jq = add i64 %ln8Jp, 1
  %ln8Jl = load i64*, i64** %Sp_Var
  %ln8Jr = getelementptr inbounds i64, i64* %ln8Jl, i32 2
  store i64 %ln8Jq, i64* %ln8Jr, !tbaa !2
  %ln8Jt = load i64*, i64** %Sp_Var
  %ln8Ju = getelementptr inbounds i64, i64* %ln8Jt, i32 3
  %ln8Jv = bitcast i64* %ln8Ju to i64*
  %ln8Jw = load i64, i64* %ln8Jv, !tbaa !2
  %ln8Js = load i64*, i64** %Sp_Var
  %ln8Jx = getelementptr inbounds i64, i64* %ln8Js, i32 3
  store i64 %ln8Jw, i64* %ln8Jx, !tbaa !2
  %ln8Jz = load i64*, i64** %Sp_Var
  %ln8JA = getelementptr inbounds i64, i64* %ln8Jz, i32 4
  %ln8JB = bitcast i64* %ln8JA to i64*
  %ln8JC = load i64, i64* %ln8JB, !tbaa !2
  %ln8Jy = load i64*, i64** %Sp_Var
  %ln8JD = getelementptr inbounds i64, i64* %ln8Jy, i32 4
  store i64 %ln8JC, i64* %ln8JD, !tbaa !2
  %ln8JF = load i64*, i64** %Sp_Var
  %ln8JG = getelementptr inbounds i64, i64* %ln8JF, i32 5
  %ln8JH = bitcast i64* %ln8JG to i64*
  %ln8JI = load i64, i64* %ln8JH, !tbaa !2
  %ln8JE = load i64*, i64** %Sp_Var
  %ln8JJ = getelementptr inbounds i64, i64* %ln8JE, i32 5
  store i64 %ln8JI, i64* %ln8JJ, !tbaa !2
  %ln8JK = load i64*, i64** %Sp_Var
  %ln8JL = getelementptr inbounds i64, i64* %ln8JK, i32 1
  %ln8JM = ptrtoint i64* %ln8JL to i64
  %ln8JN = inttoptr i64 %ln8JM to i64*
  store i64* %ln8JN, i64** %Sp_Var
  %ln8JO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8JP = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8JO( i64* %Base_Arg, i64* %ln8JP, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.332673522 UTC

@c8rV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rV_info$def to i8*)
define internal ghccc void @c8rV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8rV:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8JR = load i64*, i64** %Sp_Var
  %ln8JS = getelementptr inbounds i64, i64* %ln8JR, i32 1
  %ln8JT = bitcast i64* %ln8JS to i64*
  %ln8JU = load i64, i64* %ln8JT, !tbaa !2
  %ln8JV = add i64 %ln8JU, 1
  %ln8JQ = load i64*, i64** %Sp_Var
  %ln8JW = getelementptr inbounds i64, i64* %ln8JQ, i32 1
  store i64 %ln8JV, i64* %ln8JW, !tbaa !2
  %ln8JY = load i64*, i64** %Sp_Var
  %ln8JZ = getelementptr inbounds i64, i64* %ln8JY, i32 2
  %ln8K0 = bitcast i64* %ln8JZ to i64*
  %ln8K1 = load i64, i64* %ln8K0, !tbaa !2
  %ln8K2 = add i64 %ln8K1, 1
  %ln8JX = load i64*, i64** %Sp_Var
  %ln8K3 = getelementptr inbounds i64, i64* %ln8JX, i32 2
  store i64 %ln8K2, i64* %ln8K3, !tbaa !2
  %ln8K5 = load i64*, i64** %Sp_Var
  %ln8K6 = getelementptr inbounds i64, i64* %ln8K5, i32 3
  %ln8K7 = bitcast i64* %ln8K6 to i64*
  %ln8K8 = load i64, i64* %ln8K7, !tbaa !2
  %ln8K4 = load i64*, i64** %Sp_Var
  %ln8K9 = getelementptr inbounds i64, i64* %ln8K4, i32 3
  store i64 %ln8K8, i64* %ln8K9, !tbaa !2
  %ln8Kb = load i64*, i64** %Sp_Var
  %ln8Kc = getelementptr inbounds i64, i64* %ln8Kb, i32 4
  %ln8Kd = bitcast i64* %ln8Kc to i64*
  %ln8Ke = load i64, i64* %ln8Kd, !tbaa !2
  %ln8Ka = load i64*, i64** %Sp_Var
  %ln8Kf = getelementptr inbounds i64, i64* %ln8Ka, i32 4
  store i64 %ln8Ke, i64* %ln8Kf, !tbaa !2
  %ln8Kh = load i64*, i64** %Sp_Var
  %ln8Ki = getelementptr inbounds i64, i64* %ln8Kh, i32 5
  %ln8Kj = bitcast i64* %ln8Ki to i64*
  %ln8Kk = load i64, i64* %ln8Kj, !tbaa !2
  %ln8Kg = load i64*, i64** %Sp_Var
  %ln8Kl = getelementptr inbounds i64, i64* %ln8Kg, i32 5
  store i64 %ln8Kk, i64* %ln8Kl, !tbaa !2
  %ln8Km = load i64*, i64** %Sp_Var
  %ln8Kn = getelementptr inbounds i64, i64* %ln8Km, i32 1
  %ln8Ko = ptrtoint i64* %ln8Kn to i64
  %ln8Kp = inttoptr i64 %ln8Ko to i64*
  store i64* %ln8Kp, i64** %Sp_Var
  %ln8Kq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Kr = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Kq( i64* %Base_Arg, i64* %ln8Kr, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.333804719 UTC

@c8r3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r3_info$def to i8*)
define internal ghccc void @c8r3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8r3:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Kt = load i64*, i64** %Sp_Var
  %ln8Ku = getelementptr inbounds i64, i64* %ln8Kt, i32 1
  %ln8Kv = bitcast i64* %ln8Ku to i64*
  %ln8Kw = load i64, i64* %ln8Kv, !tbaa !2
  %ln8Kx = add i64 %ln8Kw, 1
  %ln8Ks = load i64*, i64** %Sp_Var
  %ln8Ky = getelementptr inbounds i64, i64* %ln8Ks, i32 1
  store i64 %ln8Kx, i64* %ln8Ky, !tbaa !2
  %ln8KA = load i64*, i64** %Sp_Var
  %ln8KB = getelementptr inbounds i64, i64* %ln8KA, i32 2
  %ln8KC = bitcast i64* %ln8KB to i64*
  %ln8KD = load i64, i64* %ln8KC, !tbaa !2
  %ln8KE = add i64 %ln8KD, 1
  %ln8Kz = load i64*, i64** %Sp_Var
  %ln8KF = getelementptr inbounds i64, i64* %ln8Kz, i32 2
  store i64 %ln8KE, i64* %ln8KF, !tbaa !2
  %ln8KH = load i64*, i64** %Sp_Var
  %ln8KI = getelementptr inbounds i64, i64* %ln8KH, i32 3
  %ln8KJ = bitcast i64* %ln8KI to i64*
  %ln8KK = load i64, i64* %ln8KJ, !tbaa !2
  %ln8KG = load i64*, i64** %Sp_Var
  %ln8KL = getelementptr inbounds i64, i64* %ln8KG, i32 3
  store i64 %ln8KK, i64* %ln8KL, !tbaa !2
  %ln8KN = load i64*, i64** %Sp_Var
  %ln8KO = getelementptr inbounds i64, i64* %ln8KN, i32 4
  %ln8KP = bitcast i64* %ln8KO to i64*
  %ln8KQ = load i64, i64* %ln8KP, !tbaa !2
  %ln8KM = load i64*, i64** %Sp_Var
  %ln8KR = getelementptr inbounds i64, i64* %ln8KM, i32 4
  store i64 %ln8KQ, i64* %ln8KR, !tbaa !2
  %ln8KT = load i64*, i64** %Sp_Var
  %ln8KU = getelementptr inbounds i64, i64* %ln8KT, i32 5
  %ln8KV = bitcast i64* %ln8KU to i64*
  %ln8KW = load i64, i64* %ln8KV, !tbaa !2
  %ln8KS = load i64*, i64** %Sp_Var
  %ln8KX = getelementptr inbounds i64, i64* %ln8KS, i32 5
  store i64 %ln8KW, i64* %ln8KX, !tbaa !2
  %ln8KY = load i64*, i64** %Sp_Var
  %ln8KZ = getelementptr inbounds i64, i64* %ln8KY, i32 1
  %ln8L0 = ptrtoint i64* %ln8KZ to i64
  %ln8L1 = inttoptr i64 %ln8L0 to i64*
  store i64* %ln8L1, i64** %Sp_Var
  %ln8L2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8L3 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8L2( i64* %Base_Arg, i64* %ln8L3, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.336471794 UTC

@c8qU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qU_info$def to i8*)
define internal ghccc void @c8qU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8qU:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8L5 = load i64*, i64** %Sp_Var
  %ln8L6 = getelementptr inbounds i64, i64* %ln8L5, i32 1
  %ln8L7 = bitcast i64* %ln8L6 to i64*
  %ln8L8 = load i64, i64* %ln8L7, !tbaa !2
  %ln8L9 = add i64 %ln8L8, 1
  %ln8L4 = load i64*, i64** %Sp_Var
  %ln8La = getelementptr inbounds i64, i64* %ln8L4, i32 1
  store i64 %ln8L9, i64* %ln8La, !tbaa !2
  %ln8Lc = load i64*, i64** %Sp_Var
  %ln8Ld = getelementptr inbounds i64, i64* %ln8Lc, i32 2
  %ln8Le = bitcast i64* %ln8Ld to i64*
  %ln8Lf = load i64, i64* %ln8Le, !tbaa !2
  %ln8Lg = add i64 %ln8Lf, 1
  %ln8Lb = load i64*, i64** %Sp_Var
  %ln8Lh = getelementptr inbounds i64, i64* %ln8Lb, i32 2
  store i64 %ln8Lg, i64* %ln8Lh, !tbaa !2
  %ln8Lj = load i64*, i64** %Sp_Var
  %ln8Lk = getelementptr inbounds i64, i64* %ln8Lj, i32 3
  %ln8Ll = bitcast i64* %ln8Lk to i64*
  %ln8Lm = load i64, i64* %ln8Ll, !tbaa !2
  %ln8Li = load i64*, i64** %Sp_Var
  %ln8Ln = getelementptr inbounds i64, i64* %ln8Li, i32 3
  store i64 %ln8Lm, i64* %ln8Ln, !tbaa !2
  %ln8Lp = load i64*, i64** %Sp_Var
  %ln8Lq = getelementptr inbounds i64, i64* %ln8Lp, i32 4
  %ln8Lr = bitcast i64* %ln8Lq to i64*
  %ln8Ls = load i64, i64* %ln8Lr, !tbaa !2
  %ln8Lo = load i64*, i64** %Sp_Var
  %ln8Lt = getelementptr inbounds i64, i64* %ln8Lo, i32 4
  store i64 %ln8Ls, i64* %ln8Lt, !tbaa !2
  %ln8Lv = load i64*, i64** %Sp_Var
  %ln8Lw = getelementptr inbounds i64, i64* %ln8Lv, i32 5
  %ln8Lx = bitcast i64* %ln8Lw to i64*
  %ln8Ly = load i64, i64* %ln8Lx, !tbaa !2
  %ln8Lu = load i64*, i64** %Sp_Var
  %ln8Lz = getelementptr inbounds i64, i64* %ln8Lu, i32 5
  store i64 %ln8Ly, i64* %ln8Lz, !tbaa !2
  %ln8LA = load i64*, i64** %Sp_Var
  %ln8LB = getelementptr inbounds i64, i64* %ln8LA, i32 1
  %ln8LC = ptrtoint i64* %ln8LB to i64
  %ln8LD = inttoptr i64 %ln8LC to i64*
  store i64* %ln8LD, i64** %Sp_Var
  %ln8LE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8lL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8LF = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8LE( i64* %Base_Arg, i64* %ln8LF, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.338959737 UTC

%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.339373671 UTC

@s8lI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8lI_info$def to i8*)
define internal ghccc void @s8lI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8LX:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8M8 = add i64 %R1_Arg, 16
  %ln8M9 = inttoptr i64 %ln8M8 to i64*
  %ln8Ma = load i64, i64* %ln8M9, !tbaa !4
  store i64 %ln8Ma, i64* %R2_Var
  %ln8Mb = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mc = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Mc, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.340182059 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)),i64 0), i64 4294967299, i64 0, i64 30064771086}>
{
c8M0:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Md = load i64*, i64** %Sp_Var
  %ln8Me = getelementptr inbounds i64, i64* %ln8Md, i32 -1
  %ln8Mf = ptrtoint i64* %ln8Me to i64
  %ln8Mg = icmp ult i64 %ln8Mf, %SpLim_Arg
  %ln8Mh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Mg, i1 0 )
  br i1 %ln8Mh, label %c8M1, label %c8M2
c8M2:
  %ln8Mj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LK_info$def to i64
  %ln8Mi = load i64*, i64** %Sp_Var
  %ln8Mk = getelementptr inbounds i64, i64* %ln8Mi, i32 -1
  store i64 %ln8Mj, i64* %ln8Mk, !tbaa !2
  store i64 12500000, i64* %R1_Var
  %ln8Ml = load i64*, i64** %Sp_Var
  %ln8Mm = getelementptr inbounds i64, i64* %ln8Ml, i32 -1
  %ln8Mn = ptrtoint i64* %ln8Mm to i64
  %ln8Mo = inttoptr i64 %ln8Mn to i64*
  store i64* %ln8Mo, i64** %Sp_Var
  %ln8Mp = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mq = load i64*, i64** %Sp_Var
  %ln8Mr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mp( i64* %Base_Arg, i64* %ln8Mq, i64* %Hp_Arg, i64 %ln8Mr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8M1:
  %ln8Ms = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln8Ms, i64* %R1_Var
  %ln8Mt = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Mu = bitcast i64* %ln8Mt to i64*
  %ln8Mv = load i64, i64* %ln8Mu, !tbaa !5
  %ln8Mw = inttoptr i64 %ln8Mv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mx = load i64*, i64** %Sp_Var
  %ln8My = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mw( i64* %Base_Arg, i64* %ln8Mx, i64* %Hp_Arg, i64 %ln8My, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.341407357 UTC

@c8LK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LK_info$def to i8*)
define internal ghccc void @c8LK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LK_info$def to i64)),i64 0), i64 0, i64 12884901918}>
{
c8LK:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Mz = add i64 %R1_Arg, 16
  %ln8MA = inttoptr i64 %ln8Mz to i8*
  %ln8MB = bitcast i8* @hsprimitive_memset_Word8 to void (i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i64, i64, i64) %ln8MB( i8* %ln8MA, i64 0, i64 12500000, i64 0 ) nounwind
  %ln8MC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LR_info$def to i64
  %ln8MD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8MC, i64* %ln8MD, !tbaa !2
  store i64 %R1_Arg, i64* %R6_Var
  store i64 12500000, i64* %R5_Var
  store i64 0, i64* %R4_Var
  store i64 0, i64* %R3_Var
  store i64 2, i64* %R2_Var
  %ln8ME = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwsievefn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MF = load i64, i64* %R2_Var
  %ln8MG = load i64, i64* %R3_Var
  %ln8MH = load i64, i64* %R4_Var
  %ln8MI = load i64, i64* %R5_Var
  %ln8MJ = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ME( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8MF, i64 %ln8MG, i64 %ln8MH, i64 %ln8MI, i64 %ln8MJ, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.342814776 UTC

@c8LR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LR_info$def to i8*)
define internal ghccc void @c8LR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8LR_info$def to i64)),i64 0), i64 0, i64 12884901918}>
{
c8LR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8MK = load i64*, i64** %Hp_Var
  %ln8ML = getelementptr inbounds i64, i64* %ln8MK, i32 3
  %ln8MM = ptrtoint i64* %ln8ML to i64
  %ln8MN = inttoptr i64 %ln8MM to i64*
  store i64* %ln8MN, i64** %Hp_Var
  %ln8MO = load i64*, i64** %Hp_Var
  %ln8MP = ptrtoint i64* %ln8MO to i64
  %ln8MQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8MR = bitcast i64* %ln8MQ to i64*
  %ln8MS = load i64, i64* %ln8MR, !tbaa !5
  %ln8MT = icmp ugt i64 %ln8MP, %ln8MS
  %ln8MU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8MT, i1 0 )
  br i1 %ln8MU, label %c8M6, label %c8M5
c8M5:
  %ln8MW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8lI_info$def to i64
  %ln8MV = load i64*, i64** %Hp_Var
  %ln8MX = getelementptr inbounds i64, i64* %ln8MV, i32 -2
  store i64 %ln8MW, i64* %ln8MX, !tbaa !3
  %ln8MZ = load i64, i64* %R1_Var
  %ln8MY = load i64*, i64** %Hp_Var
  %ln8N0 = getelementptr inbounds i64, i64* %ln8MY, i32 0
  store i64 %ln8MZ, i64* %ln8N0, !tbaa !3
  %ln8N1 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8N2 = add i64 %ln8N1, 2
  store i64 %ln8N2, i64* %R4_Var
  %ln8N3 = load i64*, i64** %Hp_Var
  %ln8N4 = getelementptr inbounds i64, i64* %ln8N3, i32 -2
  %ln8N5 = ptrtoint i64* %ln8N4 to i64
  store i64 %ln8N5, i64* %R3_Var
  %ln8N6 = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8N6, i64* %R2_Var
  %ln8N7 = load i64*, i64** %Sp_Var
  %ln8N8 = getelementptr inbounds i64, i64* %ln8N7, i32 1
  %ln8N9 = ptrtoint i64* %ln8N8 to i64
  %ln8Na = inttoptr i64 %ln8N9 to i64*
  store i64* %ln8Na, i64** %Sp_Var
  %ln8Nb = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Nc = load i64*, i64** %Sp_Var
  %ln8Nd = load i64*, i64** %Hp_Var
  %ln8Ne = load i64, i64* %R1_Var
  %ln8Nf = load i64, i64* %R2_Var
  %ln8Ng = load i64, i64* %R3_Var
  %ln8Nh = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nb( i64* %Base_Arg, i64* %ln8Nc, i64* %ln8Nd, i64 %ln8Ne, i64 %ln8Nf, i64 %ln8Ng, i64 %ln8Nh, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8M6:
  %ln8Ni = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Ni, !tbaa !5
  %ln8Nj = load i64, i64* %R1_Var
  store i64 %ln8Nj, i64* %R1_Var
  %ln8Nk = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Nl = load i64*, i64** %Sp_Var
  %ln8Nm = load i64*, i64** %Hp_Var
  %ln8Nn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nk( i64* %Base_Arg, i64* %ln8Nl, i64* %ln8Nm, i64 %ln8Nn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.344279189 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.344665136 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 4294967310}>
{
c8Ns:
  %ln8Nv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.345536946 UTC

%Main_main2_closure_struct = type <{i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.34599882 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 12884901902}>
{
c8NA:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8ND = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %ln8NE = add i64 %ln8ND, 1
  store i64 %ln8NE, i64* %R2_Var
  %ln8NF = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8NG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8NG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.346984398 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.347402172 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8M7_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)),i64 32), i64 4294967299, i64 0, i64 4294967310}>
{
c8NL:
  %ln8NO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:36:00.34804656 UTC

%S8M7_srt_struct = type <{i64, i64, i64, i64, i64}>
@S8M7_srt$def = internal constant %S8M7_srt_struct<{i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStr2_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64)}>
@S8M7_srt = internal alias i8, bitcast (%S8M7_srt_struct* @S8M7_srt$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:36:00.348274351 UTC

@hsprimitive_memset_Word8 = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@stg_gc_unbx_r1 = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@stg_gc_unpt_r1 = external global i8
@base_GHCziShow_zdfShowIntzuzdcshow_info = external global i8
@stg_newByteArrayzh = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_info = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@base_GHCziIOziHandleziText_hPutStr2_closure = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8


==================== LLVM Code ====================
2018-10-10 15:36:00.348519529 UTC

@llvm.used = appending constant [11 x i8*] [i8* bitcast (%S8M7_srt_struct* @S8M7_srt$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%Main_mainzuzdszdwsievefn_closure_struct* @Main_mainzuzdszdwsievefn_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)], section "llvm.metadata"

