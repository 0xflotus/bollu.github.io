
==================== LLVM Code ====================
2018-10-10 15:29:52.358900085 UTC

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"


==================== LLVM Code ====================
2018-10-10 15:29:52.359192964 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 15:29:52.359371665 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-10-10 15:29:52.36046939 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2018-10-10 15:29:52.360647305 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.360830636 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2018-10-10 15:29:52.361213274 UTC



==================== LLVM Code ====================
2018-10-10 15:29:52.361609203 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.362056986 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.362711795 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.363125593 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.363575626 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.37920257 UTC

%Main_mainzuzdszdwzdssievefn_closure_struct = type <{i64}>
@Main_mainzuzdszdwzdssievefn_closure$def = internal global %Main_mainzuzdszdwzdssievefn_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_info$def to i64)}>
@Main_mainzuzdszdwzdssievefn_closure = alias i8, bitcast (%Main_mainzuzdszdwzdssievefn_closure_struct* @Main_mainzuzdszdwzdssievefn_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.380051519 UTC

@Main_mainzuzdszdwzdssievefn_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_slow$def to i8*)
define ghccc void @Main_mainzuzdszdwzdssievefn_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8ro:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Ak = load i64*, i64** %Sp_Var
  %ln8Al = getelementptr inbounds i64, i64* %ln8Ak, i32 4
  %ln8Am = bitcast i64* %ln8Al to i64*
  %ln8An = load i64, i64* %ln8Am, !tbaa !2
  store i64 %ln8An, i64* %R6_Var
  %ln8Ao = load i64*, i64** %Sp_Var
  %ln8Ap = getelementptr inbounds i64, i64* %ln8Ao, i32 3
  %ln8Aq = bitcast i64* %ln8Ap to i64*
  %ln8Ar = load i64, i64* %ln8Aq, !tbaa !2
  store i64 %ln8Ar, i64* %R5_Var
  %ln8As = load i64*, i64** %Sp_Var
  %ln8At = getelementptr inbounds i64, i64* %ln8As, i32 2
  %ln8Au = bitcast i64* %ln8At to i64*
  %ln8Av = load i64, i64* %ln8Au, !tbaa !2
  store i64 %ln8Av, i64* %R4_Var
  %ln8Aw = load i64*, i64** %Sp_Var
  %ln8Ax = getelementptr inbounds i64, i64* %ln8Aw, i32 1
  %ln8Ay = bitcast i64* %ln8Ax to i64*
  %ln8Az = load i64, i64* %ln8Ay, !tbaa !2
  store i64 %ln8Az, i64* %R3_Var
  %ln8AA = load i64*, i64** %Sp_Var
  %ln8AB = getelementptr inbounds i64, i64* %ln8AA, i32 0
  %ln8AC = bitcast i64* %ln8AB to i64*
  %ln8AD = load i64, i64* %ln8AC, !tbaa !2
  store i64 %ln8AD, i64* %R2_Var
  %ln8AE = load i64, i64* %R1_Var
  store i64 %ln8AE, i64* %R1_Var
  %ln8AF = load i64*, i64** %Sp_Var
  %ln8AG = getelementptr inbounds i64, i64* %ln8AF, i32 5
  %ln8AH = ptrtoint i64* %ln8AG to i64
  %ln8AI = inttoptr i64 %ln8AH to i64*
  store i64* %ln8AI, i64** %Sp_Var
  %ln8AJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8AK = load i64*, i64** %Sp_Var
  %ln8AL = load i64, i64* %R1_Var
  %ln8AM = load i64, i64* %R2_Var
  %ln8AN = load i64, i64* %R3_Var
  %ln8AO = load i64, i64* %R4_Var
  %ln8AP = load i64, i64* %R5_Var
  %ln8AQ = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8AJ( i64* %Base_Arg, i64* %ln8AK, i64* %Hp_Arg, i64 %ln8AL, i64 %ln8AM, i64 %ln8AN, i64 %ln8AO, i64 %ln8AP, i64 %ln8AQ, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.38226348 UTC

@s8oh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8oh_info$def to i8*)
define internal ghccc void @s8oh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 12884901889, i64 8}>
{
c8sH:
  %ls8oi = alloca i64, i32 1
  %ls8oh = alloca i64, i32 1
  %ls8nN = alloca i64, i32 1
  %ls8nL = alloca i64, i32 1
  %ls8of = alloca i64, i32 1
  %ls8ol = alloca i64, i32 1
  %ls8op = alloca i64, i32 1
  %ls8oq = alloca i64, i32 1
  %ls8oE = alloca i64, i32 1
  %ls8oI = alloca i64, i32 1
  %ls8oJ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8oi
  %ln8AR = load i64, i64* %R1_Var
  store i64 %ln8AR, i64* %ls8oh
  br label %c8sz
c8sz:
  %ln8AS = load i64, i64* %ls8oh
  %ln8AT = add i64 %ln8AS, 6
  %ln8AU = inttoptr i64 %ln8AT to i64*
  %ln8AV = load i64, i64* %ln8AU, !tbaa !1
  store i64 %ln8AV, i64* %ls8nN
  %ln8AW = load i64, i64* %ls8oh
  %ln8AX = add i64 %ln8AW, 14
  %ln8AY = inttoptr i64 %ln8AX to i64*
  %ln8AZ = load i64, i64* %ln8AY, !tbaa !1
  store i64 %ln8AZ, i64* %ls8nL
  %ln8B0 = load i64, i64* %ls8oi
  %ln8B1 = load i64, i64* %ls8oh
  %ln8B2 = add i64 %ln8B1, 30
  %ln8B3 = inttoptr i64 %ln8B2 to i64*
  %ln8B4 = load i64, i64* %ln8B3, !tbaa !1
  %ln8B5 = icmp slt i64 %ln8B0, %ln8B4
  %ln8B6 = zext i1 %ln8B5 to i64
  switch i64 %ln8B6, label %c8sF [i64 1, label %c8sG]
c8sF:
  %ln8B7 = load i64, i64* %ls8oh
  %ln8B8 = add i64 %ln8B7, 22
  %ln8B9 = inttoptr i64 %ln8B8 to i64*
  %ln8Ba = load i64, i64* %ln8B9, !tbaa !1
  store i64 %ln8Ba, i64* %ls8of
  %ln8Bb = load i64, i64* %ls8oi
  %ln8Bc = ashr i64 %ln8Bb, 3
  store i64 %ln8Bc, i64* %ls8ol
  %ln8Bd = load i64, i64* %ls8nN
  %ln8Be = add i64 %ln8Bd, 16
  %ln8Bf = load i64, i64* %ls8nL
  %ln8Bg = load i64, i64* %ls8ol
  %ln8Bh = add i64 %ln8Bf, %ln8Bg
  %ln8Bi = add i64 %ln8Be, %ln8Bh
  %ln8Bj = inttoptr i64 %ln8Bi to i8*
  %ln8Bk = load i8, i8* %ln8Bj, !tbaa !1
  %ln8Bl = sext i8 %ln8Bk to i64
  store i64 %ln8Bl, i64* %ls8op
  %ln8Bm = load i64, i64* %ls8oi
  %ln8Bn = and i64 %ln8Bm, 7
  store i64 %ln8Bn, i64* %ls8oq
  %ln8Bo = load i64, i64* %ls8oq
  %ln8Bp = icmp sge i64 %ln8Bo, 64
  %ln8Bq = zext i1 %ln8Bp to i64
  switch i64 %ln8Bq, label %c8sX [i64 1, label %c8sY]
c8sX:
  %ln8Br = load i64, i64* %ls8nN
  %ln8Bs = add i64 %ln8Br, 16
  %ln8Bt = load i64, i64* %ls8nL
  %ln8Bu = load i64, i64* %ls8ol
  %ln8Bv = add i64 %ln8Bt, %ln8Bu
  %ln8Bw = add i64 %ln8Bs, %ln8Bv
  %ln8Bx = load i64, i64* %ls8op
  %ln8By = load i64, i64* %ls8oq
  %ln8Bz = shl i64 1, %ln8By
  %ln8BA = trunc i64 %ln8Bz to i8
  %ln8BB = sext i8 %ln8BA to i64
  %ln8BC = or i64 %ln8Bx, %ln8BB
  %ln8BD = trunc i64 %ln8BC to i8
  %ln8BE = inttoptr i64 %ln8Bw to i8*
  store i8 %ln8BD, i8* %ln8BE, !tbaa !1
  %ln8BF = load i64, i64* %ls8oi
  %ln8BG = load i64, i64* %ls8of
  %ln8BH = add i64 %ln8BF, %ln8BG
  store i64 %ln8BH, i64* %ls8oi
  br label %c8sz
c8sY:
  %ln8BI = load i64, i64* %ls8nN
  %ln8BJ = add i64 %ln8BI, 16
  %ln8BK = load i64, i64* %ls8nL
  %ln8BL = load i64, i64* %ls8ol
  %ln8BM = add i64 %ln8BK, %ln8BL
  %ln8BN = add i64 %ln8BJ, %ln8BM
  %ln8BO = load i64, i64* %ls8op
  %ln8BP = trunc i64 %ln8BO to i8
  %ln8BQ = inttoptr i64 %ln8BN to i8*
  store i8 %ln8BP, i8* %ln8BQ, !tbaa !1
  %ln8BR = load i64, i64* %ls8oi
  %ln8BS = load i64, i64* %ls8of
  %ln8BT = add i64 %ln8BR, %ln8BS
  store i64 %ln8BT, i64* %ls8oi
  br label %c8sz
c8sG:
  %ln8BU = load i64, i64* %ls8oi
  %ln8BV = ashr i64 %ln8BU, 3
  store i64 %ln8BV, i64* %ls8oE
  %ln8BW = load i64, i64* %ls8nN
  %ln8BX = add i64 %ln8BW, 16
  %ln8BY = load i64, i64* %ls8nL
  %ln8BZ = load i64, i64* %ls8oE
  %ln8C0 = add i64 %ln8BY, %ln8BZ
  %ln8C1 = add i64 %ln8BX, %ln8C0
  %ln8C2 = inttoptr i64 %ln8C1 to i8*
  %ln8C3 = load i8, i8* %ln8C2, !tbaa !1
  %ln8C4 = sext i8 %ln8C3 to i64
  store i64 %ln8C4, i64* %ls8oI
  %ln8C5 = load i64, i64* %ls8oi
  %ln8C6 = and i64 %ln8C5, 7
  store i64 %ln8C6, i64* %ls8oJ
  %ln8C7 = load i64, i64* %ls8oJ
  %ln8C8 = icmp sge i64 %ln8C7, 64
  %ln8C9 = zext i1 %ln8C8 to i64
  switch i64 %ln8C9, label %c8tc [i64 1, label %c8td]
c8tc:
  %ln8Ca = load i64, i64* %ls8nN
  %ln8Cb = add i64 %ln8Ca, 16
  %ln8Cc = load i64, i64* %ls8nL
  %ln8Cd = load i64, i64* %ls8oE
  %ln8Ce = add i64 %ln8Cc, %ln8Cd
  %ln8Cf = add i64 %ln8Cb, %ln8Ce
  %ln8Cg = load i64, i64* %ls8oI
  %ln8Ch = load i64, i64* %ls8oJ
  %ln8Ci = shl i64 1, %ln8Ch
  %ln8Cj = trunc i64 %ln8Ci to i8
  %ln8Ck = sext i8 %ln8Cj to i64
  %ln8Cl = or i64 %ln8Cg, %ln8Ck
  %ln8Cm = trunc i64 %ln8Cl to i8
  %ln8Cn = inttoptr i64 %ln8Cf to i8*
  store i8 %ln8Cm, i8* %ln8Cn, !tbaa !1
  %ln8Co = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8Cp = add i64 %ln8Co, 1
  store i64 %ln8Cp, i64* %R1_Var
  %ln8Cq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8Cr = bitcast i64* %ln8Cq to i64*
  %ln8Cs = load i64, i64* %ln8Cr, !tbaa !2
  %ln8Ct = inttoptr i64 %ln8Cs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Cu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ct( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Cu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8td:
  %ln8Cv = load i64, i64* %ls8nN
  %ln8Cw = add i64 %ln8Cv, 16
  %ln8Cx = load i64, i64* %ls8nL
  %ln8Cy = load i64, i64* %ls8oE
  %ln8Cz = add i64 %ln8Cx, %ln8Cy
  %ln8CA = add i64 %ln8Cw, %ln8Cz
  %ln8CB = load i64, i64* %ls8oI
  %ln8CC = trunc i64 %ln8CB to i8
  %ln8CD = inttoptr i64 %ln8CA to i8*
  store i8 %ln8CC, i8* %ln8CD, !tbaa !1
  %ln8CE = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8CF = add i64 %ln8CE, 1
  store i64 %ln8CF, i64* %R1_Var
  %ln8CG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8CH = bitcast i64* %ln8CG to i64*
  %ln8CI = load i64, i64* %ln8CH, !tbaa !2
  %ln8CJ = inttoptr i64 %ln8CI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8CK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8CJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8CK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.385546237 UTC

@s8pN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8pN_info$def to i8*)
define internal ghccc void @s8pN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 8589934596, i64 12884901889, i64 8}>
{
c8uv:
  %ls8pO = alloca i64, i32 1
  %ls8pN = alloca i64, i32 1
  %ls8nN = alloca i64, i32 1
  %ls8nL = alloca i64, i32 1
  %ls8pL = alloca i64, i32 1
  %ls8pR = alloca i64, i32 1
  %ls8pV = alloca i64, i32 1
  %ls8pW = alloca i64, i32 1
  %ls8qa = alloca i64, i32 1
  %ls8qe = alloca i64, i32 1
  %ls8qf = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  store i64 %R2_Arg, i64* %ls8pO
  %ln8CL = load i64, i64* %R1_Var
  store i64 %ln8CL, i64* %ls8pN
  br label %c8un
c8un:
  %ln8CM = load i64, i64* %ls8pN
  %ln8CN = add i64 %ln8CM, 6
  %ln8CO = inttoptr i64 %ln8CN to i64*
  %ln8CP = load i64, i64* %ln8CO, !tbaa !1
  store i64 %ln8CP, i64* %ls8nN
  %ln8CQ = load i64, i64* %ls8pN
  %ln8CR = add i64 %ln8CQ, 14
  %ln8CS = inttoptr i64 %ln8CR to i64*
  %ln8CT = load i64, i64* %ln8CS, !tbaa !1
  store i64 %ln8CT, i64* %ls8nL
  %ln8CU = load i64, i64* %ls8pO
  %ln8CV = load i64, i64* %ls8pN
  %ln8CW = add i64 %ln8CV, 30
  %ln8CX = inttoptr i64 %ln8CW to i64*
  %ln8CY = load i64, i64* %ln8CX, !tbaa !1
  %ln8CZ = icmp sgt i64 %ln8CU, %ln8CY
  %ln8D0 = zext i1 %ln8CZ to i64
  switch i64 %ln8D0, label %c8ut [i64 1, label %c8uu]
c8ut:
  %ln8D1 = load i64, i64* %ls8pN
  %ln8D2 = add i64 %ln8D1, 22
  %ln8D3 = inttoptr i64 %ln8D2 to i64*
  %ln8D4 = load i64, i64* %ln8D3, !tbaa !1
  store i64 %ln8D4, i64* %ls8pL
  %ln8D5 = load i64, i64* %ls8pO
  %ln8D6 = ashr i64 %ln8D5, 3
  store i64 %ln8D6, i64* %ls8pR
  %ln8D7 = load i64, i64* %ls8nN
  %ln8D8 = add i64 %ln8D7, 16
  %ln8D9 = load i64, i64* %ls8nL
  %ln8Da = load i64, i64* %ls8pR
  %ln8Db = add i64 %ln8D9, %ln8Da
  %ln8Dc = add i64 %ln8D8, %ln8Db
  %ln8Dd = inttoptr i64 %ln8Dc to i8*
  %ln8De = load i8, i8* %ln8Dd, !tbaa !1
  %ln8Df = sext i8 %ln8De to i64
  store i64 %ln8Df, i64* %ls8pV
  %ln8Dg = load i64, i64* %ls8pO
  %ln8Dh = and i64 %ln8Dg, 7
  store i64 %ln8Dh, i64* %ls8pW
  %ln8Di = load i64, i64* %ls8pW
  %ln8Dj = icmp sge i64 %ln8Di, 64
  %ln8Dk = zext i1 %ln8Dj to i64
  switch i64 %ln8Dk, label %c8uL [i64 1, label %c8uM]
c8uL:
  %ln8Dl = load i64, i64* %ls8nN
  %ln8Dm = add i64 %ln8Dl, 16
  %ln8Dn = load i64, i64* %ls8nL
  %ln8Do = load i64, i64* %ls8pR
  %ln8Dp = add i64 %ln8Dn, %ln8Do
  %ln8Dq = add i64 %ln8Dm, %ln8Dp
  %ln8Dr = load i64, i64* %ls8pV
  %ln8Ds = load i64, i64* %ls8pW
  %ln8Dt = shl i64 1, %ln8Ds
  %ln8Du = trunc i64 %ln8Dt to i8
  %ln8Dv = sext i8 %ln8Du to i64
  %ln8Dw = or i64 %ln8Dr, %ln8Dv
  %ln8Dx = trunc i64 %ln8Dw to i8
  %ln8Dy = inttoptr i64 %ln8Dq to i8*
  store i8 %ln8Dx, i8* %ln8Dy, !tbaa !1
  %ln8Dz = load i64, i64* %ls8pO
  %ln8DA = load i64, i64* %ls8pL
  %ln8DB = add i64 %ln8Dz, %ln8DA
  store i64 %ln8DB, i64* %ls8pO
  br label %c8un
c8uM:
  %ln8DC = load i64, i64* %ls8nN
  %ln8DD = add i64 %ln8DC, 16
  %ln8DE = load i64, i64* %ls8nL
  %ln8DF = load i64, i64* %ls8pR
  %ln8DG = add i64 %ln8DE, %ln8DF
  %ln8DH = add i64 %ln8DD, %ln8DG
  %ln8DI = load i64, i64* %ls8pV
  %ln8DJ = trunc i64 %ln8DI to i8
  %ln8DK = inttoptr i64 %ln8DH to i8*
  store i8 %ln8DJ, i8* %ln8DK, !tbaa !1
  %ln8DL = load i64, i64* %ls8pO
  %ln8DM = load i64, i64* %ls8pL
  %ln8DN = add i64 %ln8DL, %ln8DM
  store i64 %ln8DN, i64* %ls8pO
  br label %c8un
c8uu:
  %ln8DO = load i64, i64* %ls8pO
  %ln8DP = ashr i64 %ln8DO, 3
  store i64 %ln8DP, i64* %ls8qa
  %ln8DQ = load i64, i64* %ls8nN
  %ln8DR = add i64 %ln8DQ, 16
  %ln8DS = load i64, i64* %ls8nL
  %ln8DT = load i64, i64* %ls8qa
  %ln8DU = add i64 %ln8DS, %ln8DT
  %ln8DV = add i64 %ln8DR, %ln8DU
  %ln8DW = inttoptr i64 %ln8DV to i8*
  %ln8DX = load i8, i8* %ln8DW, !tbaa !1
  %ln8DY = sext i8 %ln8DX to i64
  store i64 %ln8DY, i64* %ls8qe
  %ln8DZ = load i64, i64* %ls8pO
  %ln8E0 = and i64 %ln8DZ, 7
  store i64 %ln8E0, i64* %ls8qf
  %ln8E1 = load i64, i64* %ls8qf
  %ln8E2 = icmp sge i64 %ln8E1, 64
  %ln8E3 = zext i1 %ln8E2 to i64
  switch i64 %ln8E3, label %c8v0 [i64 1, label %c8v1]
c8v0:
  %ln8E4 = load i64, i64* %ls8nN
  %ln8E5 = add i64 %ln8E4, 16
  %ln8E6 = load i64, i64* %ls8nL
  %ln8E7 = load i64, i64* %ls8qa
  %ln8E8 = add i64 %ln8E6, %ln8E7
  %ln8E9 = add i64 %ln8E5, %ln8E8
  %ln8Ea = load i64, i64* %ls8qe
  %ln8Eb = load i64, i64* %ls8qf
  %ln8Ec = shl i64 1, %ln8Eb
  %ln8Ed = trunc i64 %ln8Ec to i8
  %ln8Ee = sext i8 %ln8Ed to i64
  %ln8Ef = or i64 %ln8Ea, %ln8Ee
  %ln8Eg = trunc i64 %ln8Ef to i8
  %ln8Eh = inttoptr i64 %ln8E9 to i8*
  store i8 %ln8Eg, i8* %ln8Eh, !tbaa !1
  %ln8Ei = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8Ej = add i64 %ln8Ei, 1
  store i64 %ln8Ej, i64* %R1_Var
  %ln8Ek = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8El = bitcast i64* %ln8Ek to i64*
  %ln8Em = load i64, i64* %ln8El, !tbaa !2
  %ln8En = inttoptr i64 %ln8Em to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Eo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8En( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Eo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8v1:
  %ln8Ep = load i64, i64* %ls8nN
  %ln8Eq = add i64 %ln8Ep, 16
  %ln8Er = load i64, i64* %ls8nL
  %ln8Es = load i64, i64* %ls8qa
  %ln8Et = add i64 %ln8Er, %ln8Es
  %ln8Eu = add i64 %ln8Eq, %ln8Et
  %ln8Ev = load i64, i64* %ls8qe
  %ln8Ew = trunc i64 %ln8Ev to i8
  %ln8Ex = inttoptr i64 %ln8Eu to i8*
  store i8 %ln8Ew, i8* %ln8Ex, !tbaa !1
  %ln8Ey = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln8Ez = add i64 %ln8Ey, 1
  store i64 %ln8Ez, i64* %R1_Var
  %ln8EA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8EB = bitcast i64* %ln8EA to i64*
  %ln8EC = load i64, i64* %ln8EB, !tbaa !2
  %ln8ED = inttoptr i64 %ln8EC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8EE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ED( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8EE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.389450228 UTC

@Main_mainzuzdszdwzdssievefn_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_info$def to i8*)
define ghccc void @Main_mainzuzdszdwzdssievefn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_info$def to i64)),i64 0), i64 965, i64 0, i64 30064771072, i64 0, i64 14}>
{
c8vT:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8EF = load i64*, i64** %Sp_Var
  %ln8EG = getelementptr inbounds i64, i64* %ln8EF, i32 -6
  %ln8EH = ptrtoint i64* %ln8EG to i64
  %ln8EI = icmp ult i64 %ln8EH, %SpLim_Arg
  %ln8EK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8EI, i1 0 )
  br i1 %ln8EK, label %u8zQ, label %u8zP
u8zP:
  %ln8EL = load i64*, i64** %Sp_Var
  %ln8EM = getelementptr inbounds i64, i64* %ln8EL, i32 -5
  store i64 %R2_Arg, i64* %ln8EM, !tbaa !2
  %ln8EN = load i64*, i64** %Sp_Var
  %ln8EO = getelementptr inbounds i64, i64* %ln8EN, i32 -4
  store i64 %R3_Arg, i64* %ln8EO, !tbaa !2
  %ln8EP = load i64*, i64** %Sp_Var
  %ln8EQ = getelementptr inbounds i64, i64* %ln8EP, i32 -3
  store i64 %R4_Arg, i64* %ln8EQ, !tbaa !2
  %ln8ER = load i64*, i64** %Sp_Var
  %ln8ES = getelementptr inbounds i64, i64* %ln8ER, i32 -2
  store i64 %R5_Arg, i64* %ln8ES, !tbaa !2
  %ln8ET = load i64*, i64** %Sp_Var
  %ln8EU = getelementptr inbounds i64, i64* %ln8ET, i32 -1
  store i64 %R6_Arg, i64* %ln8EU, !tbaa !2
  %ln8EV = load i64*, i64** %Sp_Var
  %ln8EW = getelementptr inbounds i64, i64* %ln8EV, i32 -5
  %ln8EX = ptrtoint i64* %ln8EW to i64
  %ln8EY = inttoptr i64 %ln8EX to i64*
  store i64* %ln8EY, i64** %Sp_Var
  %ln8EZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8F0 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EZ( i64* %Base_Arg, i64* %ln8F0, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8zQ:
  %ln8F1 = load i64*, i64** %Sp_Var
  %ln8F2 = getelementptr inbounds i64, i64* %ln8F1, i32 -5
  store i64 %R2_Arg, i64* %ln8F2, !tbaa !2
  %ln8F3 = load i64*, i64** %Sp_Var
  %ln8F4 = getelementptr inbounds i64, i64* %ln8F3, i32 -4
  store i64 %R3_Arg, i64* %ln8F4, !tbaa !2
  %ln8F5 = load i64*, i64** %Sp_Var
  %ln8F6 = getelementptr inbounds i64, i64* %ln8F5, i32 -3
  store i64 %R4_Arg, i64* %ln8F6, !tbaa !2
  %ln8F7 = load i64*, i64** %Sp_Var
  %ln8F8 = getelementptr inbounds i64, i64* %ln8F7, i32 -2
  store i64 %R5_Arg, i64* %ln8F8, !tbaa !2
  %ln8F9 = load i64*, i64** %Sp_Var
  %ln8Fa = getelementptr inbounds i64, i64* %ln8F9, i32 -1
  store i64 %R6_Arg, i64* %ln8Fa, !tbaa !2
  %ln8Fb = load i64*, i64** %Sp_Var
  %ln8Fc = getelementptr inbounds i64, i64* %ln8Fb, i32 -5
  %ln8Fd = ptrtoint i64* %ln8Fc to i64
  %ln8Fe = inttoptr i64 %ln8Fd to i64*
  store i64* %ln8Fe, i64** %Sp_Var
  %ln8Ff = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8vU$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Fg = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ff( i64* %Base_Arg, i64* %ln8Fg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2018-10-10 15:29:52.392559457 UTC

@_c8rp = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to i8*)
define internal ghccc void @_c8rp$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8rp:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8nJ = alloca i64, i32 1
  %ls8nK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8nL = alloca i64, i32 1
  %ls8nM = alloca i64, i32 1
  %ls8nN = alloca i64, i32 1
  %ls8nU = alloca i64, i32 1
  %ls8nV = alloca i64, i32 1
  %ls8nX = alloca i64, i32 1
  %ls8o2 = alloca i64, i32 1
  %ln8Fh = load i64*, i64** %Hp_Var
  %ln8Fi = getelementptr inbounds i64, i64* %ln8Fh, i32 2
  %ln8Fj = ptrtoint i64* %ln8Fi to i64
  %ln8Fk = inttoptr i64 %ln8Fj to i64*
  store i64* %ln8Fk, i64** %Hp_Var
  %ln8Fl = load i64*, i64** %Hp_Var
  %ln8Fm = ptrtoint i64* %ln8Fl to i64
  %ln8Fn = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Fo = bitcast i64* %ln8Fn to i64*
  %ln8Fp = load i64, i64* %ln8Fo, !tbaa !5
  %ln8Fq = icmp ugt i64 %ln8Fm, %ln8Fp
  %ln8Fr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Fq, i1 0 )
  br i1 %ln8Fr, label %c8vX, label %c8vW
c8vW:
  %ln8Fs = load i64*, i64** %Sp_Var
  %ln8Ft = getelementptr inbounds i64, i64* %ln8Fs, i32 0
  %ln8Fu = bitcast i64* %ln8Ft to i64*
  %ln8Fv = load i64, i64* %ln8Fu, !tbaa !2
  store i64 %ln8Fv, i64* %ls8nJ
  %ln8Fw = load i64*, i64** %Sp_Var
  %ln8Fx = getelementptr inbounds i64, i64* %ln8Fw, i32 1
  %ln8Fy = bitcast i64* %ln8Fx to i64*
  %ln8Fz = load i64, i64* %ln8Fy, !tbaa !2
  store i64 %ln8Fz, i64* %ls8nK
  %ln8FA = load i64, i64* %ls8nJ
  %ln8FB = icmp slt i64 %ln8FA, 100000000
  %ln8FC = zext i1 %ln8FB to i64
  switch i64 %ln8FC, label %c8vR [i64 1, label %c8vS]
c8vR:
  %ln8FE = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %ln8FD = load i64*, i64** %Hp_Var
  %ln8FF = getelementptr inbounds i64, i64* %ln8FD, i32 -1
  store i64 %ln8FE, i64* %ln8FF, !tbaa !3
  %ln8FH = load i64, i64* %ls8nK
  %ln8FG = load i64*, i64** %Hp_Var
  %ln8FI = getelementptr inbounds i64, i64* %ln8FG, i32 0
  store i64 %ln8FH, i64* %ln8FI, !tbaa !3
  %ln8FK = load i64*, i64** %Hp_Var
  %ln8FL = ptrtoint i64* %ln8FK to i64
  %ln8FM = add i64 %ln8FL, -7
  store i64 %ln8FM, i64* %R1_Var
  %ln8FN = load i64*, i64** %Sp_Var
  %ln8FO = getelementptr inbounds i64, i64* %ln8FN, i32 5
  %ln8FP = ptrtoint i64* %ln8FO to i64
  %ln8FQ = inttoptr i64 %ln8FP to i64*
  store i64* %ln8FQ, i64** %Sp_Var
  %ln8FR = load i64*, i64** %Sp_Var
  %ln8FS = getelementptr inbounds i64, i64* %ln8FR, i32 0
  %ln8FT = bitcast i64* %ln8FS to i64*
  %ln8FU = load i64, i64* %ln8FT, !tbaa !2
  %ln8FV = inttoptr i64 %ln8FU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8FW = load i64*, i64** %Sp_Var
  %ln8FX = load i64*, i64** %Hp_Var
  %ln8FY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8FV( i64* %Base_Arg, i64* %ln8FW, i64* %ln8FX, i64 %ln8FY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8vS:
  %ln8FZ = load i64*, i64** %Sp_Var
  %ln8G0 = getelementptr inbounds i64, i64* %ln8FZ, i32 2
  %ln8G1 = bitcast i64* %ln8G0 to i64*
  %ln8G2 = load i64, i64* %ln8G1, !tbaa !2
  store i64 %ln8G2, i64* %ls8nL
  %ln8G3 = load i64*, i64** %Sp_Var
  %ln8G4 = getelementptr inbounds i64, i64* %ln8G3, i32 3
  %ln8G5 = bitcast i64* %ln8G4 to i64*
  %ln8G6 = load i64, i64* %ln8G5, !tbaa !2
  store i64 %ln8G6, i64* %ls8nM
  %ln8G7 = load i64*, i64** %Sp_Var
  %ln8G8 = getelementptr inbounds i64, i64* %ln8G7, i32 4
  %ln8G9 = bitcast i64* %ln8G8 to i64*
  %ln8Ga = load i64, i64* %ln8G9, !tbaa !2
  store i64 %ln8Ga, i64* %ls8nN
  %ln8Gb = load i64, i64* %ls8nN
  %ln8Gc = add i64 %ln8Gb, 16
  %ln8Gd = load i64, i64* %ls8nL
  %ln8Ge = load i64, i64* %ls8nJ
  %ln8Gf = ashr i64 %ln8Ge, 3
  %ln8Gg = add i64 %ln8Gd, %ln8Gf
  %ln8Gh = add i64 %ln8Gc, %ln8Gg
  %ln8Gi = inttoptr i64 %ln8Gh to i8*
  %ln8Gj = load i8, i8* %ln8Gi, !tbaa !1
  %ln8Gk = sext i8 %ln8Gj to i64
  store i64 %ln8Gk, i64* %ls8nU
  %ln8Gl = load i64, i64* %ls8nJ
  %ln8Gm = and i64 %ln8Gl, 7
  store i64 %ln8Gm, i64* %ls8nV
  %ln8Gn = load i64, i64* %ls8nV
  %ln8Go = icmp sge i64 %ln8Gn, 64
  %ln8Gp = zext i1 %ln8Go to i64
  switch i64 %ln8Gp, label %c8ye [i64 1, label %c8yf]
c8ye:
  %ln8Gq = load i64*, i64** %Hp_Var
  %ln8Gr = getelementptr inbounds i64, i64* %ln8Gq, i32 -2
  %ln8Gs = ptrtoint i64* %ln8Gr to i64
  %ln8Gt = inttoptr i64 %ln8Gs to i64*
  store i64* %ln8Gt, i64** %Hp_Var
  %ln8Gu = load i64, i64* %ls8nV
  %ln8Gv = shl i64 1, %ln8Gu
  store i64 %ln8Gv, i64* %ls8nX
  br label %s8nW
s8nW:
  %ln8Gw = load i64, i64* %ls8nU
  %ln8Gx = load i64, i64* %ls8nX
  %ln8Gy = trunc i64 %ln8Gx to i8
  %ln8Gz = sext i8 %ln8Gy to i64
  %ln8GA = and i64 %ln8Gw, %ln8Gz
  store i64 %ln8GA, i64* %ls8o2
  %ln8GB = load i64, i64* %ls8o2
  switch i64 %ln8GB, label %c8w2 [i64 0, label %u8zR]
c8w2:
  %ln8GD = load i64, i64* %ls8nJ
  %ln8GE = add i64 %ln8GD, 1
  %ln8GC = load i64*, i64** %Sp_Var
  %ln8GF = getelementptr inbounds i64, i64* %ln8GC, i32 0
  store i64 %ln8GE, i64* %ln8GF, !tbaa !2
  %ln8GH = load i64, i64* %ls8nK
  %ln8GG = load i64*, i64** %Sp_Var
  %ln8GI = getelementptr inbounds i64, i64* %ln8GG, i32 1
  store i64 %ln8GH, i64* %ln8GI, !tbaa !2
  %ln8GK = load i64, i64* %ls8nL
  %ln8GJ = load i64*, i64** %Sp_Var
  %ln8GL = getelementptr inbounds i64, i64* %ln8GJ, i32 2
  store i64 %ln8GK, i64* %ln8GL, !tbaa !2
  %ln8GN = load i64, i64* %ls8nM
  %ln8GM = load i64*, i64** %Sp_Var
  %ln8GO = getelementptr inbounds i64, i64* %ln8GM, i32 3
  store i64 %ln8GN, i64* %ln8GO, !tbaa !2
  %ln8GQ = load i64, i64* %ls8nN
  %ln8GP = load i64*, i64** %Sp_Var
  %ln8GR = getelementptr inbounds i64, i64* %ln8GP, i32 4
  store i64 %ln8GQ, i64* %ln8GR, !tbaa !2
  %ln8GS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GT = load i64*, i64** %Sp_Var
  %ln8GU = load i64*, i64** %Hp_Var
  %ln8GV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GS( i64* %Base_Arg, i64* %ln8GT, i64* %ln8GU, i64 %ln8GV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8zR:
  %ln8GX = load i64, i64* %ls8o2
  %ln8GW = load i64*, i64** %Sp_Var
  %ln8GY = getelementptr inbounds i64, i64* %ln8GW, i32 -1
  store i64 %ln8GX, i64* %ln8GY, !tbaa !2
  %ln8GZ = load i64*, i64** %Sp_Var
  %ln8H0 = getelementptr inbounds i64, i64* %ln8GZ, i32 -1
  %ln8H1 = ptrtoint i64* %ln8H0 to i64
  %ln8H2 = inttoptr i64 %ln8H1 to i64*
  store i64* %ln8H2, i64** %Sp_Var
  %ln8H3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8s1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8H4 = load i64*, i64** %Sp_Var
  %ln8H5 = load i64*, i64** %Hp_Var
  %ln8H6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8H3( i64* %Base_Arg, i64* %ln8H4, i64* %ln8H5, i64 %ln8H6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8yf:
  %ln8H7 = load i64*, i64** %Hp_Var
  %ln8H8 = getelementptr inbounds i64, i64* %ln8H7, i32 -2
  %ln8H9 = ptrtoint i64* %ln8H8 to i64
  %ln8Ha = inttoptr i64 %ln8H9 to i64*
  store i64* %ln8Ha, i64** %Hp_Var
  store i64 0, i64* %ls8nX
  br label %s8nW
c8vX:
  %ln8Hb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8Hb, !tbaa !5
  %ln8Hc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8vU$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hd = load i64*, i64** %Sp_Var
  %ln8He = load i64*, i64** %Hp_Var
  %ln8Hf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hc( i64* %Base_Arg, i64* %ln8Hd, i64* %ln8He, i64 %ln8Hf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.453455083 UTC

@_c8vU = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8vU$def to i8*)
define internal ghccc void @_c8vU$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8vU:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Hg = ptrtoint %Main_mainzuzdszdwzdssievefn_closure_struct* @Main_mainzuzdszdwzdssievefn_closure$def to i64
  store i64 %ln8Hg, i64* %R1_Var
  %ln8Hh = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Hi = bitcast i64* %ln8Hh to i64*
  %ln8Hj = load i64, i64* %ln8Hi, !tbaa !5
  %ln8Hk = inttoptr i64 %ln8Hj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Hl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.456918028 UTC

@_c8s1 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8s1$def to i8*)
define internal ghccc void @_c8s1$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8s1:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8nJ = alloca i64, i32 1
  %ls8nK = alloca i64, i32 1
  %ls8nL = alloca i64, i32 1
  %ls8nM = alloca i64, i32 1
  %ls8nN = alloca i64, i32 1
  %ls8o4 = alloca i64, i32 1
  %ls8o5 = alloca i64, i32 1
  %ls8o9 = alloca i64, i32 1
  %ls8od = alloca i64, i32 1
  %ls8of = alloca i64, i32 1
  %ls8oe = alloca i64, i32 1
  %lc8sx = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8ph = alloca i64, i32 1
  %ls8pl = alloca i64, i32 1
  %ls8pm = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8pF = alloca i64, i32 1
  %ls8pJ = alloca i64, i32 1
  %ls8pL = alloca i64, i32 1
  %ls8pK = alloca i64, i32 1
  %lc8ul = alloca i64, i32 1
  %ls8qN = alloca i64, i32 1
  %ls8qR = alloca i64, i32 1
  %ls8qS = alloca i64, i32 1
  %ls8o2 = alloca i64, i32 1
  %ln8Hm = load i64*, i64** %Hp_Var
  %ln8Hn = getelementptr inbounds i64, i64* %ln8Hm, i32 5
  %ln8Ho = ptrtoint i64* %ln8Hn to i64
  %ln8Hp = inttoptr i64 %ln8Ho to i64*
  store i64* %ln8Hp, i64** %Hp_Var
  %ln8Hq = load i64*, i64** %Hp_Var
  %ln8Hr = ptrtoint i64* %ln8Hq to i64
  %ln8Hs = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Ht = bitcast i64* %ln8Hs to i64*
  %ln8Hu = load i64, i64* %ln8Ht, !tbaa !5
  %ln8Hv = icmp ugt i64 %ln8Hr, %ln8Hu
  %ln8Hw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Hv, i1 0 )
  br i1 %ln8Hw, label %c8w9, label %c8w8
c8w8:
  %ln8Hx = load i64*, i64** %Sp_Var
  %ln8Hy = getelementptr inbounds i64, i64* %ln8Hx, i32 1
  %ln8Hz = bitcast i64* %ln8Hy to i64*
  %ln8HA = load i64, i64* %ln8Hz, !tbaa !2
  store i64 %ln8HA, i64* %ls8nJ
  %ln8HB = load i64*, i64** %Sp_Var
  %ln8HC = getelementptr inbounds i64, i64* %ln8HB, i32 2
  %ln8HD = bitcast i64* %ln8HC to i64*
  %ln8HE = load i64, i64* %ln8HD, !tbaa !2
  store i64 %ln8HE, i64* %ls8nK
  %ln8HF = load i64*, i64** %Sp_Var
  %ln8HG = getelementptr inbounds i64, i64* %ln8HF, i32 3
  %ln8HH = bitcast i64* %ln8HG to i64*
  %ln8HI = load i64, i64* %ln8HH, !tbaa !2
  store i64 %ln8HI, i64* %ls8nL
  %ln8HJ = load i64*, i64** %Sp_Var
  %ln8HK = getelementptr inbounds i64, i64* %ln8HJ, i32 4
  %ln8HL = bitcast i64* %ln8HK to i64*
  %ln8HM = load i64, i64* %ln8HL, !tbaa !2
  store i64 %ln8HM, i64* %ls8nM
  %ln8HN = load i64*, i64** %Sp_Var
  %ln8HO = getelementptr inbounds i64, i64* %ln8HN, i32 5
  %ln8HP = bitcast i64* %ln8HO to i64*
  %ln8HQ = load i64, i64* %ln8HP, !tbaa !2
  store i64 %ln8HQ, i64* %ls8nN
  %ln8HR = load i64, i64* %ls8nJ
  %ln8HS = load i64, i64* %ls8nJ
  %ln8HT = mul i64 %ln8HR, %ln8HS
  store i64 %ln8HT, i64* %ls8o4
  %ln8HU = load i64, i64* %ls8nJ
  %ln8HV = load i64, i64* %ls8nJ
  %ln8HW = mul i64 %ln8HU, %ln8HV
  %ln8HX = load i64, i64* %ls8nJ
  %ln8HY = add i64 %ln8HW, %ln8HX
  store i64 %ln8HY, i64* %ls8o5
  %ln8HZ = load i64, i64* %ls8o5
  %ln8I0 = load i64, i64* %ls8o4
  %ln8I1 = icmp sge i64 %ln8HZ, %ln8I0
  %ln8I2 = zext i1 %ln8I1 to i64
  switch i64 %ln8I2, label %c8xa [i64 1, label %c8ya]
c8xa:
  %ln8I3 = load i64, i64* %ls8o5
  %ln8I4 = icmp sgt i64 99999999, %ln8I3
  %ln8I5 = zext i1 %ln8I4 to i64
  switch i64 %ln8I5, label %c8wM [i64 1, label %c8x8]
c8wM:
  %ln8I6 = load i64, i64* %ls8o4
  %ln8I7 = ashr i64 %ln8I6, 3
  store i64 %ln8I7, i64* %ls8o9
  %ln8I8 = load i64, i64* %ls8nN
  %ln8I9 = add i64 %ln8I8, 16
  %ln8Ia = load i64, i64* %ls8nL
  %ln8Ib = load i64, i64* %ls8o9
  %ln8Ic = add i64 %ln8Ia, %ln8Ib
  %ln8Id = add i64 %ln8I9, %ln8Ic
  %ln8Ie = inttoptr i64 %ln8Id to i8*
  %ln8If = load i8, i8* %ln8Ie, !tbaa !1
  %ln8Ig = sext i8 %ln8If to i64
  store i64 %ln8Ig, i64* %ls8od
  %ln8Ii = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8oh_info$def to i64
  %ln8Ih = load i64*, i64** %Hp_Var
  %ln8Ij = getelementptr inbounds i64, i64* %ln8Ih, i32 -4
  store i64 %ln8Ii, i64* %ln8Ij, !tbaa !3
  %ln8Il = load i64, i64* %ls8nN
  %ln8Ik = load i64*, i64** %Hp_Var
  %ln8Im = getelementptr inbounds i64, i64* %ln8Ik, i32 -3
  store i64 %ln8Il, i64* %ln8Im, !tbaa !3
  %ln8Io = load i64, i64* %ls8nL
  %ln8In = load i64*, i64** %Hp_Var
  %ln8Ip = getelementptr inbounds i64, i64* %ln8In, i32 -2
  store i64 %ln8Io, i64* %ln8Ip, !tbaa !3
  %ln8Iq = load i64, i64* %ls8o5
  %ln8Ir = load i64, i64* %ls8o4
  %ln8Is = sub i64 %ln8Iq, %ln8Ir
  store i64 %ln8Is, i64* %ls8of
  %ln8Iu = load i64, i64* %ls8of
  %ln8It = load i64*, i64** %Hp_Var
  %ln8Iv = getelementptr inbounds i64, i64* %ln8It, i32 -1
  store i64 %ln8Iu, i64* %ln8Iv, !tbaa !3
  %ln8Ix = load i64, i64* %ls8of
  %ln8Iy = sub i64 99999999, %ln8Ix
  %ln8Iw = load i64*, i64** %Hp_Var
  %ln8Iz = getelementptr inbounds i64, i64* %ln8Iw, i32 0
  store i64 %ln8Iy, i64* %ln8Iz, !tbaa !3
  %ln8IA = load i64, i64* %ls8o4
  %ln8IB = and i64 %ln8IA, 7
  store i64 %ln8IB, i64* %ls8oe
  %ln8ID = load i64*, i64** %Hp_Var
  %ln8IE = ptrtoint i64* %ln8ID to i64
  %ln8IF = add i64 %ln8IE, -30
  store i64 %ln8IF, i64* %lc8sx
  %ln8IG = load i64, i64* %ls8oe
  %ln8IH = icmp sge i64 %ln8IG, 64
  %ln8II = zext i1 %ln8IH to i64
  switch i64 %ln8II, label %c8wA [i64 1, label %c8wI]
c8wA:
  %ln8IJ = load i64, i64* %ls8nN
  %ln8IK = add i64 %ln8IJ, 16
  %ln8IL = load i64, i64* %ls8nL
  %ln8IM = load i64, i64* %ls8o9
  %ln8IN = add i64 %ln8IL, %ln8IM
  %ln8IO = add i64 %ln8IK, %ln8IN
  %ln8IP = load i64, i64* %ls8od
  %ln8IQ = load i64, i64* %ls8oe
  %ln8IR = shl i64 1, %ln8IQ
  %ln8IS = trunc i64 %ln8IR to i8
  %ln8IT = sext i8 %ln8IS to i64
  %ln8IU = or i64 %ln8IP, %ln8IT
  %ln8IV = trunc i64 %ln8IU to i8
  %ln8IW = inttoptr i64 %ln8IO to i8*
  store i8 %ln8IV, i8* %ln8IW, !tbaa !1
  %ln8IY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wy_info$def to i64
  %ln8IX = load i64*, i64** %Sp_Var
  %ln8IZ = getelementptr inbounds i64, i64* %ln8IX, i32 0
  store i64 %ln8IY, i64* %ln8IZ, !tbaa !2
  %ln8J0 = load i64, i64* %ls8o5
  store i64 %ln8J0, i64* %R2_Var
  %ln8J1 = load i64, i64* %lc8sx
  store i64 %ln8J1, i64* %R1_Var
  %ln8J2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8oh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8J3 = load i64*, i64** %Sp_Var
  %ln8J4 = load i64*, i64** %Hp_Var
  %ln8J5 = load i64, i64* %R1_Var
  %ln8J6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8J2( i64* %Base_Arg, i64* %ln8J3, i64* %ln8J4, i64 %ln8J5, i64 %ln8J6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8wI:
  %ln8J7 = load i64, i64* %ls8nN
  %ln8J8 = add i64 %ln8J7, 16
  %ln8J9 = load i64, i64* %ls8nL
  %ln8Ja = load i64, i64* %ls8o9
  %ln8Jb = add i64 %ln8J9, %ln8Ja
  %ln8Jc = add i64 %ln8J8, %ln8Jb
  %ln8Jd = load i64, i64* %ls8od
  %ln8Je = trunc i64 %ln8Jd to i8
  %ln8Jf = inttoptr i64 %ln8Jc to i8*
  store i8 %ln8Je, i8* %ln8Jf, !tbaa !1
  %ln8Jh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wH_info$def to i64
  %ln8Jg = load i64*, i64** %Sp_Var
  %ln8Ji = getelementptr inbounds i64, i64* %ln8Jg, i32 0
  store i64 %ln8Jh, i64* %ln8Ji, !tbaa !2
  %ln8Jj = load i64, i64* %ls8o5
  store i64 %ln8Jj, i64* %R2_Var
  %ln8Jk = load i64, i64* %lc8sx
  store i64 %ln8Jk, i64* %R1_Var
  %ln8Jl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8oh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jm = load i64*, i64** %Sp_Var
  %ln8Jn = load i64*, i64** %Hp_Var
  %ln8Jo = load i64, i64* %R1_Var
  %ln8Jp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jl( i64* %Base_Arg, i64* %ln8Jm, i64* %ln8Jn, i64 %ln8Jo, i64 %ln8Jp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8x8:
  %ln8Jq = load i64, i64* %ls8o4
  %ln8Jr = icmp sgt i64 99999999, %ln8Jq
  %ln8Js = zext i1 %ln8Jr to i64
  switch i64 %ln8Js, label %c8x6 [i64 1, label %c8x7]
c8x6:
  %ln8Jt = load i64, i64* %ls8o4
  %ln8Ju = ashr i64 %ln8Jt, 3
  store i64 %ln8Ju, i64* %ls8ph
  %ln8Jv = load i64, i64* %ls8nN
  %ln8Jw = add i64 %ln8Jv, 16
  %ln8Jx = load i64, i64* %ls8nL
  %ln8Jy = load i64, i64* %ls8ph
  %ln8Jz = add i64 %ln8Jx, %ln8Jy
  %ln8JA = add i64 %ln8Jw, %ln8Jz
  %ln8JB = inttoptr i64 %ln8JA to i8*
  %ln8JC = load i8, i8* %ln8JB, !tbaa !1
  %ln8JD = sext i8 %ln8JC to i64
  store i64 %ln8JD, i64* %ls8pl
  %ln8JE = load i64, i64* %ls8o4
  %ln8JF = and i64 %ln8JE, 7
  store i64 %ln8JF, i64* %ls8pm
  %ln8JG = load i64, i64* %ls8pm
  %ln8JH = icmp sge i64 %ln8JG, 64
  %ln8JI = zext i1 %ln8JH to i64
  switch i64 %ln8JI, label %c8x3 [i64 1, label %c8x4]
c8x3:
  %ln8JJ = load i64, i64* %ls8nN
  %ln8JK = add i64 %ln8JJ, 16
  %ln8JL = load i64, i64* %ls8nL
  %ln8JM = load i64, i64* %ls8ph
  %ln8JN = add i64 %ln8JL, %ln8JM
  %ln8JO = add i64 %ln8JK, %ln8JN
  %ln8JP = load i64, i64* %ls8pl
  %ln8JQ = load i64, i64* %ls8pm
  %ln8JR = shl i64 1, %ln8JQ
  %ln8JS = trunc i64 %ln8JR to i8
  %ln8JT = sext i8 %ln8JS to i64
  %ln8JU = or i64 %ln8JP, %ln8JT
  %ln8JV = trunc i64 %ln8JU to i8
  %ln8JW = inttoptr i64 %ln8JO to i8*
  store i8 %ln8JV, i8* %ln8JW, !tbaa !1
  %ln8JX = load i64*, i64** %Hp_Var
  %ln8JY = getelementptr inbounds i64, i64* %ln8JX, i32 -5
  %ln8JZ = ptrtoint i64* %ln8JY to i64
  %ln8K0 = inttoptr i64 %ln8JZ to i64*
  store i64* %ln8K0, i64** %Hp_Var
  %ln8K2 = load i64, i64* %ls8nJ
  %ln8K3 = add i64 %ln8K2, 1
  %ln8K1 = load i64*, i64** %Sp_Var
  %ln8K4 = getelementptr inbounds i64, i64* %ln8K1, i32 1
  store i64 %ln8K3, i64* %ln8K4, !tbaa !2
  %ln8K6 = load i64, i64* %ls8nK
  %ln8K7 = add i64 %ln8K6, 1
  %ln8K5 = load i64*, i64** %Sp_Var
  %ln8K8 = getelementptr inbounds i64, i64* %ln8K5, i32 2
  store i64 %ln8K7, i64* %ln8K8, !tbaa !2
  %ln8Ka = load i64, i64* %ls8nL
  %ln8K9 = load i64*, i64** %Sp_Var
  %ln8Kb = getelementptr inbounds i64, i64* %ln8K9, i32 3
  store i64 %ln8Ka, i64* %ln8Kb, !tbaa !2
  %ln8Kd = load i64, i64* %ls8nM
  %ln8Kc = load i64*, i64** %Sp_Var
  %ln8Ke = getelementptr inbounds i64, i64* %ln8Kc, i32 4
  store i64 %ln8Kd, i64* %ln8Ke, !tbaa !2
  %ln8Kg = load i64, i64* %ls8nN
  %ln8Kf = load i64*, i64** %Sp_Var
  %ln8Kh = getelementptr inbounds i64, i64* %ln8Kf, i32 5
  store i64 %ln8Kg, i64* %ln8Kh, !tbaa !2
  %ln8Ki = load i64*, i64** %Sp_Var
  %ln8Kj = getelementptr inbounds i64, i64* %ln8Ki, i32 1
  %ln8Kk = ptrtoint i64* %ln8Kj to i64
  %ln8Kl = inttoptr i64 %ln8Kk to i64*
  store i64* %ln8Kl, i64** %Sp_Var
  br label %u8Ad
u8Ad:
  %ln8Km = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Kn = load i64*, i64** %Sp_Var
  %ln8Ko = load i64*, i64** %Hp_Var
  %ln8Kp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Km( i64* %Base_Arg, i64* %ln8Kn, i64* %ln8Ko, i64 %ln8Kp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8x4:
  %ln8Kq = load i64, i64* %ls8nN
  %ln8Kr = add i64 %ln8Kq, 16
  %ln8Ks = load i64, i64* %ls8nL
  %ln8Kt = load i64, i64* %ls8ph
  %ln8Ku = add i64 %ln8Ks, %ln8Kt
  %ln8Kv = add i64 %ln8Kr, %ln8Ku
  %ln8Kw = load i64, i64* %ls8pl
  %ln8Kx = trunc i64 %ln8Kw to i8
  %ln8Ky = inttoptr i64 %ln8Kv to i8*
  store i8 %ln8Kx, i8* %ln8Ky, !tbaa !1
  %ln8Kz = load i64*, i64** %Hp_Var
  %ln8KA = getelementptr inbounds i64, i64* %ln8Kz, i32 -5
  %ln8KB = ptrtoint i64* %ln8KA to i64
  %ln8KC = inttoptr i64 %ln8KB to i64*
  store i64* %ln8KC, i64** %Hp_Var
  %ln8KE = load i64, i64* %ls8nJ
  %ln8KF = add i64 %ln8KE, 1
  %ln8KD = load i64*, i64** %Sp_Var
  %ln8KG = getelementptr inbounds i64, i64* %ln8KD, i32 1
  store i64 %ln8KF, i64* %ln8KG, !tbaa !2
  %ln8KI = load i64, i64* %ls8nK
  %ln8KJ = add i64 %ln8KI, 1
  %ln8KH = load i64*, i64** %Sp_Var
  %ln8KK = getelementptr inbounds i64, i64* %ln8KH, i32 2
  store i64 %ln8KJ, i64* %ln8KK, !tbaa !2
  %ln8KM = load i64, i64* %ls8nL
  %ln8KL = load i64*, i64** %Sp_Var
  %ln8KN = getelementptr inbounds i64, i64* %ln8KL, i32 3
  store i64 %ln8KM, i64* %ln8KN, !tbaa !2
  %ln8KP = load i64, i64* %ls8nM
  %ln8KO = load i64*, i64** %Sp_Var
  %ln8KQ = getelementptr inbounds i64, i64* %ln8KO, i32 4
  store i64 %ln8KP, i64* %ln8KQ, !tbaa !2
  %ln8KS = load i64, i64* %ls8nN
  %ln8KR = load i64*, i64** %Sp_Var
  %ln8KT = getelementptr inbounds i64, i64* %ln8KR, i32 5
  store i64 %ln8KS, i64* %ln8KT, !tbaa !2
  %ln8KU = load i64*, i64** %Sp_Var
  %ln8KV = getelementptr inbounds i64, i64* %ln8KU, i32 1
  %ln8KW = ptrtoint i64* %ln8KV to i64
  %ln8KX = inttoptr i64 %ln8KW to i64*
  store i64* %ln8KX, i64** %Sp_Var
  br label %u8Ad
c8x7:
  %ln8KY = load i64*, i64** %Hp_Var
  %ln8KZ = getelementptr inbounds i64, i64* %ln8KY, i32 -5
  %ln8L0 = ptrtoint i64* %ln8KZ to i64
  %ln8L1 = inttoptr i64 %ln8L0 to i64*
  store i64* %ln8L1, i64** %Hp_Var
  %ln8L3 = load i64, i64* %ls8nJ
  %ln8L4 = add i64 %ln8L3, 1
  %ln8L2 = load i64*, i64** %Sp_Var
  %ln8L5 = getelementptr inbounds i64, i64* %ln8L2, i32 1
  store i64 %ln8L4, i64* %ln8L5, !tbaa !2
  %ln8L7 = load i64, i64* %ls8nK
  %ln8L8 = add i64 %ln8L7, 1
  %ln8L6 = load i64*, i64** %Sp_Var
  %ln8L9 = getelementptr inbounds i64, i64* %ln8L6, i32 2
  store i64 %ln8L8, i64* %ln8L9, !tbaa !2
  %ln8Lb = load i64, i64* %ls8nL
  %ln8La = load i64*, i64** %Sp_Var
  %ln8Lc = getelementptr inbounds i64, i64* %ln8La, i32 3
  store i64 %ln8Lb, i64* %ln8Lc, !tbaa !2
  %ln8Le = load i64, i64* %ls8nM
  %ln8Ld = load i64*, i64** %Sp_Var
  %ln8Lf = getelementptr inbounds i64, i64* %ln8Ld, i32 4
  store i64 %ln8Le, i64* %ln8Lf, !tbaa !2
  %ln8Lh = load i64, i64* %ls8nN
  %ln8Lg = load i64*, i64** %Sp_Var
  %ln8Li = getelementptr inbounds i64, i64* %ln8Lg, i32 5
  store i64 %ln8Lh, i64* %ln8Li, !tbaa !2
  %ln8Lj = load i64*, i64** %Sp_Var
  %ln8Lk = getelementptr inbounds i64, i64* %ln8Lj, i32 1
  %ln8Ll = ptrtoint i64* %ln8Lk to i64
  %ln8Lm = inttoptr i64 %ln8Ll to i64*
  store i64* %ln8Lm, i64** %Sp_Var
  br label %u8Ad
c8ya:
  %ln8Ln = load i64, i64* %ls8o5
  %ln8Lo = icmp slt i64 99999999, %ln8Ln
  %ln8Lp = zext i1 %ln8Lo to i64
  switch i64 %ln8Lp, label %c8xN [i64 1, label %c8y9]
c8xN:
  %ln8Lq = load i64, i64* %ls8o4
  %ln8Lr = ashr i64 %ln8Lq, 3
  store i64 %ln8Lr, i64* %ls8pF
  %ln8Ls = load i64, i64* %ls8nN
  %ln8Lt = add i64 %ln8Ls, 16
  %ln8Lu = load i64, i64* %ls8nL
  %ln8Lv = load i64, i64* %ls8pF
  %ln8Lw = add i64 %ln8Lu, %ln8Lv
  %ln8Lx = add i64 %ln8Lt, %ln8Lw
  %ln8Ly = inttoptr i64 %ln8Lx to i8*
  %ln8Lz = load i8, i8* %ln8Ly, !tbaa !1
  %ln8LA = sext i8 %ln8Lz to i64
  store i64 %ln8LA, i64* %ls8pJ
  %ln8LC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8pN_info$def to i64
  %ln8LB = load i64*, i64** %Hp_Var
  %ln8LD = getelementptr inbounds i64, i64* %ln8LB, i32 -4
  store i64 %ln8LC, i64* %ln8LD, !tbaa !3
  %ln8LF = load i64, i64* %ls8nN
  %ln8LE = load i64*, i64** %Hp_Var
  %ln8LG = getelementptr inbounds i64, i64* %ln8LE, i32 -3
  store i64 %ln8LF, i64* %ln8LG, !tbaa !3
  %ln8LI = load i64, i64* %ls8nL
  %ln8LH = load i64*, i64** %Hp_Var
  %ln8LJ = getelementptr inbounds i64, i64* %ln8LH, i32 -2
  store i64 %ln8LI, i64* %ln8LJ, !tbaa !3
  %ln8LK = load i64, i64* %ls8o5
  %ln8LL = load i64, i64* %ls8o4
  %ln8LM = sub i64 %ln8LK, %ln8LL
  store i64 %ln8LM, i64* %ls8pL
  %ln8LO = load i64, i64* %ls8pL
  %ln8LN = load i64*, i64** %Hp_Var
  %ln8LP = getelementptr inbounds i64, i64* %ln8LN, i32 -1
  store i64 %ln8LO, i64* %ln8LP, !tbaa !3
  %ln8LR = load i64, i64* %ls8pL
  %ln8LS = sub i64 99999999, %ln8LR
  %ln8LQ = load i64*, i64** %Hp_Var
  %ln8LT = getelementptr inbounds i64, i64* %ln8LQ, i32 0
  store i64 %ln8LS, i64* %ln8LT, !tbaa !3
  %ln8LU = load i64, i64* %ls8o4
  %ln8LV = and i64 %ln8LU, 7
  store i64 %ln8LV, i64* %ls8pK
  %ln8LX = load i64*, i64** %Hp_Var
  %ln8LY = ptrtoint i64* %ln8LX to i64
  %ln8LZ = add i64 %ln8LY, -30
  store i64 %ln8LZ, i64* %lc8ul
  %ln8M0 = load i64, i64* %ls8pK
  %ln8M1 = icmp sge i64 %ln8M0, 64
  %ln8M2 = zext i1 %ln8M1 to i64
  switch i64 %ln8M2, label %c8xB [i64 1, label %c8xJ]
c8xB:
  %ln8M3 = load i64, i64* %ls8nN
  %ln8M4 = add i64 %ln8M3, 16
  %ln8M5 = load i64, i64* %ls8nL
  %ln8M6 = load i64, i64* %ls8pF
  %ln8M7 = add i64 %ln8M5, %ln8M6
  %ln8M8 = add i64 %ln8M4, %ln8M7
  %ln8M9 = load i64, i64* %ls8pJ
  %ln8Ma = load i64, i64* %ls8pK
  %ln8Mb = shl i64 1, %ln8Ma
  %ln8Mc = trunc i64 %ln8Mb to i8
  %ln8Md = sext i8 %ln8Mc to i64
  %ln8Me = or i64 %ln8M9, %ln8Md
  %ln8Mf = trunc i64 %ln8Me to i8
  %ln8Mg = inttoptr i64 %ln8M8 to i8*
  store i8 %ln8Mf, i8* %ln8Mg, !tbaa !1
  %ln8Mi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xz_info$def to i64
  %ln8Mh = load i64*, i64** %Sp_Var
  %ln8Mj = getelementptr inbounds i64, i64* %ln8Mh, i32 0
  store i64 %ln8Mi, i64* %ln8Mj, !tbaa !2
  %ln8Mk = load i64, i64* %ls8o5
  store i64 %ln8Mk, i64* %R2_Var
  %ln8Ml = load i64, i64* %lc8ul
  store i64 %ln8Ml, i64* %R1_Var
  %ln8Mm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8pN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mn = load i64*, i64** %Sp_Var
  %ln8Mo = load i64*, i64** %Hp_Var
  %ln8Mp = load i64, i64* %R1_Var
  %ln8Mq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mm( i64* %Base_Arg, i64* %ln8Mn, i64* %ln8Mo, i64 %ln8Mp, i64 %ln8Mq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8xJ:
  %ln8Mr = load i64, i64* %ls8nN
  %ln8Ms = add i64 %ln8Mr, 16
  %ln8Mt = load i64, i64* %ls8nL
  %ln8Mu = load i64, i64* %ls8pF
  %ln8Mv = add i64 %ln8Mt, %ln8Mu
  %ln8Mw = add i64 %ln8Ms, %ln8Mv
  %ln8Mx = load i64, i64* %ls8pJ
  %ln8My = trunc i64 %ln8Mx to i8
  %ln8Mz = inttoptr i64 %ln8Mw to i8*
  store i8 %ln8My, i8* %ln8Mz, !tbaa !1
  %ln8MB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xI_info$def to i64
  %ln8MA = load i64*, i64** %Sp_Var
  %ln8MC = getelementptr inbounds i64, i64* %ln8MA, i32 0
  store i64 %ln8MB, i64* %ln8MC, !tbaa !2
  %ln8MD = load i64, i64* %ls8o5
  store i64 %ln8MD, i64* %R2_Var
  %ln8ME = load i64, i64* %lc8ul
  store i64 %ln8ME, i64* %R1_Var
  %ln8MF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8pN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MG = load i64*, i64** %Sp_Var
  %ln8MH = load i64*, i64** %Hp_Var
  %ln8MI = load i64, i64* %R1_Var
  %ln8MJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MF( i64* %Base_Arg, i64* %ln8MG, i64* %ln8MH, i64 %ln8MI, i64 %ln8MJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8y9:
  %ln8MK = load i64, i64* %ls8o4
  %ln8ML = icmp slt i64 99999999, %ln8MK
  %ln8MM = zext i1 %ln8ML to i64
  switch i64 %ln8MM, label %c8y7 [i64 1, label %c8y8]
c8y7:
  %ln8MN = load i64, i64* %ls8o4
  %ln8MO = ashr i64 %ln8MN, 3
  store i64 %ln8MO, i64* %ls8qN
  %ln8MP = load i64, i64* %ls8nN
  %ln8MQ = add i64 %ln8MP, 16
  %ln8MR = load i64, i64* %ls8nL
  %ln8MS = load i64, i64* %ls8qN
  %ln8MT = add i64 %ln8MR, %ln8MS
  %ln8MU = add i64 %ln8MQ, %ln8MT
  %ln8MV = inttoptr i64 %ln8MU to i8*
  %ln8MW = load i8, i8* %ln8MV, !tbaa !1
  %ln8MX = sext i8 %ln8MW to i64
  store i64 %ln8MX, i64* %ls8qR
  %ln8MY = load i64, i64* %ls8o4
  %ln8MZ = and i64 %ln8MY, 7
  store i64 %ln8MZ, i64* %ls8qS
  %ln8N0 = load i64, i64* %ls8qS
  %ln8N1 = icmp sge i64 %ln8N0, 64
  %ln8N2 = zext i1 %ln8N1 to i64
  switch i64 %ln8N2, label %c8y4 [i64 1, label %c8y5]
c8y4:
  %ln8N3 = load i64, i64* %ls8nN
  %ln8N4 = add i64 %ln8N3, 16
  %ln8N5 = load i64, i64* %ls8nL
  %ln8N6 = load i64, i64* %ls8qN
  %ln8N7 = add i64 %ln8N5, %ln8N6
  %ln8N8 = add i64 %ln8N4, %ln8N7
  %ln8N9 = load i64, i64* %ls8qR
  %ln8Na = load i64, i64* %ls8qS
  %ln8Nb = shl i64 1, %ln8Na
  %ln8Nc = trunc i64 %ln8Nb to i8
  %ln8Nd = sext i8 %ln8Nc to i64
  %ln8Ne = or i64 %ln8N9, %ln8Nd
  %ln8Nf = trunc i64 %ln8Ne to i8
  %ln8Ng = inttoptr i64 %ln8N8 to i8*
  store i8 %ln8Nf, i8* %ln8Ng, !tbaa !1
  %ln8Nh = load i64*, i64** %Hp_Var
  %ln8Ni = getelementptr inbounds i64, i64* %ln8Nh, i32 -5
  %ln8Nj = ptrtoint i64* %ln8Ni to i64
  %ln8Nk = inttoptr i64 %ln8Nj to i64*
  store i64* %ln8Nk, i64** %Hp_Var
  %ln8Nm = load i64, i64* %ls8nJ
  %ln8Nn = add i64 %ln8Nm, 1
  %ln8Nl = load i64*, i64** %Sp_Var
  %ln8No = getelementptr inbounds i64, i64* %ln8Nl, i32 1
  store i64 %ln8Nn, i64* %ln8No, !tbaa !2
  %ln8Nq = load i64, i64* %ls8nK
  %ln8Nr = add i64 %ln8Nq, 1
  %ln8Np = load i64*, i64** %Sp_Var
  %ln8Ns = getelementptr inbounds i64, i64* %ln8Np, i32 2
  store i64 %ln8Nr, i64* %ln8Ns, !tbaa !2
  %ln8Nu = load i64, i64* %ls8nL
  %ln8Nt = load i64*, i64** %Sp_Var
  %ln8Nv = getelementptr inbounds i64, i64* %ln8Nt, i32 3
  store i64 %ln8Nu, i64* %ln8Nv, !tbaa !2
  %ln8Nx = load i64, i64* %ls8nM
  %ln8Nw = load i64*, i64** %Sp_Var
  %ln8Ny = getelementptr inbounds i64, i64* %ln8Nw, i32 4
  store i64 %ln8Nx, i64* %ln8Ny, !tbaa !2
  %ln8NA = load i64, i64* %ls8nN
  %ln8Nz = load i64*, i64** %Sp_Var
  %ln8NB = getelementptr inbounds i64, i64* %ln8Nz, i32 5
  store i64 %ln8NA, i64* %ln8NB, !tbaa !2
  %ln8NC = load i64*, i64** %Sp_Var
  %ln8ND = getelementptr inbounds i64, i64* %ln8NC, i32 1
  %ln8NE = ptrtoint i64* %ln8ND to i64
  %ln8NF = inttoptr i64 %ln8NE to i64*
  store i64* %ln8NF, i64** %Sp_Var
  br label %u8Ad
c8y5:
  %ln8NG = load i64, i64* %ls8nN
  %ln8NH = add i64 %ln8NG, 16
  %ln8NI = load i64, i64* %ls8nL
  %ln8NJ = load i64, i64* %ls8qN
  %ln8NK = add i64 %ln8NI, %ln8NJ
  %ln8NL = add i64 %ln8NH, %ln8NK
  %ln8NM = load i64, i64* %ls8qR
  %ln8NN = trunc i64 %ln8NM to i8
  %ln8NO = inttoptr i64 %ln8NL to i8*
  store i8 %ln8NN, i8* %ln8NO, !tbaa !1
  %ln8NP = load i64*, i64** %Hp_Var
  %ln8NQ = getelementptr inbounds i64, i64* %ln8NP, i32 -5
  %ln8NR = ptrtoint i64* %ln8NQ to i64
  %ln8NS = inttoptr i64 %ln8NR to i64*
  store i64* %ln8NS, i64** %Hp_Var
  %ln8NU = load i64, i64* %ls8nJ
  %ln8NV = add i64 %ln8NU, 1
  %ln8NT = load i64*, i64** %Sp_Var
  %ln8NW = getelementptr inbounds i64, i64* %ln8NT, i32 1
  store i64 %ln8NV, i64* %ln8NW, !tbaa !2
  %ln8NY = load i64, i64* %ls8nK
  %ln8NZ = add i64 %ln8NY, 1
  %ln8NX = load i64*, i64** %Sp_Var
  %ln8O0 = getelementptr inbounds i64, i64* %ln8NX, i32 2
  store i64 %ln8NZ, i64* %ln8O0, !tbaa !2
  %ln8O2 = load i64, i64* %ls8nL
  %ln8O1 = load i64*, i64** %Sp_Var
  %ln8O3 = getelementptr inbounds i64, i64* %ln8O1, i32 3
  store i64 %ln8O2, i64* %ln8O3, !tbaa !2
  %ln8O5 = load i64, i64* %ls8nM
  %ln8O4 = load i64*, i64** %Sp_Var
  %ln8O6 = getelementptr inbounds i64, i64* %ln8O4, i32 4
  store i64 %ln8O5, i64* %ln8O6, !tbaa !2
  %ln8O8 = load i64, i64* %ls8nN
  %ln8O7 = load i64*, i64** %Sp_Var
  %ln8O9 = getelementptr inbounds i64, i64* %ln8O7, i32 5
  store i64 %ln8O8, i64* %ln8O9, !tbaa !2
  %ln8Oa = load i64*, i64** %Sp_Var
  %ln8Ob = getelementptr inbounds i64, i64* %ln8Oa, i32 1
  %ln8Oc = ptrtoint i64* %ln8Ob to i64
  %ln8Od = inttoptr i64 %ln8Oc to i64*
  store i64* %ln8Od, i64** %Sp_Var
  br label %u8Ad
c8y8:
  %ln8Oe = load i64*, i64** %Hp_Var
  %ln8Of = getelementptr inbounds i64, i64* %ln8Oe, i32 -5
  %ln8Og = ptrtoint i64* %ln8Of to i64
  %ln8Oh = inttoptr i64 %ln8Og to i64*
  store i64* %ln8Oh, i64** %Hp_Var
  %ln8Oj = load i64, i64* %ls8nJ
  %ln8Ok = add i64 %ln8Oj, 1
  %ln8Oi = load i64*, i64** %Sp_Var
  %ln8Ol = getelementptr inbounds i64, i64* %ln8Oi, i32 1
  store i64 %ln8Ok, i64* %ln8Ol, !tbaa !2
  %ln8On = load i64, i64* %ls8nK
  %ln8Oo = add i64 %ln8On, 1
  %ln8Om = load i64*, i64** %Sp_Var
  %ln8Op = getelementptr inbounds i64, i64* %ln8Om, i32 2
  store i64 %ln8Oo, i64* %ln8Op, !tbaa !2
  %ln8Or = load i64, i64* %ls8nL
  %ln8Oq = load i64*, i64** %Sp_Var
  %ln8Os = getelementptr inbounds i64, i64* %ln8Oq, i32 3
  store i64 %ln8Or, i64* %ln8Os, !tbaa !2
  %ln8Ou = load i64, i64* %ls8nM
  %ln8Ot = load i64*, i64** %Sp_Var
  %ln8Ov = getelementptr inbounds i64, i64* %ln8Ot, i32 4
  store i64 %ln8Ou, i64* %ln8Ov, !tbaa !2
  %ln8Ox = load i64, i64* %ls8nN
  %ln8Ow = load i64*, i64** %Sp_Var
  %ln8Oy = getelementptr inbounds i64, i64* %ln8Ow, i32 5
  store i64 %ln8Ox, i64* %ln8Oy, !tbaa !2
  %ln8Oz = load i64*, i64** %Sp_Var
  %ln8OA = getelementptr inbounds i64, i64* %ln8Oz, i32 1
  %ln8OB = ptrtoint i64* %ln8OA to i64
  %ln8OC = inttoptr i64 %ln8OB to i64*
  store i64* %ln8OC, i64** %Sp_Var
  br label %u8Ad
c8w9:
  %ln8OD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln8OD, !tbaa !5
  %ln8OE = load i64*, i64** %Sp_Var
  %ln8OF = getelementptr inbounds i64, i64* %ln8OE, i32 0
  %ln8OG = bitcast i64* %ln8OF to i64*
  %ln8OH = load i64, i64* %ln8OG, !tbaa !2
  store i64 %ln8OH, i64* %ls8o2
  %ln8OJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s0_info$def to i64
  %ln8OI = load i64*, i64** %Sp_Var
  %ln8OK = getelementptr inbounds i64, i64* %ln8OI, i32 0
  store i64 %ln8OJ, i64* %ln8OK, !tbaa !2
  %ln8OL = load i64, i64* %ls8o2
  store i64 %ln8OL, i64* %R1_Var
  %ln8OM = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ON = load i64*, i64** %Sp_Var
  %ln8OO = load i64*, i64** %Hp_Var
  %ln8OP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OM( i64* %Base_Arg, i64* %ln8ON, i64* %ln8OO, i64 %ln8OP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.463838739 UTC

@c8s0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s0_info$def to i8*)
define internal ghccc void @c8s0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8s0:
  %ln8OQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8OQ, !tbaa !2
  %ln8OR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8s1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.464580667 UTC

@c8xI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xI_info$def to i8*)
define internal ghccc void @c8xI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8xI:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8OT = load i64*, i64** %Sp_Var
  %ln8OU = getelementptr inbounds i64, i64* %ln8OT, i32 1
  %ln8OV = bitcast i64* %ln8OU to i64*
  %ln8OW = load i64, i64* %ln8OV, !tbaa !2
  %ln8OX = add i64 %ln8OW, 1
  %ln8OS = load i64*, i64** %Sp_Var
  %ln8OY = getelementptr inbounds i64, i64* %ln8OS, i32 1
  store i64 %ln8OX, i64* %ln8OY, !tbaa !2
  %ln8P0 = load i64*, i64** %Sp_Var
  %ln8P1 = getelementptr inbounds i64, i64* %ln8P0, i32 2
  %ln8P2 = bitcast i64* %ln8P1 to i64*
  %ln8P3 = load i64, i64* %ln8P2, !tbaa !2
  %ln8P4 = add i64 %ln8P3, 1
  %ln8OZ = load i64*, i64** %Sp_Var
  %ln8P5 = getelementptr inbounds i64, i64* %ln8OZ, i32 2
  store i64 %ln8P4, i64* %ln8P5, !tbaa !2
  %ln8P7 = load i64*, i64** %Sp_Var
  %ln8P8 = getelementptr inbounds i64, i64* %ln8P7, i32 3
  %ln8P9 = bitcast i64* %ln8P8 to i64*
  %ln8Pa = load i64, i64* %ln8P9, !tbaa !2
  %ln8P6 = load i64*, i64** %Sp_Var
  %ln8Pb = getelementptr inbounds i64, i64* %ln8P6, i32 3
  store i64 %ln8Pa, i64* %ln8Pb, !tbaa !2
  %ln8Pd = load i64*, i64** %Sp_Var
  %ln8Pe = getelementptr inbounds i64, i64* %ln8Pd, i32 4
  %ln8Pf = bitcast i64* %ln8Pe to i64*
  %ln8Pg = load i64, i64* %ln8Pf, !tbaa !2
  %ln8Pc = load i64*, i64** %Sp_Var
  %ln8Ph = getelementptr inbounds i64, i64* %ln8Pc, i32 4
  store i64 %ln8Pg, i64* %ln8Ph, !tbaa !2
  %ln8Pj = load i64*, i64** %Sp_Var
  %ln8Pk = getelementptr inbounds i64, i64* %ln8Pj, i32 5
  %ln8Pl = bitcast i64* %ln8Pk to i64*
  %ln8Pm = load i64, i64* %ln8Pl, !tbaa !2
  %ln8Pi = load i64*, i64** %Sp_Var
  %ln8Pn = getelementptr inbounds i64, i64* %ln8Pi, i32 5
  store i64 %ln8Pm, i64* %ln8Pn, !tbaa !2
  %ln8Po = load i64*, i64** %Sp_Var
  %ln8Pp = getelementptr inbounds i64, i64* %ln8Po, i32 1
  %ln8Pq = ptrtoint i64* %ln8Pp to i64
  %ln8Pr = inttoptr i64 %ln8Pq to i64*
  store i64* %ln8Pr, i64** %Sp_Var
  %ln8Ps = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Pt = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ps( i64* %Base_Arg, i64* %ln8Pt, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.465678519 UTC

@c8xz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xz_info$def to i8*)
define internal ghccc void @c8xz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8xz:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Pv = load i64*, i64** %Sp_Var
  %ln8Pw = getelementptr inbounds i64, i64* %ln8Pv, i32 1
  %ln8Px = bitcast i64* %ln8Pw to i64*
  %ln8Py = load i64, i64* %ln8Px, !tbaa !2
  %ln8Pz = add i64 %ln8Py, 1
  %ln8Pu = load i64*, i64** %Sp_Var
  %ln8PA = getelementptr inbounds i64, i64* %ln8Pu, i32 1
  store i64 %ln8Pz, i64* %ln8PA, !tbaa !2
  %ln8PC = load i64*, i64** %Sp_Var
  %ln8PD = getelementptr inbounds i64, i64* %ln8PC, i32 2
  %ln8PE = bitcast i64* %ln8PD to i64*
  %ln8PF = load i64, i64* %ln8PE, !tbaa !2
  %ln8PG = add i64 %ln8PF, 1
  %ln8PB = load i64*, i64** %Sp_Var
  %ln8PH = getelementptr inbounds i64, i64* %ln8PB, i32 2
  store i64 %ln8PG, i64* %ln8PH, !tbaa !2
  %ln8PJ = load i64*, i64** %Sp_Var
  %ln8PK = getelementptr inbounds i64, i64* %ln8PJ, i32 3
  %ln8PL = bitcast i64* %ln8PK to i64*
  %ln8PM = load i64, i64* %ln8PL, !tbaa !2
  %ln8PI = load i64*, i64** %Sp_Var
  %ln8PN = getelementptr inbounds i64, i64* %ln8PI, i32 3
  store i64 %ln8PM, i64* %ln8PN, !tbaa !2
  %ln8PP = load i64*, i64** %Sp_Var
  %ln8PQ = getelementptr inbounds i64, i64* %ln8PP, i32 4
  %ln8PR = bitcast i64* %ln8PQ to i64*
  %ln8PS = load i64, i64* %ln8PR, !tbaa !2
  %ln8PO = load i64*, i64** %Sp_Var
  %ln8PT = getelementptr inbounds i64, i64* %ln8PO, i32 4
  store i64 %ln8PS, i64* %ln8PT, !tbaa !2
  %ln8PV = load i64*, i64** %Sp_Var
  %ln8PW = getelementptr inbounds i64, i64* %ln8PV, i32 5
  %ln8PX = bitcast i64* %ln8PW to i64*
  %ln8PY = load i64, i64* %ln8PX, !tbaa !2
  %ln8PU = load i64*, i64** %Sp_Var
  %ln8PZ = getelementptr inbounds i64, i64* %ln8PU, i32 5
  store i64 %ln8PY, i64* %ln8PZ, !tbaa !2
  %ln8Q0 = load i64*, i64** %Sp_Var
  %ln8Q1 = getelementptr inbounds i64, i64* %ln8Q0, i32 1
  %ln8Q2 = ptrtoint i64* %ln8Q1 to i64
  %ln8Q3 = inttoptr i64 %ln8Q2 to i64*
  store i64* %ln8Q3, i64** %Sp_Var
  %ln8Q4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Q5 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Q4( i64* %Base_Arg, i64* %ln8Q5, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.466837187 UTC

@c8wH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wH_info$def to i8*)
define internal ghccc void @c8wH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8wH:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Q7 = load i64*, i64** %Sp_Var
  %ln8Q8 = getelementptr inbounds i64, i64* %ln8Q7, i32 1
  %ln8Q9 = bitcast i64* %ln8Q8 to i64*
  %ln8Qa = load i64, i64* %ln8Q9, !tbaa !2
  %ln8Qb = add i64 %ln8Qa, 1
  %ln8Q6 = load i64*, i64** %Sp_Var
  %ln8Qc = getelementptr inbounds i64, i64* %ln8Q6, i32 1
  store i64 %ln8Qb, i64* %ln8Qc, !tbaa !2
  %ln8Qe = load i64*, i64** %Sp_Var
  %ln8Qf = getelementptr inbounds i64, i64* %ln8Qe, i32 2
  %ln8Qg = bitcast i64* %ln8Qf to i64*
  %ln8Qh = load i64, i64* %ln8Qg, !tbaa !2
  %ln8Qi = add i64 %ln8Qh, 1
  %ln8Qd = load i64*, i64** %Sp_Var
  %ln8Qj = getelementptr inbounds i64, i64* %ln8Qd, i32 2
  store i64 %ln8Qi, i64* %ln8Qj, !tbaa !2
  %ln8Ql = load i64*, i64** %Sp_Var
  %ln8Qm = getelementptr inbounds i64, i64* %ln8Ql, i32 3
  %ln8Qn = bitcast i64* %ln8Qm to i64*
  %ln8Qo = load i64, i64* %ln8Qn, !tbaa !2
  %ln8Qk = load i64*, i64** %Sp_Var
  %ln8Qp = getelementptr inbounds i64, i64* %ln8Qk, i32 3
  store i64 %ln8Qo, i64* %ln8Qp, !tbaa !2
  %ln8Qr = load i64*, i64** %Sp_Var
  %ln8Qs = getelementptr inbounds i64, i64* %ln8Qr, i32 4
  %ln8Qt = bitcast i64* %ln8Qs to i64*
  %ln8Qu = load i64, i64* %ln8Qt, !tbaa !2
  %ln8Qq = load i64*, i64** %Sp_Var
  %ln8Qv = getelementptr inbounds i64, i64* %ln8Qq, i32 4
  store i64 %ln8Qu, i64* %ln8Qv, !tbaa !2
  %ln8Qx = load i64*, i64** %Sp_Var
  %ln8Qy = getelementptr inbounds i64, i64* %ln8Qx, i32 5
  %ln8Qz = bitcast i64* %ln8Qy to i64*
  %ln8QA = load i64, i64* %ln8Qz, !tbaa !2
  %ln8Qw = load i64*, i64** %Sp_Var
  %ln8QB = getelementptr inbounds i64, i64* %ln8Qw, i32 5
  store i64 %ln8QA, i64* %ln8QB, !tbaa !2
  %ln8QC = load i64*, i64** %Sp_Var
  %ln8QD = getelementptr inbounds i64, i64* %ln8QC, i32 1
  %ln8QE = ptrtoint i64* %ln8QD to i64
  %ln8QF = inttoptr i64 %ln8QE to i64*
  store i64* %ln8QF, i64** %Sp_Var
  %ln8QG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QH = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QG( i64* %Base_Arg, i64* %ln8QH, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.468410067 UTC

@c8wy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wy_info$def to i8*)
define internal ghccc void @c8wy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 965, i64 30}>
{
c8wy:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8QJ = load i64*, i64** %Sp_Var
  %ln8QK = getelementptr inbounds i64, i64* %ln8QJ, i32 1
  %ln8QL = bitcast i64* %ln8QK to i64*
  %ln8QM = load i64, i64* %ln8QL, !tbaa !2
  %ln8QN = add i64 %ln8QM, 1
  %ln8QI = load i64*, i64** %Sp_Var
  %ln8QO = getelementptr inbounds i64, i64* %ln8QI, i32 1
  store i64 %ln8QN, i64* %ln8QO, !tbaa !2
  %ln8QQ = load i64*, i64** %Sp_Var
  %ln8QR = getelementptr inbounds i64, i64* %ln8QQ, i32 2
  %ln8QS = bitcast i64* %ln8QR to i64*
  %ln8QT = load i64, i64* %ln8QS, !tbaa !2
  %ln8QU = add i64 %ln8QT, 1
  %ln8QP = load i64*, i64** %Sp_Var
  %ln8QV = getelementptr inbounds i64, i64* %ln8QP, i32 2
  store i64 %ln8QU, i64* %ln8QV, !tbaa !2
  %ln8QX = load i64*, i64** %Sp_Var
  %ln8QY = getelementptr inbounds i64, i64* %ln8QX, i32 3
  %ln8QZ = bitcast i64* %ln8QY to i64*
  %ln8R0 = load i64, i64* %ln8QZ, !tbaa !2
  %ln8QW = load i64*, i64** %Sp_Var
  %ln8R1 = getelementptr inbounds i64, i64* %ln8QW, i32 3
  store i64 %ln8R0, i64* %ln8R1, !tbaa !2
  %ln8R3 = load i64*, i64** %Sp_Var
  %ln8R4 = getelementptr inbounds i64, i64* %ln8R3, i32 4
  %ln8R5 = bitcast i64* %ln8R4 to i64*
  %ln8R6 = load i64, i64* %ln8R5, !tbaa !2
  %ln8R2 = load i64*, i64** %Sp_Var
  %ln8R7 = getelementptr inbounds i64, i64* %ln8R2, i32 4
  store i64 %ln8R6, i64* %ln8R7, !tbaa !2
  %ln8R9 = load i64*, i64** %Sp_Var
  %ln8Ra = getelementptr inbounds i64, i64* %ln8R9, i32 5
  %ln8Rb = bitcast i64* %ln8Ra to i64*
  %ln8Rc = load i64, i64* %ln8Rb, !tbaa !2
  %ln8R8 = load i64*, i64** %Sp_Var
  %ln8Rd = getelementptr inbounds i64, i64* %ln8R8, i32 5
  store i64 %ln8Rc, i64* %ln8Rd, !tbaa !2
  %ln8Re = load i64*, i64** %Sp_Var
  %ln8Rf = getelementptr inbounds i64, i64* %ln8Re, i32 1
  %ln8Rg = ptrtoint i64* %ln8Rf to i64
  %ln8Rh = inttoptr i64 %ln8Rg to i64*
  store i64* %ln8Rh, i64** %Sp_Var
  %ln8Ri = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8rp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Rj = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ri( i64* %Base_Arg, i64* %ln8Rj, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.470949975 UTC

%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.471375962 UTC

@s8rm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8rm_info$def to i8*)
define internal ghccc void @s8rm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c8RB:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8RM = add i64 %R1_Arg, 16
  %ln8RN = inttoptr i64 %ln8RM to i64*
  %ln8RO = load i64, i64* %ln8RN, !tbaa !4
  store i64 %ln8RO, i64* %R2_Var
  %ln8RP = bitcast i8* @base_GHCziShow_zdfShowIntzuzdcshow_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RQ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8RQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.472217764 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)),i64 0), i64 4294967299, i64 0, i64 30064771086}>
{
c8RE:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8RR = load i64*, i64** %Sp_Var
  %ln8RS = getelementptr inbounds i64, i64* %ln8RR, i32 -1
  %ln8RT = ptrtoint i64* %ln8RS to i64
  %ln8RU = icmp ult i64 %ln8RT, %SpLim_Arg
  %ln8RV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8RU, i1 0 )
  br i1 %ln8RV, label %c8RF, label %c8RG
c8RG:
  %ln8RX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ro_info$def to i64
  %ln8RW = load i64*, i64** %Sp_Var
  %ln8RY = getelementptr inbounds i64, i64* %ln8RW, i32 -1
  store i64 %ln8RX, i64* %ln8RY, !tbaa !2
  store i64 12500000, i64* %R1_Var
  %ln8RZ = load i64*, i64** %Sp_Var
  %ln8S0 = getelementptr inbounds i64, i64* %ln8RZ, i32 -1
  %ln8S1 = ptrtoint i64* %ln8S0 to i64
  %ln8S2 = inttoptr i64 %ln8S1 to i64*
  store i64* %ln8S2, i64** %Sp_Var
  %ln8S3 = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8S4 = load i64*, i64** %Sp_Var
  %ln8S5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8S3( i64* %Base_Arg, i64* %ln8S4, i64* %Hp_Arg, i64 %ln8S5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8RF:
  %ln8S6 = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln8S6, i64* %R1_Var
  %ln8S7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8S8 = bitcast i64* %ln8S7 to i64*
  %ln8S9 = load i64, i64* %ln8S8, !tbaa !5
  %ln8Sa = inttoptr i64 %ln8S9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Sb = load i64*, i64** %Sp_Var
  %ln8Sc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Sa( i64* %Base_Arg, i64* %ln8Sb, i64* %Hp_Arg, i64 %ln8Sc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.473468051 UTC

@c8Ro_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ro_info$def to i8*)
define internal ghccc void @c8Ro_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ro_info$def to i64)),i64 0), i64 0, i64 12884901918}>
{
c8Ro:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Sd = add i64 %R1_Arg, 16
  %ln8Se = inttoptr i64 %ln8Sd to i8*
  %ln8Sf = bitcast i8* @hsprimitive_memset_Word8 to void (i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i64, i64, i64) %ln8Sf( i8* %ln8Se, i64 0, i64 12500000, i64 0 ) nounwind
  %ln8Sg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rv_info$def to i64
  %ln8Sh = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Sg, i64* %ln8Sh, !tbaa !2
  store i64 %R1_Arg, i64* %R6_Var
  store i64 12500000, i64* %R5_Var
  store i64 0, i64* %R4_Var
  store i64 0, i64* %R3_Var
  store i64 2, i64* %R2_Var
  %ln8Si = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuzdszdwzdssievefn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Sj = load i64, i64* %R2_Var
  %ln8Sk = load i64, i64* %R3_Var
  %ln8Sl = load i64, i64* %R4_Var
  %ln8Sm = load i64, i64* %R5_Var
  %ln8Sn = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Si( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Sj, i64 %ln8Sk, i64 %ln8Sl, i64 %ln8Sm, i64 %ln8Sn, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.474888014 UTC

@c8Rv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rv_info$def to i8*)
define internal ghccc void @c8Rv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rv_info$def to i64)),i64 0), i64 0, i64 12884901918}>
{
c8Rv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8So = load i64*, i64** %Hp_Var
  %ln8Sp = getelementptr inbounds i64, i64* %ln8So, i32 3
  %ln8Sq = ptrtoint i64* %ln8Sp to i64
  %ln8Sr = inttoptr i64 %ln8Sq to i64*
  store i64* %ln8Sr, i64** %Hp_Var
  %ln8Ss = load i64*, i64** %Hp_Var
  %ln8St = ptrtoint i64* %ln8Ss to i64
  %ln8Su = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Sv = bitcast i64* %ln8Su to i64*
  %ln8Sw = load i64, i64* %ln8Sv, !tbaa !5
  %ln8Sx = icmp ugt i64 %ln8St, %ln8Sw
  %ln8Sy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Sx, i1 0 )
  br i1 %ln8Sy, label %c8RK, label %c8RJ
c8RJ:
  %ln8SA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8rm_info$def to i64
  %ln8Sz = load i64*, i64** %Hp_Var
  %ln8SB = getelementptr inbounds i64, i64* %ln8Sz, i32 -2
  store i64 %ln8SA, i64* %ln8SB, !tbaa !3
  %ln8SD = load i64, i64* %R1_Var
  %ln8SC = load i64*, i64** %Hp_Var
  %ln8SE = getelementptr inbounds i64, i64* %ln8SC, i32 0
  store i64 %ln8SD, i64* %ln8SE, !tbaa !3
  %ln8SF = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8SG = add i64 %ln8SF, 2
  store i64 %ln8SG, i64* %R4_Var
  %ln8SH = load i64*, i64** %Hp_Var
  %ln8SI = getelementptr inbounds i64, i64* %ln8SH, i32 -2
  %ln8SJ = ptrtoint i64* %ln8SI to i64
  store i64 %ln8SJ, i64* %R3_Var
  %ln8SK = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln8SK, i64* %R2_Var
  %ln8SL = load i64*, i64** %Sp_Var
  %ln8SM = getelementptr inbounds i64, i64* %ln8SL, i32 1
  %ln8SN = ptrtoint i64* %ln8SM to i64
  %ln8SO = inttoptr i64 %ln8SN to i64*
  store i64* %ln8SO, i64** %Sp_Var
  %ln8SP = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8SQ = load i64*, i64** %Sp_Var
  %ln8SR = load i64*, i64** %Hp_Var
  %ln8SS = load i64, i64* %R1_Var
  %ln8ST = load i64, i64* %R2_Var
  %ln8SU = load i64, i64* %R3_Var
  %ln8SV = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8SP( i64* %Base_Arg, i64* %ln8SQ, i64* %ln8SR, i64 %ln8SS, i64 %ln8ST, i64 %ln8SU, i64 %ln8SV, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8RK:
  %ln8SW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8SW, !tbaa !5
  %ln8SX = load i64, i64* %R1_Var
  store i64 %ln8SX, i64* %R1_Var
  %ln8SY = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8SZ = load i64*, i64** %Sp_Var
  %ln8T0 = load i64*, i64** %Hp_Var
  %ln8T1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8SY( i64* %Base_Arg, i64* %ln8SZ, i64* %ln8T0, i64 %ln8T1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.476373146 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.476778762 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 4294967310}>
{
c8T6:
  %ln8T9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8T9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.477678343 UTC

%Main_main2_closure_struct = type <{i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.478144237 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64)),i64 16), i64 4294967299, i64 0, i64 12884901902}>
{
c8Te:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Th = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %ln8Ti = add i64 %ln8Th, 1
  store i64 %ln8Ti, i64* %R2_Var
  %ln8Tj = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Tk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Tj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Tk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.479221196 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.479657288 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8RL_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)),i64 32), i64 4294967299, i64 0, i64 4294967310}>
{
c8Tp:
  %ln8Ts = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ts( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-10-10 15:29:52.480374352 UTC

%S8RL_srt_struct = type <{i64, i64, i64, i64, i64}>
@S8RL_srt$def = internal constant %S8RL_srt_struct<{i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStr2_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64)}>
@S8RL_srt = internal alias i8, bitcast (%S8RL_srt_struct* @S8RL_srt$def to i8*)


==================== LLVM Code ====================
2018-10-10 15:29:52.480602781 UTC

@hsprimitive_memset_Word8 = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@stg_gc_unbx_r1 = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@stg_gc_unpt_r1 = external global i8
@base_GHCziShow_zdfShowIntzuzdcshow_info = external global i8
@stg_newByteArrayzh = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_info = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@base_GHCziIOziHandleziText_hPutStr2_closure = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8


==================== LLVM Code ====================
2018-10-10 15:29:52.480848174 UTC

@llvm.used = appending constant [11 x i8*] [i8* bitcast (%S8RL_srt_struct* @S8RL_srt$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%Main_mainzuzdszdwzdssievefn_closure_struct* @Main_mainzuzdszdwzdssievefn_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)], section "llvm.metadata"

